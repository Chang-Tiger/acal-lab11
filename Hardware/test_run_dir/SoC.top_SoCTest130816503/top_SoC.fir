circuit top_SoC :
  module DMA :
    input clock : Clock
    input reset : Reset
    output io : { slave : { flip aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}, flip ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, master : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, Hcf : UInt<1>}

    reg mState : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[DMA.scala 17:24]
    reg sReadState : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[DMA.scala 23:28]
    reg sWriteState : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[DMA.scala 24:28]
    reg sReadAddrReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DMA.scala 26:33]
    reg sReadIDReg : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[DMA.scala 27:33]
    reg sWriteIDReg : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[DMA.scala 28:33]
    reg sWriteDataRecv : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[DMA.scala 29:33]
    reg sWriteAddrRecv : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[DMA.scala 30:33]
    reg sWriteDataReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DMA.scala 31:33]
    reg sWriteAddrReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DMA.scala 32:33]
    node _sWriteAddrOffset_T = sub(sWriteAddrReg, UInt<1>("h0")) @[DMA.scala 33:52]
    node _sWriteAddrOffset_T_1 = tail(_sWriteAddrOffset_T, 1) @[DMA.scala 33:52]
    wire sWriteAddrOffset : UInt
    sWriteAddrOffset <= _sWriteAddrOffset_T_1
    node _sReadAddrOffset_T = sub(sReadAddrReg, UInt<1>("h0")) @[DMA.scala 34:51]
    node _sReadAddrOffset_T_1 = tail(_sReadAddrOffset_T, 1) @[DMA.scala 34:51]
    wire sReadAddrOffset : UInt
    sReadAddrOffset <= _sReadAddrOffset_T_1
    reg mWriteAddrSent : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[DMA.scala 36:31]
    reg mWriteDataSent : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[DMA.scala 37:31]
    reg mReadlast : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[DMA.scala 38:26]
    wire _mmio_regs_WIRE : UInt<32>[6] @[DMA.scala 40:42]
    _mmio_regs_WIRE[0] <= UInt<32>("h0") @[DMA.scala 40:42]
    _mmio_regs_WIRE[1] <= UInt<32>("h0") @[DMA.scala 40:42]
    _mmio_regs_WIRE[2] <= UInt<32>("h0") @[DMA.scala 40:42]
    _mmio_regs_WIRE[3] <= UInt<32>("h0") @[DMA.scala 40:42]
    _mmio_regs_WIRE[4] <= UInt<32>("h0") @[DMA.scala 40:42]
    _mmio_regs_WIRE[5] <= UInt<32>("h0") @[DMA.scala 40:42]
    reg mmio_regs : UInt<32>[6], clock with :
      reset => (reset, _mmio_regs_WIRE) @[DMA.scala 40:34]
    reg data_buffer : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DMA.scala 49:31]
    wire rData_mask : UInt<4>
    rData_mask <= UInt<4>("h0")
    wire mask_width : UInt<4>
    mask_width <= UInt<4>("h0")
    reg source_offset : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[DMA.scala 52:31]
    wire _rData_WIRE : UInt<8>[4] @[DMA.scala 53:43]
    _rData_WIRE[0] <= UInt<8>("h0") @[DMA.scala 53:43]
    _rData_WIRE[1] <= UInt<8>("h0") @[DMA.scala 53:43]
    _rData_WIRE[2] <= UInt<8>("h0") @[DMA.scala 53:43]
    _rData_WIRE[3] <= UInt<8>("h0") @[DMA.scala 53:43]
    wire rData : UInt<8>[4]
    rData <= _rData_WIRE
    node _dest_offset_T = bits(io.master.aw.bits.addr, 1, 0) @[DMA.scala 55:55]
    wire dest_offset : UInt
    dest_offset <= _dest_offset_T
    reg request_counter : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DMA.scala 58:32]
    node _sReadData_T = eq(UInt<1>("h0"), sReadAddrOffset) @[Mux.scala 81:61]
    node _sReadData_T_1 = mux(_sReadData_T, mmio_regs[0], UInt<1>("h0")) @[Mux.scala 81:58]
    node _sReadData_T_2 = eq(UInt<3>("h4"), sReadAddrOffset) @[Mux.scala 81:61]
    node _sReadData_T_3 = mux(_sReadData_T_2, mmio_regs[1], _sReadData_T_1) @[Mux.scala 81:58]
    node _sReadData_T_4 = eq(UInt<4>("h8"), sReadAddrOffset) @[Mux.scala 81:61]
    node _sReadData_T_5 = mux(_sReadData_T_4, mmio_regs[2], _sReadData_T_3) @[Mux.scala 81:58]
    node _sReadData_T_6 = eq(UInt<4>("hc"), sReadAddrOffset) @[Mux.scala 81:61]
    node _sReadData_T_7 = mux(_sReadData_T_6, mmio_regs[3], _sReadData_T_5) @[Mux.scala 81:58]
    node _sReadData_T_8 = eq(UInt<5>("h10"), sReadAddrOffset) @[Mux.scala 81:61]
    node _sReadData_T_9 = mux(_sReadData_T_8, mmio_regs[4], _sReadData_T_7) @[Mux.scala 81:58]
    node _sReadData_T_10 = eq(UInt<5>("h14"), sReadAddrOffset) @[Mux.scala 81:61]
    node _sReadData_T_11 = mux(_sReadData_T_10, mmio_regs[5], _sReadData_T_9) @[Mux.scala 81:58]
    wire sReadData : UInt
    sReadData <= _sReadData_T_11
    io.Hcf <= mmio_regs[5] @[DMA.scala 74:10]
    node _io_master_aw_valid_T = eq(mState, UInt<3>("h3")) @[DMA.scala 77:38]
    node _io_master_aw_valid_T_1 = eq(mWriteAddrSent, UInt<1>("h0")) @[DMA.scala 77:56]
    node _io_master_aw_valid_T_2 = and(_io_master_aw_valid_T, _io_master_aw_valid_T_1) @[DMA.scala 77:53]
    io.master.aw.valid <= _io_master_aw_valid_T_2 @[DMA.scala 77:28]
    io.master.aw.bits.addr <= UInt<1>("h0") @[DMA.scala 78:28]
    io.master.aw.bits.burst <= UInt<1>("h0") @[DMA.scala 79:28]
    io.master.aw.bits.len <= UInt<1>("h0") @[DMA.scala 80:28]
    io.master.aw.bits.size <= UInt<2>("h2") @[DMA.scala 81:28]
    io.master.aw.bits.cache <= UInt<1>("h0") @[DMA.scala 82:28]
    io.master.aw.bits.id <= UInt<1>("h0") @[DMA.scala 83:28]
    io.master.aw.bits.prot <= UInt<1>("h0") @[DMA.scala 84:28]
    io.master.aw.bits.lock <= UInt<1>("h0") @[DMA.scala 85:28]
    io.master.aw.bits.qos <= UInt<1>("h0") @[DMA.scala 86:28]
    io.master.aw.bits.region <= UInt<1>("h0") @[DMA.scala 87:28]
    node _io_master_ar_valid_T = eq(mState, UInt<3>("h1")) @[DMA.scala 89:38]
    io.master.ar.valid <= _io_master_ar_valid_T @[DMA.scala 89:28]
    io.master.ar.bits.addr <= UInt<1>("h0") @[DMA.scala 90:28]
    io.master.ar.bits.burst <= UInt<1>("h0") @[DMA.scala 91:28]
    io.master.ar.bits.len <= UInt<1>("h0") @[DMA.scala 92:28]
    io.master.ar.bits.size <= UInt<2>("h2") @[DMA.scala 93:28]
    io.master.ar.bits.cache <= UInt<1>("h0") @[DMA.scala 94:28]
    io.master.ar.bits.id <= UInt<1>("h0") @[DMA.scala 95:28]
    io.master.ar.bits.prot <= UInt<1>("h0") @[DMA.scala 96:28]
    io.master.ar.bits.lock <= UInt<1>("h0") @[DMA.scala 97:28]
    io.master.ar.bits.qos <= UInt<1>("h0") @[DMA.scala 98:28]
    io.master.ar.bits.region <= UInt<1>("h0") @[DMA.scala 99:28]
    node _io_master_w_valid_T = eq(mState, UInt<3>("h3")) @[DMA.scala 101:35]
    node _io_master_w_valid_T_1 = eq(mWriteDataSent, UInt<1>("h0")) @[DMA.scala 101:53]
    node _io_master_w_valid_T_2 = and(_io_master_w_valid_T, _io_master_w_valid_T_1) @[DMA.scala 101:50]
    io.master.w.valid <= _io_master_w_valid_T_2 @[DMA.scala 101:25]
    io.master.w.bits.data <= data_buffer @[DMA.scala 102:25]
    io.master.w.bits.strb <= UInt<4>("hf") @[DMA.scala 103:25]
    io.master.w.bits.last <= UInt<1>("h1") @[DMA.scala 104:25]
    node _io_master_r_ready_T = eq(mState, UInt<3>("h2")) @[DMA.scala 106:31]
    io.master.r.ready <= _io_master_r_ready_T @[DMA.scala 106:21]
    node _io_master_b_ready_T = eq(mState, UInt<3>("h4")) @[DMA.scala 108:31]
    io.master.b.ready <= _io_master_b_ready_T @[DMA.scala 108:21]
    node _io_slave_aw_ready_T = eq(sWriteState, UInt<2>("h0")) @[DMA.scala 110:37]
    node _io_slave_aw_ready_T_1 = eq(sWriteState, UInt<2>("h1")) @[DMA.scala 110:67]
    node _io_slave_aw_ready_T_2 = or(_io_slave_aw_ready_T, _io_slave_aw_ready_T_1) @[DMA.scala 110:52]
    node _io_slave_aw_ready_T_3 = eq(sWriteAddrRecv, UInt<1>("h0")) @[DMA.scala 110:86]
    node _io_slave_aw_ready_T_4 = and(_io_slave_aw_ready_T_2, _io_slave_aw_ready_T_3) @[DMA.scala 110:83]
    io.slave.aw.ready <= _io_slave_aw_ready_T_4 @[DMA.scala 110:21]
    node _io_slave_w_ready_T = eq(sWriteState, UInt<2>("h0")) @[DMA.scala 111:36]
    node _io_slave_w_ready_T_1 = eq(sWriteState, UInt<2>("h1")) @[DMA.scala 111:66]
    node _io_slave_w_ready_T_2 = or(_io_slave_w_ready_T, _io_slave_w_ready_T_1) @[DMA.scala 111:51]
    node _io_slave_w_ready_T_3 = eq(sWriteDataRecv, UInt<1>("h0")) @[DMA.scala 111:85]
    node _io_slave_w_ready_T_4 = and(_io_slave_w_ready_T_2, _io_slave_w_ready_T_3) @[DMA.scala 111:82]
    io.slave.w.ready <= _io_slave_w_ready_T_4 @[DMA.scala 111:20]
    node _io_slave_ar_ready_T = eq(sReadState, UInt<1>("h0")) @[DMA.scala 113:35]
    io.slave.ar.ready <= _io_slave_ar_ready_T @[DMA.scala 113:21]
    node _io_slave_r_valid_T = eq(sReadState, UInt<1>("h1")) @[DMA.scala 115:38]
    io.slave.r.valid <= _io_slave_r_valid_T @[DMA.scala 115:24]
    io.slave.r.bits.data <= sReadData @[DMA.scala 116:24]
    io.slave.r.bits.id <= sReadIDReg @[DMA.scala 117:24]
    io.slave.r.bits.last <= UInt<1>("h1") @[DMA.scala 118:24]
    io.slave.r.bits.resp <= UInt<1>("h0") @[DMA.scala 119:24]
    node _io_slave_b_valid_T = eq(sWriteState, UInt<2>("h2")) @[DMA.scala 121:39]
    io.slave.b.valid <= _io_slave_b_valid_T @[DMA.scala 121:24]
    io.slave.b.bits.id <= sWriteIDReg @[DMA.scala 122:24]
    io.slave.b.bits.resp <= UInt<1>("h0") @[DMA.scala 123:24]
    node _T = eq(UInt<3>("h0"), mState) @[DMA.scala 126:18]
    when _T : @[DMA.scala 126:18]
      node _T_1 = eq(mmio_regs[0], UInt<1>("h1")) @[DMA.scala 129:24]
      when _T_1 : @[DMA.scala 129:33]
        mState <= UInt<3>("h1") @[DMA.scala 130:16]
    else :
      node _T_2 = eq(UInt<3>("h1"), mState) @[DMA.scala 126:18]
      when _T_2 : @[DMA.scala 126:18]
        when io.master.ar.ready : @[DMA.scala 137:32]
          mState <= UInt<3>("h2") @[DMA.scala 138:16]
      else :
        node _T_3 = eq(UInt<3>("h2"), mState) @[DMA.scala 126:18]
        when _T_3 : @[DMA.scala 126:18]
          when io.master.r.valid : @[DMA.scala 145:31]
            mState <= UInt<3>("h3") @[DMA.scala 146:16]
        else :
          node _T_4 = eq(UInt<3>("h3"), mState) @[DMA.scala 126:18]
          when _T_4 : @[DMA.scala 126:18]
            node _T_5 = and(mWriteAddrSent, mWriteDataSent) @[DMA.scala 151:27]
            when _T_5 : @[DMA.scala 151:46]
              mState <= UInt<3>("h4") @[DMA.scala 152:16]
          else :
            node _T_6 = eq(UInt<3>("h4"), mState) @[DMA.scala 126:18]
            when _T_6 : @[DMA.scala 126:18]
              node _T_7 = and(io.master.b.valid, mReadlast) @[DMA.scala 157:30]
              when _T_7 : @[DMA.scala 157:44]
                mState <= UInt<3>("h0") @[DMA.scala 158:16]
              else :
                node _T_8 = eq(mReadlast, UInt<1>("h0")) @[DMA.scala 159:39]
                node _T_9 = and(io.master.b.valid, _T_8) @[DMA.scala 159:36]
                when _T_9 : @[DMA.scala 159:50]
                  mState <= UInt<3>("h2") @[DMA.scala 160:16]
    node _T_10 = eq(UInt<1>("h0"), sReadState) @[DMA.scala 166:22]
    when _T_10 : @[DMA.scala 166:22]
      when io.slave.ar.valid : @[DMA.scala 168:31]
        sReadState <= UInt<1>("h1") @[DMA.scala 169:20]
    else :
      node _T_11 = eq(UInt<1>("h1"), sReadState) @[DMA.scala 166:22]
      when _T_11 : @[DMA.scala 166:22]
        when io.slave.r.ready : @[DMA.scala 173:30]
          sReadState <= UInt<1>("h0") @[DMA.scala 174:20]
    node _T_12 = eq(UInt<2>("h0"), sWriteState) @[DMA.scala 179:23]
    when _T_12 : @[DMA.scala 179:23]
      node _T_13 = or(io.slave.aw.valid, io.slave.w.valid) @[DMA.scala 181:30]
      when _T_13 : @[DMA.scala 181:51]
        sWriteState <= UInt<2>("h1") @[DMA.scala 182:21]
    else :
      node _T_14 = eq(UInt<2>("h1"), sWriteState) @[DMA.scala 179:23]
      when _T_14 : @[DMA.scala 179:23]
        node _T_15 = and(sWriteDataRecv, sWriteAddrRecv) @[DMA.scala 186:27]
        when _T_15 : @[DMA.scala 186:46]
          sWriteState <= UInt<2>("h2") @[DMA.scala 187:21]
      else :
        node _T_16 = eq(UInt<2>("h2"), sWriteState) @[DMA.scala 179:23]
        when _T_16 : @[DMA.scala 179:23]
          when io.slave.b.ready : @[DMA.scala 191:30]
            sWriteState <= UInt<2>("h0") @[DMA.scala 192:21]
    node _T_17 = eq(mState, UInt<3>("h3")) @[DMA.scala 198:15]
    when _T_17 : @[DMA.scala 198:31]
      node _T_18 = and(io.master.aw.ready, io.master.aw.valid) @[Decoupled.scala 52:35]
      when _T_18 : @[DMA.scala 199:29]
        node _request_counter_T = add(request_counter, UInt<1>("h1")) @[DMA.scala 201:42]
        node _request_counter_T_1 = tail(_request_counter_T, 1) @[DMA.scala 201:42]
        request_counter <= _request_counter_T_1 @[DMA.scala 201:23]
    node _T_19 = eq(mState, UInt<3>("h0")) @[DMA.scala 204:15]
    when _T_19 : @[DMA.scala 204:25]
      mReadlast <= UInt<1>("h0") @[DMA.scala 204:36]
    node _T_20 = eq(mState, UInt<3>("h1")) @[DMA.scala 205:15]
    when _T_20 : @[DMA.scala 205:30]
      node _io_master_ar_bits_addr_T = bits(mmio_regs[3], 31, 24) @[DMA.scala 208:82]
      node _io_master_ar_bits_addr_T_1 = mul(request_counter, _io_master_ar_bits_addr_T) @[DMA.scala 208:67]
      node _io_master_ar_bits_addr_T_2 = add(mmio_regs[1], _io_master_ar_bits_addr_T_1) @[DMA.scala 208:48]
      node _io_master_ar_bits_addr_T_3 = tail(_io_master_ar_bits_addr_T_2, 1) @[DMA.scala 208:48]
      io.master.ar.bits.addr <= _io_master_ar_bits_addr_T_3 @[DMA.scala 208:28]
      node _source_offset_T = bits(io.master.ar.bits.addr, 1, 0) @[DMA.scala 212:44]
      source_offset <= _source_offset_T @[DMA.scala 212:19]
    node _T_21 = eq(mState, UInt<3>("h2")) @[DMA.scala 215:15]
    node _T_22 = and(_T_21, io.master.r.valid) @[DMA.scala 215:29]
    when _T_22 : @[DMA.scala 215:51]
      node _mask_width_T = bits(mmio_regs[3], 15, 8) @[DMA.scala 218:42]
      node _mask_width_T_1 = eq(UInt<1>("h1"), _mask_width_T) @[Mux.scala 81:61]
      node _mask_width_T_2 = mux(_mask_width_T_1, UInt<1>("h1"), UInt<4>("hf")) @[Mux.scala 81:58]
      node _mask_width_T_3 = eq(UInt<2>("h2"), _mask_width_T) @[Mux.scala 81:61]
      node _mask_width_T_4 = mux(_mask_width_T_3, UInt<2>("h3"), _mask_width_T_2) @[Mux.scala 81:58]
      node _mask_width_T_5 = eq(UInt<2>("h3"), _mask_width_T) @[Mux.scala 81:61]
      node _mask_width_T_6 = mux(_mask_width_T_5, UInt<3>("h7"), _mask_width_T_4) @[Mux.scala 81:58]
      node _mask_width_T_7 = eq(UInt<3>("h4"), _mask_width_T) @[Mux.scala 81:61]
      node _mask_width_T_8 = mux(_mask_width_T_7, UInt<4>("hf"), _mask_width_T_6) @[Mux.scala 81:58]
      mask_width <= _mask_width_T_8 @[DMA.scala 218:16]
      mReadlast <= io.master.r.bits.last @[DMA.scala 225:15]
      node _rData_mask_T = dshl(mask_width, source_offset) @[DMA.scala 228:30]
      rData_mask <= _rData_mask_T @[DMA.scala 228:16]
      node _T_23 = bits(rData_mask, 0, 0) @[DMA.scala 232:22]
      node _T_24 = eq(_T_23, UInt<1>("h1")) @[DMA.scala 232:26]
      when _T_24 : @[DMA.scala 232:35]
        node _rData_0_T = bits(io.master.r.bits.data, 7, 0) @[DMA.scala 233:42]
        rData[0] <= _rData_0_T @[DMA.scala 233:18]
      else :
        rData[0] <= UInt<8>("h0") @[DMA.scala 236:18]
      node _T_25 = bits(rData_mask, 1, 1) @[DMA.scala 232:22]
      node _T_26 = eq(_T_25, UInt<1>("h1")) @[DMA.scala 232:26]
      when _T_26 : @[DMA.scala 232:35]
        node _rData_1_T = bits(io.master.r.bits.data, 15, 8) @[DMA.scala 233:42]
        rData[1] <= _rData_1_T @[DMA.scala 233:18]
      else :
        rData[1] <= UInt<8>("h0") @[DMA.scala 236:18]
      node _T_27 = bits(rData_mask, 2, 2) @[DMA.scala 232:22]
      node _T_28 = eq(_T_27, UInt<1>("h1")) @[DMA.scala 232:26]
      when _T_28 : @[DMA.scala 232:35]
        node _rData_2_T = bits(io.master.r.bits.data, 23, 16) @[DMA.scala 233:42]
        rData[2] <= _rData_2_T @[DMA.scala 233:18]
      else :
        rData[2] <= UInt<8>("h0") @[DMA.scala 236:18]
      node _T_29 = bits(rData_mask, 3, 3) @[DMA.scala 232:22]
      node _T_30 = eq(_T_29, UInt<1>("h1")) @[DMA.scala 232:26]
      when _T_30 : @[DMA.scala 232:35]
        node _rData_3_T = bits(io.master.r.bits.data, 31, 24) @[DMA.scala 233:42]
        rData[3] <= _rData_3_T @[DMA.scala 233:18]
      else :
        rData[3] <= UInt<8>("h0") @[DMA.scala 236:18]
      node data_buffer_lo = cat(rData[1], rData[0]) @[DMA.scala 241:26]
      node data_buffer_hi = cat(rData[3], rData[2]) @[DMA.scala 241:26]
      node _data_buffer_T = cat(data_buffer_hi, data_buffer_lo) @[DMA.scala 241:26]
      node _data_buffer_T_1 = dshl(source_offset, UInt<2>("h3")) @[DMA.scala 241:51]
      node _data_buffer_T_2 = dshr(_data_buffer_T, _data_buffer_T_1) @[DMA.scala 241:33]
      data_buffer <= _data_buffer_T_2 @[DMA.scala 241:17]
    node _T_31 = eq(mState, UInt<3>("h3")) @[DMA.scala 244:15]
    when _T_31 : @[DMA.scala 244:31]
      node _io_master_aw_bits_addr_T = bits(mmio_regs[3], 23, 16) @[DMA.scala 247:80]
      node _io_master_aw_bits_addr_T_1 = mul(request_counter, _io_master_aw_bits_addr_T) @[DMA.scala 247:65]
      node _io_master_aw_bits_addr_T_2 = add(mmio_regs[2], _io_master_aw_bits_addr_T_1) @[DMA.scala 247:46]
      node _io_master_aw_bits_addr_T_3 = tail(_io_master_aw_bits_addr_T_2, 1) @[DMA.scala 247:46]
      io.master.aw.bits.addr <= _io_master_aw_bits_addr_T_3 @[DMA.scala 247:28]
      node _mask_width_T_9 = bits(mmio_regs[3], 15, 8) @[DMA.scala 250:42]
      node _mask_width_T_10 = eq(UInt<1>("h1"), _mask_width_T_9) @[Mux.scala 81:61]
      node _mask_width_T_11 = mux(_mask_width_T_10, UInt<1>("h1"), UInt<4>("hf")) @[Mux.scala 81:58]
      node _mask_width_T_12 = eq(UInt<2>("h2"), _mask_width_T_9) @[Mux.scala 81:61]
      node _mask_width_T_13 = mux(_mask_width_T_12, UInt<2>("h3"), _mask_width_T_11) @[Mux.scala 81:58]
      node _mask_width_T_14 = eq(UInt<2>("h3"), _mask_width_T_9) @[Mux.scala 81:61]
      node _mask_width_T_15 = mux(_mask_width_T_14, UInt<3>("h7"), _mask_width_T_13) @[Mux.scala 81:58]
      node _mask_width_T_16 = eq(UInt<3>("h4"), _mask_width_T_9) @[Mux.scala 81:61]
      node _mask_width_T_17 = mux(_mask_width_T_16, UInt<4>("hf"), _mask_width_T_15) @[Mux.scala 81:58]
      mask_width <= _mask_width_T_17 @[DMA.scala 250:16]
      node _io_master_w_bits_strb_T = dshl(mask_width, dest_offset) @[DMA.scala 257:41]
      io.master.w.bits.strb <= _io_master_w_bits_strb_T @[DMA.scala 257:27]
      node _io_master_w_bits_data_T = dshl(dest_offset, UInt<2>("h3")) @[DMA.scala 260:58]
      node _io_master_w_bits_data_T_1 = dshl(data_buffer, _io_master_w_bits_data_T) @[DMA.scala 260:42]
      io.master.w.bits.data <= _io_master_w_bits_data_T_1 @[DMA.scala 260:27]
    node _T_32 = eq(mState, UInt<3>("h4")) @[DMA.scala 265:15]
    node _T_33 = bits(mmio_regs[3], 7, 0) @[DMA.scala 265:66]
    node _T_34 = eq(request_counter, _T_33) @[DMA.scala 265:49]
    node _T_35 = and(_T_32, _T_34) @[DMA.scala 265:30]
    when _T_35 : @[DMA.scala 265:73]
      request_counter <= UInt<1>("h0") @[DMA.scala 266:21]
      mmio_regs[0] <= UInt<1>("h0") @[DMA.scala 267:17]
      mmio_regs[5] <= UInt<1>("h1") @[DMA.scala 268:17]
    node _T_36 = eq(mState, UInt<3>("h3")) @[DMA.scala 272:15]
    when _T_36 : @[DMA.scala 272:31]
      when io.master.w.ready : @[DMA.scala 273:29]
        mWriteDataSent <= UInt<1>("h1") @[DMA.scala 274:22]
      when io.master.aw.ready : @[DMA.scala 276:30]
        mWriteAddrSent <= UInt<1>("h1") @[DMA.scala 277:22]
    else :
      mWriteAddrSent <= UInt<1>("h0") @[DMA.scala 280:20]
      mWriteDataSent <= UInt<1>("h0") @[DMA.scala 281:20]
    node _T_37 = eq(sWriteState, UInt<2>("h0")) @[DMA.scala 287:20]
    node _T_38 = eq(sWriteState, UInt<2>("h1")) @[DMA.scala 287:50]
    node _T_39 = or(_T_37, _T_38) @[DMA.scala 287:35]
    when _T_39 : @[DMA.scala 287:66]
      when io.slave.aw.valid : @[DMA.scala 288:29]
        sWriteAddrRecv <= UInt<1>("h1") @[DMA.scala 289:23]
        node _sWriteAddrReg_T = mux(sWriteAddrRecv, sWriteAddrReg, io.slave.aw.bits.addr) @[DMA.scala 290:29]
        sWriteAddrReg <= _sWriteAddrReg_T @[DMA.scala 290:23]
        node _sWriteIDReg_T = mux(sWriteAddrRecv, sWriteIDReg, io.slave.aw.bits.id) @[DMA.scala 295:29]
        sWriteIDReg <= _sWriteIDReg_T @[DMA.scala 295:23]
      when io.slave.w.valid : @[DMA.scala 301:28]
        sWriteDataRecv <= UInt<1>("h1") @[DMA.scala 302:22]
        node _sWriteDataReg_T = mux(sWriteDataRecv, sWriteDataReg, io.slave.w.bits.data) @[DMA.scala 303:28]
        sWriteDataReg <= _sWriteDataReg_T @[DMA.scala 303:22]
    else :
      node _T_40 = eq(sWriteState, UInt<2>("h2")) @[DMA.scala 305:26]
      when _T_40 : @[DMA.scala 305:42]
        sWriteAddrRecv <= UInt<1>("h0") @[DMA.scala 306:20]
        sWriteDataRecv <= UInt<1>("h0") @[DMA.scala 307:20]
    node _T_41 = eq(sWriteState, UInt<2>("h2")) @[DMA.scala 311:20]
    node _T_42 = and(_T_41, io.slave.b.ready) @[DMA.scala 311:35]
    when _T_42 : @[DMA.scala 311:56]
      node _T_43 = eq(UInt<1>("h0"), sWriteAddrOffset) @[DMA.scala 312:30]
      when _T_43 : @[DMA.scala 312:30]
        mmio_regs[0] <= sWriteDataReg @[DMA.scala 314:22]
      else :
        node _T_44 = eq(UInt<3>("h4"), sWriteAddrOffset) @[DMA.scala 312:30]
        when _T_44 : @[DMA.scala 312:30]
          mmio_regs[1] <= sWriteDataReg @[DMA.scala 317:22]
        else :
          node _T_45 = eq(UInt<4>("h8"), sWriteAddrOffset) @[DMA.scala 312:30]
          when _T_45 : @[DMA.scala 312:30]
            mmio_regs[2] <= sWriteDataReg @[DMA.scala 320:22]
          else :
            node _T_46 = eq(UInt<4>("hc"), sWriteAddrOffset) @[DMA.scala 312:30]
            when _T_46 : @[DMA.scala 312:30]
              mmio_regs[3] <= sWriteDataReg @[DMA.scala 323:22]
            else :
              node _T_47 = eq(UInt<5>("h10"), sWriteAddrOffset) @[DMA.scala 312:30]
              when _T_47 : @[DMA.scala 312:30]
                mmio_regs[4] <= sWriteDataReg @[DMA.scala 326:22]
              else :
                node _T_48 = eq(UInt<5>("h14"), sWriteAddrOffset) @[DMA.scala 312:30]
                when _T_48 : @[DMA.scala 312:30]
                  mmio_regs[5] <= sWriteDataReg @[DMA.scala 329:22]
    node _T_49 = eq(sReadState, UInt<1>("h0")) @[DMA.scala 333:19]
    node _T_50 = and(_T_49, io.slave.ar.valid) @[DMA.scala 333:33]
    when _T_50 : @[DMA.scala 333:55]
      sReadAddrReg <= io.slave.ar.bits.addr @[DMA.scala 334:18]
      sReadIDReg <= io.slave.ar.bits.id @[DMA.scala 335:18]

  module Reg_IF :
    input clock : Clock
    input reset : Reset
    output io : { flip Stall : UInt<1>, flip next_pc_in : UInt<32>, pc : UInt<32>}

    reg pcReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_IF.scala 15:24]
    when io.Stall : @[Reg_IF.scala 17:19]
      pcReg <= pcReg @[Reg_IF.scala 18:15]
    else :
      pcReg <= io.next_pc_in @[Reg_IF.scala 20:15]
    io.pc <= pcReg @[Reg_IF.scala 23:11]

  module Reg_ID :
    input clock : Clock
    input reset : Reset
    output io : { flip Flush : UInt<1>, flip Stall : UInt<1>, flip pc_in : UInt<32>, flip inst_in : UInt<32>, pc : UInt<32>, inst : UInt<32>}

    reg InstReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_ID.scala 19:26]
    reg pcReg : UInt<15>, clock with :
      reset => (reset, UInt<15>("h0")) @[Reg_ID.scala 20:25]
    when io.Flush : @[Reg_ID.scala 24:19]
      InstReg <= UInt<32>("h0") @[Reg_ID.scala 25:17]
      pcReg <= UInt<32>("h0") @[Reg_ID.scala 26:15]
    else :
      when io.Stall : @[Reg_ID.scala 27:25]
        InstReg <= InstReg @[Reg_ID.scala 28:17]
        pcReg <= pcReg @[Reg_ID.scala 29:15]
      else :
        InstReg <= io.inst_in @[Reg_ID.scala 31:17]
        pcReg <= io.pc_in @[Reg_ID.scala 32:15]
    io.inst <= InstReg @[Reg_ID.scala 35:13]
    io.pc <= pcReg @[Reg_ID.scala 36:11]

  module Reg_EXE :
    input clock : Clock
    input reset : Reset
    output io : { flip Flush : UInt<1>, flip Stall : UInt<1>, flip inst_in : UInt<32>, flip pc_in : UInt<32>, flip rs1_rdata_in : UInt<32>, flip rs2_rdata_in : UInt<32>, flip imm_in : UInt<32>, inst : UInt<32>, pc : UInt<32>, rs1_rdata : UInt<32>, rs2_rdata : UInt<32>, imm : UInt<32>}

    reg pcReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_EXE.scala 27:25]
    reg InstReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_EXE.scala 28:26]
    reg immReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_EXE.scala 29:25]
    reg rs1Reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_EXE.scala 30:25]
    reg rs2Reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_EXE.scala 31:25]
    when io.Flush : @[Reg_EXE.scala 34:19]
      immReg <= UInt<32>("h0") @[Reg_EXE.scala 35:16]
      InstReg <= UInt<32>("h0") @[Reg_EXE.scala 36:17]
      pcReg <= UInt<32>("h0") @[Reg_EXE.scala 37:15]
      rs1Reg <= UInt<32>("h0") @[Reg_EXE.scala 38:16]
      rs2Reg <= UInt<32>("h0") @[Reg_EXE.scala 39:16]
    else :
      when io.Stall : @[Reg_EXE.scala 40:25]
        immReg <= immReg @[Reg_EXE.scala 41:16]
        InstReg <= InstReg @[Reg_EXE.scala 42:17]
        pcReg <= pcReg @[Reg_EXE.scala 43:15]
        rs1Reg <= rs1Reg @[Reg_EXE.scala 44:16]
        rs2Reg <= rs2Reg @[Reg_EXE.scala 45:16]
      else :
        InstReg <= io.inst_in @[Reg_EXE.scala 47:17]
        immReg <= io.imm_in @[Reg_EXE.scala 48:16]
        pcReg <= io.pc_in @[Reg_EXE.scala 49:15]
        rs1Reg <= io.rs1_rdata_in @[Reg_EXE.scala 50:16]
        rs2Reg <= io.rs2_rdata_in @[Reg_EXE.scala 51:16]
    io.inst <= InstReg @[Reg_EXE.scala 54:13]
    io.imm <= immReg @[Reg_EXE.scala 55:12]
    io.pc <= pcReg @[Reg_EXE.scala 56:11]
    io.rs1_rdata <= rs1Reg @[Reg_EXE.scala 57:18]
    io.rs2_rdata <= rs2Reg @[Reg_EXE.scala 58:18]

  module Reg_MEM :
    input clock : Clock
    input reset : Reset
    output io : { flip Stall : UInt<1>, flip pc_in : UInt<32>, flip inst_in : UInt<32>, flip alu_out_in : UInt<32>, flip DM_wdata_in : UInt<32>, pc : UInt<32>, inst : UInt<32>, alu_out : UInt<32>, DM_wdata : UInt<32>}

    reg InstReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_MEM.scala 22:26]
    reg pcReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_MEM.scala 23:25]
    reg aluReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_MEM.scala 24:25]
    reg wdataReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_MEM.scala 25:27]
    when io.Stall : @[Reg_MEM.scala 28:19]
      InstReg <= InstReg @[Reg_MEM.scala 29:17]
      pcReg <= pcReg @[Reg_MEM.scala 30:15]
      aluReg <= aluReg @[Reg_MEM.scala 31:16]
      wdataReg <= wdataReg @[Reg_MEM.scala 32:18]
    else :
      InstReg <= io.inst_in @[Reg_MEM.scala 34:17]
      pcReg <= io.pc_in @[Reg_MEM.scala 35:15]
      aluReg <= io.alu_out_in @[Reg_MEM.scala 36:16]
      wdataReg <= io.DM_wdata_in @[Reg_MEM.scala 37:18]
    io.inst <= InstReg @[Reg_MEM.scala 40:13]
    io.pc <= pcReg @[Reg_MEM.scala 41:11]
    io.alu_out <= aluReg @[Reg_MEM.scala 42:16]
    io.DM_wdata <= wdataReg @[Reg_MEM.scala 43:17]

  module Reg_WB :
    input clock : Clock
    input reset : Reset
    output io : { flip Stall : UInt<1>, flip pc_plus4_in : UInt<32>, flip inst_in : UInt<32>, flip alu_out_in : UInt<32>, flip ld_data_in : UInt<32>, pc_plus4 : UInt<32>, inst : UInt<32>, alu_out : UInt<32>, ld_data : UInt<32>}

    reg pc_plus4_Reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_WB.scala 22:32]
    reg InstReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_WB.scala 23:26]
    reg alu_out_Reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_WB.scala 24:30]
    reg ld_data_Reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_WB.scala 25:30]
    when io.Stall : @[Reg_WB.scala 28:19]
      pc_plus4_Reg <= pc_plus4_Reg @[Reg_WB.scala 29:22]
      InstReg <= InstReg @[Reg_WB.scala 30:17]
      alu_out_Reg <= alu_out_Reg @[Reg_WB.scala 31:21]
      ld_data_Reg <= ld_data_Reg @[Reg_WB.scala 32:21]
    else :
      pc_plus4_Reg <= io.pc_plus4_in @[Reg_WB.scala 34:22]
      InstReg <= io.inst_in @[Reg_WB.scala 35:17]
      alu_out_Reg <= io.alu_out_in @[Reg_WB.scala 36:21]
      ld_data_Reg <= io.ld_data_in @[Reg_WB.scala 37:21]
    io.pc_plus4 <= pc_plus4_Reg @[Reg_WB.scala 40:17]
    io.inst <= InstReg @[Reg_WB.scala 41:13]
    io.alu_out <= alu_out_Reg @[Reg_WB.scala 42:16]
    io.ld_data <= ld_data_Reg @[Reg_WB.scala 43:16]

  module Path_IF :
    input clock : Clock
    input reset : Reset
    output io : { flip PCSel : UInt<2>, flip IF_pc_in : UInt<32>, flip EXE_pc_in : UInt<32>, flip EXE_target_pc_in : UInt<32>, flip Mem_data : UInt<32>, next_pc : UInt<32>, Mem_Addr : UInt<32>, inst : UInt<32>}

    node _io_next_pc_T = add(io.IF_pc_in, UInt<32>("h4")) @[Path_IF.scala 23:52]
    node _io_next_pc_T_1 = tail(_io_next_pc_T, 1) @[Path_IF.scala 23:52]
    node _io_next_pc_T_2 = add(io.IF_pc_in, UInt<32>("h4")) @[Path_IF.scala 24:38]
    node _io_next_pc_T_3 = tail(_io_next_pc_T_2, 1) @[Path_IF.scala 24:38]
    node _io_next_pc_T_4 = add(io.EXE_pc_in, UInt<32>("h4")) @[Path_IF.scala 25:40]
    node _io_next_pc_T_5 = tail(_io_next_pc_T_4, 1) @[Path_IF.scala 25:40]
    node _io_next_pc_T_6 = eq(UInt<1>("h0"), io.PCSel) @[Mux.scala 81:61]
    node _io_next_pc_T_7 = mux(_io_next_pc_T_6, _io_next_pc_T_3, _io_next_pc_T_1) @[Mux.scala 81:58]
    node _io_next_pc_T_8 = eq(UInt<1>("h1"), io.PCSel) @[Mux.scala 81:61]
    node _io_next_pc_T_9 = mux(_io_next_pc_T_8, _io_next_pc_T_5, _io_next_pc_T_7) @[Mux.scala 81:58]
    node _io_next_pc_T_10 = eq(UInt<2>("h2"), io.PCSel) @[Mux.scala 81:61]
    node _io_next_pc_T_11 = mux(_io_next_pc_T_10, io.EXE_target_pc_in, _io_next_pc_T_9) @[Mux.scala 81:58]
    io.next_pc <= _io_next_pc_T_11 @[Path_IF.scala 23:16]
    io.Mem_Addr <= io.IF_pc_in @[Path_IF.scala 29:17]
    io.inst <= io.Mem_data @[Path_IF.scala 30:13]

  module RegFile :
    input clock : Clock
    input reset : Reset
    output io : { flip wen : UInt<1>, flip waddr : UInt<5>, flip wdata : UInt<32>, flip raddr : UInt<5>[2], rdata : UInt<32>[2], regs : UInt<32>[32]}

    wire _regs_WIRE : UInt<32>[32] @[RegFile.scala 16:29]
    _regs_WIRE[0] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[1] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[2] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[3] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[4] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[5] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[6] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[7] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[8] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[9] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[10] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[11] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[12] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[13] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[14] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[15] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[16] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[17] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[18] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[19] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[20] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[21] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[22] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[23] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[24] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[25] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[26] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[27] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[28] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[29] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[30] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[31] <= UInt<32>("h0") @[RegFile.scala 16:29]
    reg regs : UInt<32>[32], clock with :
      reset => (reset, _regs_WIRE) @[RegFile.scala 16:21]
    io.rdata[0] <= regs[io.raddr[0]] @[RegFile.scala 22:52]
    io.rdata[1] <= regs[io.raddr[1]] @[RegFile.scala 22:52]
    when io.wen : @[RegFile.scala 23:16]
      regs[io.waddr] <= io.wdata @[RegFile.scala 23:32]
    regs[0] <= UInt<1>("h0") @[RegFile.scala 24:11]
    io.regs <= regs @[RegFile.scala 26:11]

  module ImmGen :
    input clock : Clock
    input reset : Reset
    output io : { flip inst_31_7 : UInt<25>, flip ImmSel : UInt<3>, imm : UInt<32>}

    wire inst_shift : UInt<32> @[ImmGen.scala 15:26]
    node _inst_shift_T = cat(io.inst_31_7, UInt<7>("h0")) @[Cat.scala 33:92]
    inst_shift <= _inst_shift_T @[ImmGen.scala 16:16]
    wire simm : SInt<32> @[ImmGen.scala 18:20]
    node _simm_T = bits(inst_shift, 31, 20) @[ImmGen.scala 25:29]
    node _simm_T_1 = asSInt(_simm_T) @[ImmGen.scala 25:37]
    node _simm_T_2 = bits(inst_shift, 31, 31) @[ImmGen.scala 28:33]
    node _simm_T_3 = bits(inst_shift, 7, 7) @[ImmGen.scala 29:28]
    node _simm_T_4 = bits(inst_shift, 30, 25) @[ImmGen.scala 30:28]
    node _simm_T_5 = bits(inst_shift, 11, 8) @[ImmGen.scala 31:28]
    node simm_lo = cat(_simm_T_5, UInt<1>("h0")) @[Cat.scala 33:92]
    node simm_hi_hi = cat(_simm_T_2, _simm_T_3) @[Cat.scala 33:92]
    node simm_hi = cat(simm_hi_hi, _simm_T_4) @[Cat.scala 33:92]
    node _simm_T_6 = cat(simm_hi, simm_lo) @[Cat.scala 33:92]
    node _simm_T_7 = asSInt(_simm_T_6) @[ImmGen.scala 32:28]
    node _simm_T_8 = bits(inst_shift, 31, 31) @[ImmGen.scala 35:33]
    node _simm_T_9 = bits(inst_shift, 30, 25) @[ImmGen.scala 36:27]
    node _simm_T_10 = bits(inst_shift, 11, 8) @[ImmGen.scala 37:27]
    node _simm_T_11 = bits(inst_shift, 7, 7) @[ImmGen.scala 38:27]
    node simm_lo_1 = cat(_simm_T_10, _simm_T_11) @[Cat.scala 33:92]
    node simm_hi_1 = cat(_simm_T_8, _simm_T_9) @[Cat.scala 33:92]
    node _simm_T_12 = cat(simm_hi_1, simm_lo_1) @[Cat.scala 33:92]
    node _simm_T_13 = asSInt(_simm_T_12) @[ImmGen.scala 38:32]
    node _simm_T_14 = bits(inst_shift, 31, 12) @[ImmGen.scala 41:33]
    node _simm_T_15 = cat(_simm_T_14, UInt<12>("h0")) @[Cat.scala 33:92]
    node _simm_T_16 = asSInt(_simm_T_15) @[ImmGen.scala 41:52]
    node _simm_T_17 = bits(inst_shift, 31, 31) @[ImmGen.scala 44:33]
    node _simm_T_18 = bits(inst_shift, 19, 12) @[ImmGen.scala 45:28]
    node _simm_T_19 = bits(inst_shift, 20, 20) @[ImmGen.scala 46:28]
    node _simm_T_20 = bits(inst_shift, 30, 21) @[ImmGen.scala 47:28]
    node simm_lo_2 = cat(_simm_T_20, UInt<1>("h0")) @[Cat.scala 33:92]
    node simm_hi_hi_1 = cat(_simm_T_17, _simm_T_18) @[Cat.scala 33:92]
    node simm_hi_2 = cat(simm_hi_hi_1, _simm_T_19) @[Cat.scala 33:92]
    node _simm_T_21 = cat(simm_hi_2, simm_lo_2) @[Cat.scala 33:92]
    node _simm_T_22 = asSInt(_simm_T_21) @[ImmGen.scala 48:28]
    node _simm_T_23 = eq(UInt<1>("h0"), io.ImmSel) @[Mux.scala 81:61]
    node _simm_T_24 = mux(_simm_T_23, asSInt(UInt<1>("h0")), asSInt(UInt<1>("h0"))) @[Mux.scala 81:58]
    node _simm_T_25 = eq(UInt<1>("h1"), io.ImmSel) @[Mux.scala 81:61]
    node _simm_T_26 = mux(_simm_T_25, _simm_T_1, _simm_T_24) @[Mux.scala 81:58]
    node _simm_T_27 = eq(UInt<2>("h3"), io.ImmSel) @[Mux.scala 81:61]
    node _simm_T_28 = mux(_simm_T_27, _simm_T_7, _simm_T_26) @[Mux.scala 81:58]
    node _simm_T_29 = eq(UInt<2>("h2"), io.ImmSel) @[Mux.scala 81:61]
    node _simm_T_30 = mux(_simm_T_29, _simm_T_13, _simm_T_28) @[Mux.scala 81:58]
    node _simm_T_31 = eq(UInt<3>("h5"), io.ImmSel) @[Mux.scala 81:61]
    node _simm_T_32 = mux(_simm_T_31, _simm_T_16, _simm_T_30) @[Mux.scala 81:58]
    node _simm_T_33 = eq(UInt<3>("h4"), io.ImmSel) @[Mux.scala 81:61]
    node _simm_T_34 = mux(_simm_T_33, _simm_T_22, _simm_T_32) @[Mux.scala 81:58]
    simm <= _simm_T_34 @[ImmGen.scala 20:10]
    node _io_imm_T = asUInt(simm) @[ImmGen.scala 52:20]
    io.imm <= _io_imm_T @[ImmGen.scala 52:12]

  module Path_ID :
    input clock : Clock
    input reset : Reset
    output io : { flip ID_inst_in : UInt<32>, flip WB_index : UInt<5>, flip WB_wdata : UInt<32>, flip WB_RegWEn : UInt<1>, flip ImmSel : UInt<3>, ID_rs1_rdata : UInt<32>, ID_rs2_rdata : UInt<32>, imm : UInt<32>, regs : UInt<32>[32]}

    node rs1_index = bits(io.ID_inst_in, 19, 15) @[Path_ID.scala 23:34]
    node rs2_index = bits(io.ID_inst_in, 24, 20) @[Path_ID.scala 24:34]
    inst rf of RegFile @[Path_ID.scala 27:20]
    rf.clock <= clock
    rf.reset <= reset
    rf.io.wen <= io.WB_RegWEn @[Path_ID.scala 28:15]
    rf.io.waddr <= io.WB_index @[Path_ID.scala 29:17]
    rf.io.wdata <= io.WB_wdata @[Path_ID.scala 30:17]
    rf.io.raddr[0] <= rs1_index @[Path_ID.scala 31:20]
    rf.io.raddr[1] <= rs2_index @[Path_ID.scala 32:20]
    io.ID_rs1_rdata <= rf.io.rdata[0] @[Path_ID.scala 33:21]
    io.ID_rs2_rdata <= rf.io.rdata[1] @[Path_ID.scala 34:21]
    io.regs <= rf.io.regs @[Path_ID.scala 35:13]
    inst ig of ImmGen @[Path_ID.scala 38:20]
    ig.clock <= clock
    ig.reset <= reset
    ig.io.ImmSel <= io.ImmSel @[Path_ID.scala 39:18]
    node _ig_io_inst_31_7_T = bits(io.ID_inst_in, 31, 7) @[Path_ID.scala 40:37]
    ig.io.inst_31_7 <= _ig_io_inst_31_7_T @[Path_ID.scala 40:21]
    io.imm <= ig.io.imm @[Path_ID.scala 41:12]

  module BranchComp :
    input clock : Clock
    input reset : Reset
    output io : { flip BrUn : UInt<1>, flip src1 : UInt<32>, flip src2 : UInt<32>, BrEq : UInt<1>, BrLT : UInt<1>}

    wire eq : UInt<1>
    eq <= UInt<1>("h0")
    wire lt : UInt<1>
    lt <= UInt<1>("h0")
    when io.BrUn : @[BranchComp.scala 19:18]
      node _T = lt(io.src1, io.src2) @[BranchComp.scala 20:20]
      when _T : @[BranchComp.scala 20:31]
        lt <= UInt<1>("h1") @[BranchComp.scala 20:36]
    else :
      node _T_1 = asSInt(io.src1) @[BranchComp.scala 22:20]
      node _T_2 = asSInt(io.src2) @[BranchComp.scala 22:37]
      node _T_3 = lt(_T_1, _T_2) @[BranchComp.scala 22:27]
      when _T_3 : @[BranchComp.scala 22:45]
        lt <= UInt<1>("h1") @[BranchComp.scala 22:50]
    node _eq_T = eq(io.src1, io.src2) @[BranchComp.scala 25:22]
    node _eq_T_1 = mux(_eq_T, UInt<1>("h1"), UInt<1>("h0")) @[BranchComp.scala 25:14]
    eq <= _eq_T_1 @[BranchComp.scala 25:8]
    io.BrEq <= eq @[BranchComp.scala 27:13]
    io.BrLT <= lt @[BranchComp.scala 28:13]

  module ALU :
    input clock : Clock
    input reset : Reset
    output io : { flip src1 : UInt<32>, flip src2 : UInt<32>, flip ALUSel : UInt<15>, out : UInt<32>}

    io.out <= UInt<1>("h0") @[ALU.scala 19:10]
    node _T = eq(UInt<8>("hf8"), io.ALUSel) @[ALU.scala 20:20]
    when _T : @[ALU.scala 20:20]
      node _io_out_T = add(io.src1, io.src2) @[ALU.scala 21:31]
      node _io_out_T_1 = tail(_io_out_T, 1) @[ALU.scala 21:31]
      io.out <= _io_out_T_1 @[ALU.scala 21:21]
    else :
      node _T_1 = eq(UInt<8>("hf9"), io.ALUSel) @[ALU.scala 20:20]
      when _T_1 : @[ALU.scala 20:20]
        node _io_out_T_2 = bits(io.src2, 4, 0) @[ALU.scala 22:42]
        node _io_out_T_3 = dshl(io.src1, _io_out_T_2) @[ALU.scala 22:32]
        io.out <= _io_out_T_3 @[ALU.scala 22:21]
      else :
        node _T_2 = eq(UInt<8>("hfa"), io.ALUSel) @[ALU.scala 20:20]
        when _T_2 : @[ALU.scala 20:20]
          node _io_out_T_4 = asSInt(io.src1) @[ALU.scala 23:36]
          node _io_out_T_5 = asSInt(io.src2) @[ALU.scala 23:53]
          node _io_out_T_6 = lt(_io_out_T_4, _io_out_T_5) @[ALU.scala 23:43]
          node _io_out_T_7 = mux(_io_out_T_6, UInt<1>("h1"), UInt<1>("h0")) @[ALU.scala 23:27]
          io.out <= _io_out_T_7 @[ALU.scala 23:21]
        else :
          node _T_3 = eq(UInt<8>("hfb"), io.ALUSel) @[ALU.scala 20:20]
          when _T_3 : @[ALU.scala 20:20]
            node _io_out_T_8 = lt(io.src1, io.src2) @[ALU.scala 24:36]
            node _io_out_T_9 = mux(_io_out_T_8, UInt<1>("h1"), UInt<1>("h0")) @[ALU.scala 24:27]
            io.out <= _io_out_T_9 @[ALU.scala 24:21]
          else :
            node _T_4 = eq(UInt<8>("hfc"), io.ALUSel) @[ALU.scala 20:20]
            when _T_4 : @[ALU.scala 20:20]
              node _io_out_T_10 = xor(io.src1, io.src2) @[ALU.scala 25:31]
              io.out <= _io_out_T_10 @[ALU.scala 25:21]
            else :
              node _T_5 = eq(UInt<8>("hfd"), io.ALUSel) @[ALU.scala 20:20]
              when _T_5 : @[ALU.scala 20:20]
                node _io_out_T_11 = bits(io.src2, 4, 0) @[ALU.scala 26:42]
                node _io_out_T_12 = dshr(io.src1, _io_out_T_11) @[ALU.scala 26:32]
                io.out <= _io_out_T_12 @[ALU.scala 26:21]
              else :
                node _T_6 = eq(UInt<8>("hfe"), io.ALUSel) @[ALU.scala 20:20]
                when _T_6 : @[ALU.scala 20:20]
                  node _io_out_T_13 = or(io.src1, io.src2) @[ALU.scala 27:31]
                  io.out <= _io_out_T_13 @[ALU.scala 27:21]
                else :
                  node _T_7 = eq(UInt<8>("hff"), io.ALUSel) @[ALU.scala 20:20]
                  when _T_7 : @[ALU.scala 20:20]
                    node _io_out_T_14 = and(io.src1, io.src2) @[ALU.scala 28:31]
                    io.out <= _io_out_T_14 @[ALU.scala 28:21]
                  else :
                    node _T_8 = eq(UInt<14>("h20f8"), io.ALUSel) @[ALU.scala 20:20]
                    when _T_8 : @[ALU.scala 20:20]
                      node _io_out_T_15 = sub(io.src1, io.src2) @[ALU.scala 29:31]
                      node _io_out_T_16 = tail(_io_out_T_15, 1) @[ALU.scala 29:31]
                      io.out <= _io_out_T_16 @[ALU.scala 29:21]
                    else :
                      node _T_9 = eq(UInt<14>("h20fd"), io.ALUSel) @[ALU.scala 20:20]
                      when _T_9 : @[ALU.scala 20:20]
                        node _io_out_T_17 = asSInt(io.src1) @[ALU.scala 30:33]
                        node _io_out_T_18 = bits(io.src2, 4, 0) @[ALU.scala 30:50]
                        node _io_out_T_19 = dshr(_io_out_T_17, _io_out_T_18) @[ALU.scala 30:40]
                        node _io_out_T_20 = asUInt(_io_out_T_19) @[ALU.scala 30:57]
                        io.out <= _io_out_T_20 @[ALU.scala 30:21]
                      else :
                        node _T_10 = eq(UInt<9>("h1f8"), io.ALUSel) @[ALU.scala 20:20]
                        when _T_10 : @[ALU.scala 20:20]
                          node _io_out_T_21 = mul(io.src1, io.src2) @[ALU.scala 31:32]
                          io.out <= _io_out_T_21 @[ALU.scala 31:21]

  module Path_EXE :
    input clock : Clock
    input reset : Reset
    output io : { flip EXE_pc_in : UInt<32>, flip EXE_imm_in : UInt<32>, flip EXE_rs1_rdata_in : UInt<32>, flip EXE_rs2_rdata_in : UInt<32>, flip E_ASel : UInt<2>, flip E_BSel : UInt<1>, flip E_BrUn : UInt<1>, flip E_ALUSel : UInt<15>, EXE_target_pc_out : UInt<32>, EXE_alu_out : UInt<32>, EXE_rs2_rdata_out : UInt<32>, E_BrEq : UInt<1>, E_BrLT : UInt<1>, alu_src1 : UInt<32>, alu_src2 : UInt<32>, EXE_src1 : UInt<32>, EXE_src2 : UInt<32>}

    wire alu_src1 : UInt<32> @[Path_EXE.scala 32:24]
    wire alu_src2 : UInt<32> @[Path_EXE.scala 33:24]
    inst bc of BranchComp @[Path_EXE.scala 36:20]
    bc.clock <= clock
    bc.reset <= reset
    bc.io.BrUn <= io.E_BrUn @[Path_EXE.scala 37:16]
    bc.io.src1 <= io.EXE_rs1_rdata_in @[Path_EXE.scala 38:16]
    bc.io.src2 <= io.EXE_rs2_rdata_in @[Path_EXE.scala 39:16]
    io.E_BrEq <= bc.io.BrEq @[Path_EXE.scala 40:15]
    io.E_BrLT <= bc.io.BrLT @[Path_EXE.scala 41:15]
    inst alu of ALU @[Path_EXE.scala 44:21]
    alu.clock <= clock
    alu.reset <= reset
    node _alu_src1_T = eq(UInt<1>("h0"), io.E_ASel) @[Mux.scala 81:61]
    node _alu_src1_T_1 = mux(_alu_src1_T, io.EXE_rs1_rdata_in, io.EXE_rs1_rdata_in) @[Mux.scala 81:58]
    node _alu_src1_T_2 = eq(UInt<1>("h1"), io.E_ASel) @[Mux.scala 81:61]
    node _alu_src1_T_3 = mux(_alu_src1_T_2, io.EXE_pc_in, _alu_src1_T_1) @[Mux.scala 81:58]
    node _alu_src1_T_4 = eq(UInt<2>("h2"), io.E_ASel) @[Mux.scala 81:61]
    node _alu_src1_T_5 = mux(_alu_src1_T_4, UInt<32>("h0"), _alu_src1_T_3) @[Mux.scala 81:58]
    alu_src1 <= _alu_src1_T_5 @[Path_EXE.scala 45:14]
    node _alu_src2_T = eq(UInt<1>("h1"), io.E_BSel) @[Mux.scala 81:61]
    node _alu_src2_T_1 = mux(_alu_src2_T, io.EXE_imm_in, io.EXE_rs2_rdata_in) @[Mux.scala 81:58]
    alu_src2 <= _alu_src2_T_1 @[Path_EXE.scala 50:14]
    alu.io.src1 <= alu_src1 @[Path_EXE.scala 54:17]
    alu.io.src2 <= alu_src2 @[Path_EXE.scala 55:17]
    alu.io.ALUSel <= io.E_ALUSel @[Path_EXE.scala 56:19]
    io.EXE_alu_out <= alu.io.out @[Path_EXE.scala 57:20]
    io.EXE_rs2_rdata_out <= io.EXE_rs2_rdata_in @[Path_EXE.scala 60:26]
    node _io_EXE_target_pc_out_T = bits(alu.io.out, 31, 0) @[Path_EXE.scala 61:39]
    io.EXE_target_pc_out <= _io_EXE_target_pc_out_T @[Path_EXE.scala 61:26]
    io.alu_src1 <= alu_src1 @[Path_EXE.scala 62:17]
    io.alu_src2 <= alu_src2 @[Path_EXE.scala 63:17]
    io.EXE_src1 <= io.EXE_rs1_rdata_in @[Path_EXE.scala 64:17]
    io.EXE_src2 <= io.EXE_rs2_rdata_in @[Path_EXE.scala 65:17]

  module Path_MEM :
    input clock : Clock
    input reset : Reset
    output io : { flip MEM_pc_in : UInt<32>, flip MEM_alu_out_in : UInt<32>, flip MEM_DM_wdata_in : UInt<32>, MEM_pc_plus_4 : UInt<32>, MEM_alu_out : UInt<32>, MEM_ld_data : UInt<32>, Mem_Addr : UInt<32>, Mem_Write_Data : UInt<32>, flip Mem_Data : UInt<32>}

    node _io_MEM_pc_plus_4_T = add(io.MEM_pc_in, UInt<32>("h4")) @[Path_MEM.scala 24:38]
    node _io_MEM_pc_plus_4_T_1 = tail(_io_MEM_pc_plus_4_T, 1) @[Path_MEM.scala 24:38]
    io.MEM_pc_plus_4 <= _io_MEM_pc_plus_4_T_1 @[Path_MEM.scala 24:22]
    node _io_Mem_Addr_T = bits(io.MEM_alu_out_in, 31, 0) @[Path_MEM.scala 27:37]
    io.Mem_Addr <= _io_Mem_Addr_T @[Path_MEM.scala 27:17]
    io.Mem_Write_Data <= io.MEM_DM_wdata_in @[Path_MEM.scala 28:23]
    io.MEM_ld_data <= io.Mem_Data @[Path_MEM.scala 29:20]
    io.MEM_alu_out <= io.MEM_alu_out_in @[Path_MEM.scala 32:20]

  module Path_WB :
    input clock : Clock
    input reset : Reset
    output io : { flip WB_pc_plus4_in : UInt<32>, flip WB_alu_out_in : UInt<32>, flip WB_ld_data_in : UInt<32>, flip W_WBSel : UInt<2>, WB_wdata : UInt<32>}

    node _io_WB_wdata_T = eq(UInt<1>("h0"), io.W_WBSel) @[Mux.scala 81:61]
    node _io_WB_wdata_T_1 = mux(_io_WB_wdata_T, io.WB_pc_plus4_in, UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_WB_wdata_T_2 = eq(UInt<1>("h1"), io.W_WBSel) @[Mux.scala 81:61]
    node _io_WB_wdata_T_3 = mux(_io_WB_wdata_T_2, io.WB_alu_out_in, _io_WB_wdata_T_1) @[Mux.scala 81:58]
    node _io_WB_wdata_T_4 = eq(UInt<2>("h2"), io.W_WBSel) @[Mux.scala 81:61]
    node _io_WB_wdata_T_5 = mux(_io_WB_wdata_T_4, io.WB_ld_data_in, _io_WB_wdata_T_3) @[Mux.scala 81:58]
    io.WB_wdata <= _io_WB_wdata_T_5 @[Path_WB.scala 19:17]

  module Controller :
    input clock : Clock
    input reset : Reset
    output io : { IM_Mem_R : UInt<1>, IM_Mem_W : UInt<1>, IM_Length : UInt<4>, flip IM_Valid : UInt<1>, DM_Mem_R : UInt<1>, DM_Mem_W : UInt<1>, DM_Length : UInt<4>, flip DM_Valid : UInt<1>, flip E_BrEq : UInt<1>, flip E_BrLT : UInt<1>, E_Branch_taken : UInt<1>, E_En : UInt<1>, flip ID_pc : UInt<32>, flip EXE_target_pc : UInt<32>, Flush_WB_ID_DH : UInt<1>, Flush_BH : UInt<1>, Stall_WB_ID_DH : UInt<1>, Stall_MA : UInt<1>, flip IF_Inst : UInt<32>, flip ID_Inst : UInt<32>, flip EXE_Inst : UInt<32>, flip MEM_Inst : UInt<32>, flip WB_Inst : UInt<32>, PCSel : UInt<2>, D_ImmSel : UInt<3>, W_RegWEn : UInt<1>, E_BrUn : UInt<1>, E_ASel : UInt<2>, E_BSel : UInt<1>, E_ALUSel : UInt<15>, W_WBSel : UInt<2>, Hcf : UInt<1>}

    node IF_opcode = bits(io.IF_Inst, 6, 0) @[Controller.scala 67:29]
    node ID_opcode = bits(io.ID_Inst, 6, 0) @[Controller.scala 69:29]
    node EXE_opcode = bits(io.EXE_Inst, 6, 0) @[Controller.scala 71:31]
    node EXE_funct3 = bits(io.EXE_Inst, 14, 12) @[Controller.scala 72:31]
    node EXE_funct7 = bits(io.EXE_Inst, 31, 25) @[Controller.scala 73:31]
    node MEM_opcode = bits(io.MEM_Inst, 6, 0) @[Controller.scala 75:31]
    node MEM_funct3 = bits(io.MEM_Inst, 14, 12) @[Controller.scala 76:31]
    node WB_opcode = bits(io.WB_Inst, 6, 0) @[Controller.scala 78:29]
    wire E_En : UInt<1> @[Controller.scala 81:18]
    node _E_En_T = eq(EXE_opcode, UInt<7>("h63")) @[Controller.scala 82:22]
    E_En <= _E_En_T @[Controller.scala 82:8]
    wire E_Branch_taken : UInt<1> @[Controller.scala 84:28]
    node _E_Branch_taken_T = not(io.E_BrEq) @[Controller.scala 88:31]
    node _E_Branch_taken_T_1 = not(io.E_BrLT) @[Controller.scala 90:31]
    node _E_Branch_taken_T_2 = not(io.E_BrLT) @[Controller.scala 92:31]
    node _E_Branch_taken_T_3 = eq(UInt<3>("h0"), EXE_funct3) @[Mux.scala 81:61]
    node _E_Branch_taken_T_4 = mux(_E_Branch_taken_T_3, io.E_BrEq, UInt<1>("h0")) @[Mux.scala 81:58]
    node _E_Branch_taken_T_5 = eq(UInt<3>("h1"), EXE_funct3) @[Mux.scala 81:61]
    node _E_Branch_taken_T_6 = mux(_E_Branch_taken_T_5, _E_Branch_taken_T, _E_Branch_taken_T_4) @[Mux.scala 81:58]
    node _E_Branch_taken_T_7 = eq(UInt<3>("h4"), EXE_funct3) @[Mux.scala 81:61]
    node _E_Branch_taken_T_8 = mux(_E_Branch_taken_T_7, io.E_BrLT, _E_Branch_taken_T_6) @[Mux.scala 81:58]
    node _E_Branch_taken_T_9 = eq(UInt<3>("h5"), EXE_funct3) @[Mux.scala 81:61]
    node _E_Branch_taken_T_10 = mux(_E_Branch_taken_T_9, _E_Branch_taken_T_1, _E_Branch_taken_T_8) @[Mux.scala 81:58]
    node _E_Branch_taken_T_11 = eq(UInt<3>("h6"), EXE_funct3) @[Mux.scala 81:61]
    node _E_Branch_taken_T_12 = mux(_E_Branch_taken_T_11, io.E_BrLT, _E_Branch_taken_T_10) @[Mux.scala 81:58]
    node _E_Branch_taken_T_13 = eq(UInt<3>("h7"), EXE_funct3) @[Mux.scala 81:61]
    node _E_Branch_taken_T_14 = mux(_E_Branch_taken_T_13, _E_Branch_taken_T_2, _E_Branch_taken_T_12) @[Mux.scala 81:58]
    node _E_Branch_taken_T_15 = eq(UInt<7>("h63"), EXE_opcode) @[Mux.scala 81:61]
    node _E_Branch_taken_T_16 = mux(_E_Branch_taken_T_15, _E_Branch_taken_T_14, UInt<1>("h0")) @[Mux.scala 81:58]
    node _E_Branch_taken_T_17 = eq(UInt<7>("h67"), EXE_opcode) @[Mux.scala 81:61]
    node _E_Branch_taken_T_18 = mux(_E_Branch_taken_T_17, UInt<1>("h1"), _E_Branch_taken_T_16) @[Mux.scala 81:58]
    node _E_Branch_taken_T_19 = eq(UInt<7>("h6f"), EXE_opcode) @[Mux.scala 81:61]
    node _E_Branch_taken_T_20 = mux(_E_Branch_taken_T_19, UInt<1>("h1"), _E_Branch_taken_T_18) @[Mux.scala 81:58]
    E_Branch_taken <= _E_Branch_taken_T_20 @[Controller.scala 85:18]
    io.E_En <= E_En @[Controller.scala 98:11]
    io.E_Branch_taken <= E_Branch_taken @[Controller.scala 99:21]
    wire Predict_Miss : UInt<1> @[Controller.scala 102:26]
    node _Predict_Miss_T = neq(io.ID_pc, io.EXE_target_pc) @[Controller.scala 103:46]
    node _Predict_Miss_T_1 = and(E_Branch_taken, _Predict_Miss_T) @[Controller.scala 103:35]
    Predict_Miss <= _Predict_Miss_T_1 @[Controller.scala 103:16]
    when Predict_Miss : @[Controller.scala 106:21]
      io.PCSel <= UInt<2>("h2") @[Controller.scala 107:14]
    else :
      io.PCSel <= UInt<1>("h0") @[Controller.scala 109:14]
    node _io_E_BrUn_T = bits(io.EXE_Inst, 13, 13) @[Controller.scala 113:28]
    node _io_E_BrUn_T_1 = eq(_io_E_BrUn_T, UInt<1>("h1")) @[Controller.scala 113:33]
    io.E_BrUn <= _io_E_BrUn_T_1 @[Controller.scala 113:13]
    node _io_D_ImmSel_T = eq(UInt<2>("h3"), ID_opcode) @[Mux.scala 81:61]
    node _io_D_ImmSel_T_1 = mux(_io_D_ImmSel_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_D_ImmSel_T_2 = eq(UInt<6>("h23"), ID_opcode) @[Mux.scala 81:61]
    node _io_D_ImmSel_T_3 = mux(_io_D_ImmSel_T_2, UInt<2>("h2"), _io_D_ImmSel_T_1) @[Mux.scala 81:58]
    node _io_D_ImmSel_T_4 = eq(UInt<7>("h63"), ID_opcode) @[Mux.scala 81:61]
    node _io_D_ImmSel_T_5 = mux(_io_D_ImmSel_T_4, UInt<2>("h3"), _io_D_ImmSel_T_3) @[Mux.scala 81:58]
    node _io_D_ImmSel_T_6 = eq(UInt<7>("h67"), ID_opcode) @[Mux.scala 81:61]
    node _io_D_ImmSel_T_7 = mux(_io_D_ImmSel_T_6, UInt<1>("h1"), _io_D_ImmSel_T_5) @[Mux.scala 81:58]
    node _io_D_ImmSel_T_8 = eq(UInt<7>("h6f"), ID_opcode) @[Mux.scala 81:61]
    node _io_D_ImmSel_T_9 = mux(_io_D_ImmSel_T_8, UInt<3>("h4"), _io_D_ImmSel_T_7) @[Mux.scala 81:58]
    node _io_D_ImmSel_T_10 = eq(UInt<5>("h13"), ID_opcode) @[Mux.scala 81:61]
    node _io_D_ImmSel_T_11 = mux(_io_D_ImmSel_T_10, UInt<1>("h1"), _io_D_ImmSel_T_9) @[Mux.scala 81:58]
    node _io_D_ImmSel_T_12 = eq(UInt<6>("h33"), ID_opcode) @[Mux.scala 81:61]
    node _io_D_ImmSel_T_13 = mux(_io_D_ImmSel_T_12, UInt<1>("h0"), _io_D_ImmSel_T_11) @[Mux.scala 81:58]
    node _io_D_ImmSel_T_14 = eq(UInt<5>("h17"), ID_opcode) @[Mux.scala 81:61]
    node _io_D_ImmSel_T_15 = mux(_io_D_ImmSel_T_14, UInt<3>("h5"), _io_D_ImmSel_T_13) @[Mux.scala 81:58]
    node _io_D_ImmSel_T_16 = eq(UInt<6>("h37"), ID_opcode) @[Mux.scala 81:61]
    node _io_D_ImmSel_T_17 = mux(_io_D_ImmSel_T_16, UInt<3>("h5"), _io_D_ImmSel_T_15) @[Mux.scala 81:58]
    io.D_ImmSel <= _io_D_ImmSel_T_17 @[Controller.scala 116:15]
    node _io_E_ASel_T = eq(UInt<7>("h63"), EXE_opcode) @[Mux.scala 81:61]
    node _io_E_ASel_T_1 = mux(_io_E_ASel_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_E_ASel_T_2 = eq(UInt<5>("h17"), EXE_opcode) @[Mux.scala 81:61]
    node _io_E_ASel_T_3 = mux(_io_E_ASel_T_2, UInt<1>("h1"), _io_E_ASel_T_1) @[Mux.scala 81:58]
    node _io_E_ASel_T_4 = eq(UInt<6>("h37"), EXE_opcode) @[Mux.scala 81:61]
    node _io_E_ASel_T_5 = mux(_io_E_ASel_T_4, UInt<2>("h2"), _io_E_ASel_T_3) @[Mux.scala 81:58]
    node _io_E_ASel_T_6 = eq(UInt<7>("h6f"), EXE_opcode) @[Mux.scala 81:61]
    node _io_E_ASel_T_7 = mux(_io_E_ASel_T_6, UInt<1>("h1"), _io_E_ASel_T_5) @[Mux.scala 81:58]
    io.E_ASel <= _io_E_ASel_T_7 @[Controller.scala 129:13]
    node _io_E_BSel_T = eq(UInt<2>("h3"), EXE_opcode) @[Mux.scala 81:61]
    node _io_E_BSel_T_1 = mux(_io_E_BSel_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_E_BSel_T_2 = eq(UInt<6>("h23"), EXE_opcode) @[Mux.scala 81:61]
    node _io_E_BSel_T_3 = mux(_io_E_BSel_T_2, UInt<1>("h1"), _io_E_BSel_T_1) @[Mux.scala 81:58]
    node _io_E_BSel_T_4 = eq(UInt<7>("h63"), EXE_opcode) @[Mux.scala 81:61]
    node _io_E_BSel_T_5 = mux(_io_E_BSel_T_4, UInt<1>("h1"), _io_E_BSel_T_3) @[Mux.scala 81:58]
    node _io_E_BSel_T_6 = eq(UInt<7>("h6f"), EXE_opcode) @[Mux.scala 81:61]
    node _io_E_BSel_T_7 = mux(_io_E_BSel_T_6, UInt<1>("h1"), _io_E_BSel_T_5) @[Mux.scala 81:58]
    node _io_E_BSel_T_8 = eq(UInt<7>("h67"), EXE_opcode) @[Mux.scala 81:61]
    node _io_E_BSel_T_9 = mux(_io_E_BSel_T_8, UInt<1>("h1"), _io_E_BSel_T_7) @[Mux.scala 81:58]
    node _io_E_BSel_T_10 = eq(UInt<5>("h13"), EXE_opcode) @[Mux.scala 81:61]
    node _io_E_BSel_T_11 = mux(_io_E_BSel_T_10, UInt<1>("h1"), _io_E_BSel_T_9) @[Mux.scala 81:58]
    node _io_E_BSel_T_12 = eq(UInt<5>("h17"), EXE_opcode) @[Mux.scala 81:61]
    node _io_E_BSel_T_13 = mux(_io_E_BSel_T_12, UInt<1>("h1"), _io_E_BSel_T_11) @[Mux.scala 81:58]
    node _io_E_BSel_T_14 = eq(UInt<6>("h37"), EXE_opcode) @[Mux.scala 81:61]
    node _io_E_BSel_T_15 = mux(_io_E_BSel_T_14, UInt<1>("h1"), _io_E_BSel_T_13) @[Mux.scala 81:58]
    node _io_E_BSel_T_16 = eq(UInt<2>("h3"), EXE_opcode) @[Mux.scala 81:61]
    node _io_E_BSel_T_17 = mux(_io_E_BSel_T_16, UInt<1>("h1"), _io_E_BSel_T_15) @[Mux.scala 81:58]
    io.E_BSel <= _io_E_BSel_T_17 @[Controller.scala 136:13]
    node io_E_ALUSel_hi = cat(UInt<7>("h0"), UInt<5>("h1f")) @[Cat.scala 33:92]
    node _io_E_ALUSel_T = cat(io_E_ALUSel_hi, UInt<3>("h0")) @[Cat.scala 33:92]
    node io_E_ALUSel_hi_1 = cat(EXE_funct7, UInt<5>("h1f")) @[Cat.scala 33:92]
    node _io_E_ALUSel_T_1 = cat(io_E_ALUSel_hi_1, EXE_funct3) @[Cat.scala 33:92]
    node io_E_ALUSel_hi_2 = cat(UInt<7>("h0"), UInt<5>("h1f")) @[Cat.scala 33:92]
    node _io_E_ALUSel_T_2 = cat(io_E_ALUSel_hi_2, EXE_funct3) @[Cat.scala 33:92]
    node io_E_ALUSel_hi_3 = cat(EXE_funct7, UInt<5>("h1f")) @[Cat.scala 33:92]
    node _io_E_ALUSel_T_3 = cat(io_E_ALUSel_hi_3, EXE_funct3) @[Cat.scala 33:92]
    node _io_E_ALUSel_T_4 = eq(UInt<3>("h5"), EXE_funct3) @[Mux.scala 81:61]
    node _io_E_ALUSel_T_5 = mux(_io_E_ALUSel_T_4, _io_E_ALUSel_T_3, _io_E_ALUSel_T_2) @[Mux.scala 81:58]
    node _io_E_ALUSel_T_6 = eq(UInt<6>("h33"), EXE_opcode) @[Mux.scala 81:61]
    node _io_E_ALUSel_T_7 = mux(_io_E_ALUSel_T_6, _io_E_ALUSel_T_1, _io_E_ALUSel_T) @[Mux.scala 81:58]
    node _io_E_ALUSel_T_8 = eq(UInt<5>("h13"), EXE_opcode) @[Mux.scala 81:61]
    node _io_E_ALUSel_T_9 = mux(_io_E_ALUSel_T_8, _io_E_ALUSel_T_5, _io_E_ALUSel_T_7) @[Mux.scala 81:58]
    io.E_ALUSel <= _io_E_ALUSel_T_9 @[Controller.scala 148:15]
    node _io_DM_Mem_R_T = eq(MEM_opcode, UInt<2>("h3")) @[Controller.scala 156:29]
    io.DM_Mem_R <= _io_DM_Mem_R_T @[Controller.scala 156:15]
    node _io_DM_Mem_W_T = eq(MEM_opcode, UInt<6>("h23")) @[Controller.scala 157:29]
    io.DM_Mem_W <= _io_DM_Mem_W_T @[Controller.scala 157:15]
    node _io_DM_Length_T = cat(UInt<1>("h0"), MEM_funct3) @[Cat.scala 33:92]
    io.DM_Length <= _io_DM_Length_T @[Controller.scala 158:16]
    io.IM_Mem_R <= UInt<1>("h1") @[Controller.scala 161:15]
    io.IM_Mem_W <= UInt<1>("h0") @[Controller.scala 162:15]
    io.IM_Length <= UInt<2>("h2") @[Controller.scala 163:16]
    node _io_W_RegWEn_T = eq(UInt<6>("h33"), WB_opcode) @[Mux.scala 81:61]
    node _io_W_RegWEn_T_1 = mux(_io_W_RegWEn_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_W_RegWEn_T_2 = eq(UInt<5>("h13"), WB_opcode) @[Mux.scala 81:61]
    node _io_W_RegWEn_T_3 = mux(_io_W_RegWEn_T_2, UInt<1>("h1"), _io_W_RegWEn_T_1) @[Mux.scala 81:58]
    node _io_W_RegWEn_T_4 = eq(UInt<2>("h3"), WB_opcode) @[Mux.scala 81:61]
    node _io_W_RegWEn_T_5 = mux(_io_W_RegWEn_T_4, UInt<1>("h1"), _io_W_RegWEn_T_3) @[Mux.scala 81:58]
    node _io_W_RegWEn_T_6 = eq(UInt<6>("h37"), WB_opcode) @[Mux.scala 81:61]
    node _io_W_RegWEn_T_7 = mux(_io_W_RegWEn_T_6, UInt<1>("h1"), _io_W_RegWEn_T_5) @[Mux.scala 81:58]
    node _io_W_RegWEn_T_8 = eq(UInt<5>("h17"), WB_opcode) @[Mux.scala 81:61]
    node _io_W_RegWEn_T_9 = mux(_io_W_RegWEn_T_8, UInt<1>("h1"), _io_W_RegWEn_T_7) @[Mux.scala 81:58]
    node _io_W_RegWEn_T_10 = eq(UInt<7>("h6f"), WB_opcode) @[Mux.scala 81:61]
    node _io_W_RegWEn_T_11 = mux(_io_W_RegWEn_T_10, UInt<1>("h1"), _io_W_RegWEn_T_9) @[Mux.scala 81:58]
    node _io_W_RegWEn_T_12 = eq(UInt<7>("h67"), WB_opcode) @[Mux.scala 81:61]
    node _io_W_RegWEn_T_13 = mux(_io_W_RegWEn_T_12, UInt<1>("h1"), _io_W_RegWEn_T_11) @[Mux.scala 81:58]
    io.W_RegWEn <= _io_W_RegWEn_T_13 @[Controller.scala 166:15]
    node _io_W_WBSel_T = eq(UInt<7>("h6f"), WB_opcode) @[Mux.scala 81:61]
    node _io_W_WBSel_T_1 = mux(_io_W_WBSel_T, UInt<1>("h0"), UInt<1>("h1")) @[Mux.scala 81:58]
    node _io_W_WBSel_T_2 = eq(UInt<7>("h67"), WB_opcode) @[Mux.scala 81:61]
    node _io_W_WBSel_T_3 = mux(_io_W_WBSel_T_2, UInt<1>("h0"), _io_W_WBSel_T_1) @[Mux.scala 81:58]
    node _io_W_WBSel_T_4 = eq(UInt<6>("h33"), WB_opcode) @[Mux.scala 81:61]
    node _io_W_WBSel_T_5 = mux(_io_W_WBSel_T_4, UInt<1>("h1"), _io_W_WBSel_T_3) @[Mux.scala 81:58]
    node _io_W_WBSel_T_6 = eq(UInt<5>("h13"), WB_opcode) @[Mux.scala 81:61]
    node _io_W_WBSel_T_7 = mux(_io_W_WBSel_T_6, UInt<1>("h1"), _io_W_WBSel_T_5) @[Mux.scala 81:58]
    node _io_W_WBSel_T_8 = eq(UInt<6>("h37"), WB_opcode) @[Mux.scala 81:61]
    node _io_W_WBSel_T_9 = mux(_io_W_WBSel_T_8, UInt<1>("h1"), _io_W_WBSel_T_7) @[Mux.scala 81:58]
    node _io_W_WBSel_T_10 = eq(UInt<5>("h17"), WB_opcode) @[Mux.scala 81:61]
    node _io_W_WBSel_T_11 = mux(_io_W_WBSel_T_10, UInt<1>("h1"), _io_W_WBSel_T_9) @[Mux.scala 81:58]
    node _io_W_WBSel_T_12 = eq(UInt<2>("h3"), WB_opcode) @[Mux.scala 81:61]
    node _io_W_WBSel_T_13 = mux(_io_W_WBSel_T_12, UInt<2>("h2"), _io_W_WBSel_T_11) @[Mux.scala 81:58]
    io.W_WBSel <= _io_W_WBSel_T_13 @[Controller.scala 177:14]
    node _io_Hcf_T = eq(IF_opcode, UInt<4>("hb")) @[Controller.scala 188:24]
    io.Hcf <= _io_Hcf_T @[Controller.scala 188:10]
    io.Stall_MA <= UInt<1>("h0") @[Controller.scala 191:15]
    wire is_D_use_rs1 : UInt<1> @[Controller.scala 196:26]
    wire is_D_use_rs2 : UInt<1> @[Controller.scala 197:26]
    node _is_D_use_rs1_T = eq(UInt<6>("h33"), ID_opcode) @[Mux.scala 81:61]
    node _is_D_use_rs1_T_1 = mux(_is_D_use_rs1_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _is_D_use_rs1_T_2 = eq(UInt<5>("h13"), ID_opcode) @[Mux.scala 81:61]
    node _is_D_use_rs1_T_3 = mux(_is_D_use_rs1_T_2, UInt<1>("h1"), _is_D_use_rs1_T_1) @[Mux.scala 81:58]
    node _is_D_use_rs1_T_4 = eq(UInt<7>("h63"), ID_opcode) @[Mux.scala 81:61]
    node _is_D_use_rs1_T_5 = mux(_is_D_use_rs1_T_4, UInt<1>("h1"), _is_D_use_rs1_T_3) @[Mux.scala 81:58]
    node _is_D_use_rs1_T_6 = eq(UInt<7>("h67"), ID_opcode) @[Mux.scala 81:61]
    node _is_D_use_rs1_T_7 = mux(_is_D_use_rs1_T_6, UInt<1>("h1"), _is_D_use_rs1_T_5) @[Mux.scala 81:58]
    node _is_D_use_rs1_T_8 = eq(UInt<2>("h3"), ID_opcode) @[Mux.scala 81:61]
    node _is_D_use_rs1_T_9 = mux(_is_D_use_rs1_T_8, UInt<1>("h1"), _is_D_use_rs1_T_7) @[Mux.scala 81:58]
    node _is_D_use_rs1_T_10 = eq(UInt<6>("h23"), ID_opcode) @[Mux.scala 81:61]
    node _is_D_use_rs1_T_11 = mux(_is_D_use_rs1_T_10, UInt<1>("h1"), _is_D_use_rs1_T_9) @[Mux.scala 81:58]
    is_D_use_rs1 <= _is_D_use_rs1_T_11 @[Controller.scala 198:16]
    node _is_D_use_rs2_T = eq(UInt<6>("h33"), ID_opcode) @[Mux.scala 81:61]
    node _is_D_use_rs2_T_1 = mux(_is_D_use_rs2_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _is_D_use_rs2_T_2 = eq(UInt<7>("h63"), ID_opcode) @[Mux.scala 81:61]
    node _is_D_use_rs2_T_3 = mux(_is_D_use_rs2_T_2, UInt<1>("h1"), _is_D_use_rs2_T_1) @[Mux.scala 81:58]
    node _is_D_use_rs2_T_4 = eq(UInt<6>("h23"), ID_opcode) @[Mux.scala 81:61]
    node _is_D_use_rs2_T_5 = mux(_is_D_use_rs2_T_4, UInt<1>("h1"), _is_D_use_rs2_T_3) @[Mux.scala 81:58]
    is_D_use_rs2 <= _is_D_use_rs2_T_5 @[Controller.scala 206:16]
    wire is_E_use_rd : UInt<1> @[Controller.scala 213:25]
    wire is_M_use_rd : UInt<1> @[Controller.scala 214:25]
    wire is_W_use_rd : UInt<1> @[Controller.scala 215:25]
    node _is_E_use_rd_T = eq(UInt<6>("h33"), EXE_opcode) @[Mux.scala 81:61]
    node _is_E_use_rd_T_1 = mux(_is_E_use_rd_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _is_E_use_rd_T_2 = eq(UInt<5>("h13"), EXE_opcode) @[Mux.scala 81:61]
    node _is_E_use_rd_T_3 = mux(_is_E_use_rd_T_2, UInt<1>("h1"), _is_E_use_rd_T_1) @[Mux.scala 81:58]
    node _is_E_use_rd_T_4 = eq(UInt<5>("h17"), EXE_opcode) @[Mux.scala 81:61]
    node _is_E_use_rd_T_5 = mux(_is_E_use_rd_T_4, UInt<1>("h1"), _is_E_use_rd_T_3) @[Mux.scala 81:58]
    node _is_E_use_rd_T_6 = eq(UInt<6>("h37"), EXE_opcode) @[Mux.scala 81:61]
    node _is_E_use_rd_T_7 = mux(_is_E_use_rd_T_6, UInt<1>("h1"), _is_E_use_rd_T_5) @[Mux.scala 81:58]
    node _is_E_use_rd_T_8 = eq(UInt<7>("h6f"), EXE_opcode) @[Mux.scala 81:61]
    node _is_E_use_rd_T_9 = mux(_is_E_use_rd_T_8, UInt<1>("h1"), _is_E_use_rd_T_7) @[Mux.scala 81:58]
    node _is_E_use_rd_T_10 = eq(UInt<7>("h67"), EXE_opcode) @[Mux.scala 81:61]
    node _is_E_use_rd_T_11 = mux(_is_E_use_rd_T_10, UInt<1>("h1"), _is_E_use_rd_T_9) @[Mux.scala 81:58]
    node _is_E_use_rd_T_12 = eq(UInt<2>("h3"), EXE_opcode) @[Mux.scala 81:61]
    node _is_E_use_rd_T_13 = mux(_is_E_use_rd_T_12, UInt<1>("h1"), _is_E_use_rd_T_11) @[Mux.scala 81:58]
    is_E_use_rd <= _is_E_use_rd_T_13 @[Controller.scala 217:15]
    node _is_M_use_rd_T = eq(UInt<6>("h33"), MEM_opcode) @[Mux.scala 81:61]
    node _is_M_use_rd_T_1 = mux(_is_M_use_rd_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _is_M_use_rd_T_2 = eq(UInt<5>("h13"), MEM_opcode) @[Mux.scala 81:61]
    node _is_M_use_rd_T_3 = mux(_is_M_use_rd_T_2, UInt<1>("h1"), _is_M_use_rd_T_1) @[Mux.scala 81:58]
    node _is_M_use_rd_T_4 = eq(UInt<5>("h17"), MEM_opcode) @[Mux.scala 81:61]
    node _is_M_use_rd_T_5 = mux(_is_M_use_rd_T_4, UInt<1>("h1"), _is_M_use_rd_T_3) @[Mux.scala 81:58]
    node _is_M_use_rd_T_6 = eq(UInt<6>("h37"), MEM_opcode) @[Mux.scala 81:61]
    node _is_M_use_rd_T_7 = mux(_is_M_use_rd_T_6, UInt<1>("h1"), _is_M_use_rd_T_5) @[Mux.scala 81:58]
    node _is_M_use_rd_T_8 = eq(UInt<7>("h6f"), MEM_opcode) @[Mux.scala 81:61]
    node _is_M_use_rd_T_9 = mux(_is_M_use_rd_T_8, UInt<1>("h1"), _is_M_use_rd_T_7) @[Mux.scala 81:58]
    node _is_M_use_rd_T_10 = eq(UInt<7>("h67"), MEM_opcode) @[Mux.scala 81:61]
    node _is_M_use_rd_T_11 = mux(_is_M_use_rd_T_10, UInt<1>("h1"), _is_M_use_rd_T_9) @[Mux.scala 81:58]
    node _is_M_use_rd_T_12 = eq(UInt<2>("h3"), MEM_opcode) @[Mux.scala 81:61]
    node _is_M_use_rd_T_13 = mux(_is_M_use_rd_T_12, UInt<1>("h1"), _is_M_use_rd_T_11) @[Mux.scala 81:58]
    is_M_use_rd <= _is_M_use_rd_T_13 @[Controller.scala 227:15]
    node _is_W_use_rd_T = eq(UInt<6>("h33"), WB_opcode) @[Mux.scala 81:61]
    node _is_W_use_rd_T_1 = mux(_is_W_use_rd_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _is_W_use_rd_T_2 = eq(UInt<5>("h13"), WB_opcode) @[Mux.scala 81:61]
    node _is_W_use_rd_T_3 = mux(_is_W_use_rd_T_2, UInt<1>("h1"), _is_W_use_rd_T_1) @[Mux.scala 81:58]
    node _is_W_use_rd_T_4 = eq(UInt<5>("h17"), WB_opcode) @[Mux.scala 81:61]
    node _is_W_use_rd_T_5 = mux(_is_W_use_rd_T_4, UInt<1>("h1"), _is_W_use_rd_T_3) @[Mux.scala 81:58]
    node _is_W_use_rd_T_6 = eq(UInt<6>("h37"), WB_opcode) @[Mux.scala 81:61]
    node _is_W_use_rd_T_7 = mux(_is_W_use_rd_T_6, UInt<1>("h1"), _is_W_use_rd_T_5) @[Mux.scala 81:58]
    node _is_W_use_rd_T_8 = eq(UInt<7>("h6f"), WB_opcode) @[Mux.scala 81:61]
    node _is_W_use_rd_T_9 = mux(_is_W_use_rd_T_8, UInt<1>("h1"), _is_W_use_rd_T_7) @[Mux.scala 81:58]
    node _is_W_use_rd_T_10 = eq(UInt<7>("h67"), WB_opcode) @[Mux.scala 81:61]
    node _is_W_use_rd_T_11 = mux(_is_W_use_rd_T_10, UInt<1>("h1"), _is_W_use_rd_T_9) @[Mux.scala 81:58]
    node _is_W_use_rd_T_12 = eq(UInt<2>("h3"), WB_opcode) @[Mux.scala 81:61]
    node _is_W_use_rd_T_13 = mux(_is_W_use_rd_T_12, UInt<1>("h1"), _is_W_use_rd_T_11) @[Mux.scala 81:58]
    is_W_use_rd <= _is_W_use_rd_T_13 @[Controller.scala 237:15]
    wire is_D_rs1_E_rd_overlap : UInt<1> @[Controller.scala 249:35]
    wire is_D_rs2_E_rd_overlap : UInt<1> @[Controller.scala 250:35]
    wire is_D_rs1_M_rd_overlap : UInt<1> @[Controller.scala 252:35]
    wire is_D_rs2_M_rd_overlap : UInt<1> @[Controller.scala 253:35]
    wire is_D_rs1_W_rd_overlap : UInt<1> @[Controller.scala 255:35]
    wire is_D_rs2_W_rd_overlap : UInt<1> @[Controller.scala 256:35]
    node ID_rs1 = bits(io.ID_Inst, 19, 15) @[Controller.scala 258:26]
    node ID_rs2 = bits(io.ID_Inst, 24, 20) @[Controller.scala 259:26]
    node EXE_rd = bits(io.EXE_Inst, 11, 7) @[Controller.scala 261:27]
    node MEM_rd = bits(io.MEM_Inst, 11, 7) @[Controller.scala 262:27]
    node WB_rd = bits(io.WB_Inst, 11, 7) @[Controller.scala 263:25]
    node _is_D_rs1_E_rd_overlap_T = and(is_D_use_rs1, is_E_use_rd) @[Controller.scala 265:41]
    node _is_D_rs1_E_rd_overlap_T_1 = eq(ID_rs1, EXE_rd) @[Controller.scala 265:67]
    node _is_D_rs1_E_rd_overlap_T_2 = and(_is_D_rs1_E_rd_overlap_T, _is_D_rs1_E_rd_overlap_T_1) @[Controller.scala 265:56]
    node _is_D_rs1_E_rd_overlap_T_3 = neq(EXE_rd, UInt<5>("h0")) @[Controller.scala 265:90]
    node _is_D_rs1_E_rd_overlap_T_4 = and(_is_D_rs1_E_rd_overlap_T_2, _is_D_rs1_E_rd_overlap_T_3) @[Controller.scala 265:79]
    is_D_rs1_E_rd_overlap <= _is_D_rs1_E_rd_overlap_T_4 @[Controller.scala 265:25]
    node _is_D_rs2_E_rd_overlap_T = and(is_D_use_rs2, is_E_use_rd) @[Controller.scala 266:41]
    node _is_D_rs2_E_rd_overlap_T_1 = eq(ID_rs2, EXE_rd) @[Controller.scala 266:67]
    node _is_D_rs2_E_rd_overlap_T_2 = and(_is_D_rs2_E_rd_overlap_T, _is_D_rs2_E_rd_overlap_T_1) @[Controller.scala 266:56]
    node _is_D_rs2_E_rd_overlap_T_3 = neq(EXE_rd, UInt<5>("h0")) @[Controller.scala 266:90]
    node _is_D_rs2_E_rd_overlap_T_4 = and(_is_D_rs2_E_rd_overlap_T_2, _is_D_rs2_E_rd_overlap_T_3) @[Controller.scala 266:79]
    is_D_rs2_E_rd_overlap <= _is_D_rs2_E_rd_overlap_T_4 @[Controller.scala 266:25]
    node _is_D_rs1_M_rd_overlap_T = and(is_D_use_rs1, is_M_use_rd) @[Controller.scala 268:41]
    node _is_D_rs1_M_rd_overlap_T_1 = eq(ID_rs1, MEM_rd) @[Controller.scala 268:67]
    node _is_D_rs1_M_rd_overlap_T_2 = and(_is_D_rs1_M_rd_overlap_T, _is_D_rs1_M_rd_overlap_T_1) @[Controller.scala 268:56]
    node _is_D_rs1_M_rd_overlap_T_3 = neq(MEM_rd, UInt<5>("h0")) @[Controller.scala 268:90]
    node _is_D_rs1_M_rd_overlap_T_4 = and(_is_D_rs1_M_rd_overlap_T_2, _is_D_rs1_M_rd_overlap_T_3) @[Controller.scala 268:79]
    is_D_rs1_M_rd_overlap <= _is_D_rs1_M_rd_overlap_T_4 @[Controller.scala 268:25]
    node _is_D_rs2_M_rd_overlap_T = and(is_D_use_rs2, is_M_use_rd) @[Controller.scala 269:41]
    node _is_D_rs2_M_rd_overlap_T_1 = eq(ID_rs2, MEM_rd) @[Controller.scala 269:67]
    node _is_D_rs2_M_rd_overlap_T_2 = and(_is_D_rs2_M_rd_overlap_T, _is_D_rs2_M_rd_overlap_T_1) @[Controller.scala 269:56]
    node _is_D_rs2_M_rd_overlap_T_3 = neq(MEM_rd, UInt<5>("h0")) @[Controller.scala 269:90]
    node _is_D_rs2_M_rd_overlap_T_4 = and(_is_D_rs2_M_rd_overlap_T_2, _is_D_rs2_M_rd_overlap_T_3) @[Controller.scala 269:79]
    is_D_rs2_M_rd_overlap <= _is_D_rs2_M_rd_overlap_T_4 @[Controller.scala 269:25]
    node _is_D_rs1_W_rd_overlap_T = and(is_D_use_rs1, is_W_use_rd) @[Controller.scala 271:41]
    node _is_D_rs1_W_rd_overlap_T_1 = eq(ID_rs1, WB_rd) @[Controller.scala 271:67]
    node _is_D_rs1_W_rd_overlap_T_2 = and(_is_D_rs1_W_rd_overlap_T, _is_D_rs1_W_rd_overlap_T_1) @[Controller.scala 271:56]
    node _is_D_rs1_W_rd_overlap_T_3 = neq(WB_rd, UInt<5>("h0")) @[Controller.scala 271:88]
    node _is_D_rs1_W_rd_overlap_T_4 = and(_is_D_rs1_W_rd_overlap_T_2, _is_D_rs1_W_rd_overlap_T_3) @[Controller.scala 271:78]
    is_D_rs1_W_rd_overlap <= _is_D_rs1_W_rd_overlap_T_4 @[Controller.scala 271:25]
    node _is_D_rs2_W_rd_overlap_T = and(is_D_use_rs2, is_W_use_rd) @[Controller.scala 272:41]
    node _is_D_rs2_W_rd_overlap_T_1 = eq(ID_rs2, WB_rd) @[Controller.scala 272:67]
    node _is_D_rs2_W_rd_overlap_T_2 = and(_is_D_rs2_W_rd_overlap_T, _is_D_rs2_W_rd_overlap_T_1) @[Controller.scala 272:56]
    node _is_D_rs2_W_rd_overlap_T_3 = neq(WB_rd, UInt<5>("h0")) @[Controller.scala 272:88]
    node _is_D_rs2_W_rd_overlap_T_4 = and(_is_D_rs2_W_rd_overlap_T_2, _is_D_rs2_W_rd_overlap_T_3) @[Controller.scala 272:78]
    is_D_rs2_W_rd_overlap <= _is_D_rs2_W_rd_overlap_T_4 @[Controller.scala 272:25]
    node _io_Stall_WB_ID_DH_T = or(is_D_rs1_E_rd_overlap, is_D_rs2_E_rd_overlap) @[Controller.scala 276:47]
    node _io_Stall_WB_ID_DH_T_1 = or(_io_Stall_WB_ID_DH_T, is_D_rs1_M_rd_overlap) @[Controller.scala 276:72]
    node _io_Stall_WB_ID_DH_T_2 = or(_io_Stall_WB_ID_DH_T_1, is_D_rs2_M_rd_overlap) @[Controller.scala 277:25]
    node _io_Stall_WB_ID_DH_T_3 = or(_io_Stall_WB_ID_DH_T_2, is_D_rs1_W_rd_overlap) @[Controller.scala 277:50]
    node _io_Stall_WB_ID_DH_T_4 = or(_io_Stall_WB_ID_DH_T_3, is_D_rs2_W_rd_overlap) @[Controller.scala 277:75]
    io.Stall_WB_ID_DH <= _io_Stall_WB_ID_DH_T_4 @[Controller.scala 276:21]
    io.Flush_WB_ID_DH <= io.Stall_WB_ID_DH @[Controller.scala 278:21]
    io.Flush_BH <= Predict_Miss @[Controller.scala 282:15]

  module PipelinedCPU :
    input clock : Clock
    input reset : Reset
    output io : { InstMem : { Mem_R : UInt<1>, Mem_W : UInt<1>, Length : UInt<4>, flip Valid : UInt<1>, raddr : UInt<15>, flip rdata : UInt<32>, waddr : UInt<15>, wdata : UInt<32>}, DataMem : { Mem_R : UInt<1>, Mem_W : UInt<1>, Length : UInt<4>, flip Valid : UInt<1>, raddr : UInt<32>, flip rdata : UInt<32>, waddr : UInt<32>, wdata : UInt<32>}, master : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, regs : UInt<32>[32], Hcf : UInt<1>, flip DMA_Hcf : UInt<1>, E_Branch_taken : UInt<1>, Flush : UInt<1>, Stall_MA : UInt<1>, Stall_DH : UInt<1>, IF_PC : UInt<32>, ID_PC : UInt<32>, EXE_PC : UInt<32>, MEM_PC : UInt<32>, WB_PC : UInt<32>, EXE_src1 : UInt<32>, EXE_src2 : UInt<32>, ALU_src1 : UInt<32>, ALU_src2 : UInt<32>, EXE_alu_out : UInt<32>, WB_rd : UInt<5>, WB_wdata : UInt<32>, EXE_Jump : UInt<1>, EXE_Branch : UInt<1>}

    inst stage_IF of Reg_IF @[PiplinedCPU.scala 52:26]
    stage_IF.clock <= clock
    stage_IF.reset <= reset
    inst stage_ID of Reg_ID @[PiplinedCPU.scala 53:26]
    stage_ID.clock <= clock
    stage_ID.reset <= reset
    inst stage_EXE of Reg_EXE @[PiplinedCPU.scala 54:27]
    stage_EXE.clock <= clock
    stage_EXE.reset <= reset
    inst stage_MEM of Reg_MEM @[PiplinedCPU.scala 55:27]
    stage_MEM.clock <= clock
    stage_MEM.reset <= reset
    inst stage_WB of Reg_WB @[PiplinedCPU.scala 56:26]
    stage_WB.clock <= clock
    stage_WB.reset <= reset
    inst datapath_IF of Path_IF @[PiplinedCPU.scala 59:29]
    datapath_IF.clock <= clock
    datapath_IF.reset <= reset
    inst datapath_ID of Path_ID @[PiplinedCPU.scala 60:29]
    datapath_ID.clock <= clock
    datapath_ID.reset <= reset
    inst datapath_EXE of Path_EXE @[PiplinedCPU.scala 61:30]
    datapath_EXE.clock <= clock
    datapath_EXE.reset <= reset
    inst datapath_MEM of Path_MEM @[PiplinedCPU.scala 62:30]
    datapath_MEM.clock <= clock
    datapath_MEM.reset <= reset
    inst datapath_WB of Path_WB @[PiplinedCPU.scala 63:29]
    datapath_WB.clock <= clock
    datapath_WB.reset <= reset
    inst contorller of Controller @[PiplinedCPU.scala 66:28]
    contorller.clock <= clock
    contorller.reset <= reset
    node w_choose_byte = and(io.DataMem.waddr, UInt<32>("h3")) @[PiplinedCPU.scala 69:42]
    node w_choose_half = and(io.DataMem.waddr, UInt<32>("h2")) @[PiplinedCPU.scala 70:42]
    node _io_master_w_bits_strb_T = eq(UInt<1>("h0"), w_choose_byte) @[Mux.scala 81:61]
    node _io_master_w_bits_strb_T_1 = mux(_io_master_w_bits_strb_T, UInt<1>("h1"), UInt<1>("h1")) @[Mux.scala 81:58]
    node _io_master_w_bits_strb_T_2 = eq(UInt<1>("h1"), w_choose_byte) @[Mux.scala 81:61]
    node _io_master_w_bits_strb_T_3 = mux(_io_master_w_bits_strb_T_2, UInt<2>("h2"), _io_master_w_bits_strb_T_1) @[Mux.scala 81:58]
    node _io_master_w_bits_strb_T_4 = eq(UInt<2>("h2"), w_choose_byte) @[Mux.scala 81:61]
    node _io_master_w_bits_strb_T_5 = mux(_io_master_w_bits_strb_T_4, UInt<3>("h4"), _io_master_w_bits_strb_T_3) @[Mux.scala 81:58]
    node _io_master_w_bits_strb_T_6 = eq(UInt<2>("h3"), w_choose_byte) @[Mux.scala 81:61]
    node _io_master_w_bits_strb_T_7 = mux(_io_master_w_bits_strb_T_6, UInt<4>("h8"), _io_master_w_bits_strb_T_5) @[Mux.scala 81:58]
    node _io_master_w_bits_strb_T_8 = eq(UInt<1>("h0"), w_choose_half) @[Mux.scala 81:61]
    node _io_master_w_bits_strb_T_9 = mux(_io_master_w_bits_strb_T_8, UInt<2>("h3"), UInt<2>("h3")) @[Mux.scala 81:58]
    node _io_master_w_bits_strb_T_10 = eq(UInt<1>("h1"), w_choose_half) @[Mux.scala 81:61]
    node _io_master_w_bits_strb_T_11 = mux(_io_master_w_bits_strb_T_10, UInt<4>("hc"), _io_master_w_bits_strb_T_9) @[Mux.scala 81:58]
    node _io_master_w_bits_strb_T_12 = eq(UInt<1>("h0"), io.DataMem.Length) @[Mux.scala 81:61]
    node _io_master_w_bits_strb_T_13 = mux(_io_master_w_bits_strb_T_12, _io_master_w_bits_strb_T_7, UInt<4>("hf")) @[Mux.scala 81:58]
    node _io_master_w_bits_strb_T_14 = eq(UInt<1>("h1"), io.DataMem.Length) @[Mux.scala 81:61]
    node _io_master_w_bits_strb_T_15 = mux(_io_master_w_bits_strb_T_14, _io_master_w_bits_strb_T_11, _io_master_w_bits_strb_T_13) @[Mux.scala 81:58]
    node _io_master_w_bits_strb_T_16 = eq(UInt<2>("h2"), io.DataMem.Length) @[Mux.scala 81:61]
    node _io_master_w_bits_strb_T_17 = mux(_io_master_w_bits_strb_T_16, UInt<4>("hf"), _io_master_w_bits_strb_T_15) @[Mux.scala 81:58]
    io.master.w.bits.strb <= _io_master_w_bits_strb_T_17 @[PiplinedCPU.scala 72:27]
    wire write_shift_bit : UInt<5> @[PiplinedCPU.scala 86:31]
    node _write_shift_bit_T = eq(UInt<1>("h0"), w_choose_byte) @[Mux.scala 81:61]
    node _write_shift_bit_T_1 = mux(_write_shift_bit_T, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _write_shift_bit_T_2 = eq(UInt<1>("h1"), w_choose_byte) @[Mux.scala 81:61]
    node _write_shift_bit_T_3 = mux(_write_shift_bit_T_2, UInt<4>("h8"), _write_shift_bit_T_1) @[Mux.scala 81:58]
    node _write_shift_bit_T_4 = eq(UInt<2>("h2"), w_choose_byte) @[Mux.scala 81:61]
    node _write_shift_bit_T_5 = mux(_write_shift_bit_T_4, UInt<5>("h10"), _write_shift_bit_T_3) @[Mux.scala 81:58]
    node _write_shift_bit_T_6 = eq(UInt<2>("h3"), w_choose_byte) @[Mux.scala 81:61]
    node _write_shift_bit_T_7 = mux(_write_shift_bit_T_6, UInt<5>("h18"), _write_shift_bit_T_5) @[Mux.scala 81:58]
    node _write_shift_bit_T_8 = eq(UInt<1>("h0"), w_choose_half) @[Mux.scala 81:61]
    node _write_shift_bit_T_9 = mux(_write_shift_bit_T_8, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _write_shift_bit_T_10 = eq(UInt<1>("h1"), w_choose_half) @[Mux.scala 81:61]
    node _write_shift_bit_T_11 = mux(_write_shift_bit_T_10, UInt<5>("h10"), _write_shift_bit_T_9) @[Mux.scala 81:58]
    node _write_shift_bit_T_12 = eq(UInt<1>("h0"), io.DataMem.Length) @[Mux.scala 81:61]
    node _write_shift_bit_T_13 = mux(_write_shift_bit_T_12, _write_shift_bit_T_7, UInt<1>("h0")) @[Mux.scala 81:58]
    node _write_shift_bit_T_14 = eq(UInt<1>("h1"), io.DataMem.Length) @[Mux.scala 81:61]
    node _write_shift_bit_T_15 = mux(_write_shift_bit_T_14, _write_shift_bit_T_11, _write_shift_bit_T_13) @[Mux.scala 81:58]
    node _write_shift_bit_T_16 = eq(UInt<2>("h2"), io.DataMem.Length) @[Mux.scala 81:61]
    node _write_shift_bit_T_17 = mux(_write_shift_bit_T_16, UInt<1>("h0"), _write_shift_bit_T_15) @[Mux.scala 81:58]
    write_shift_bit <= _write_shift_bit_T_17 @[PiplinedCPU.scala 87:21]
    node r_choose_byte = and(io.DataMem.raddr, UInt<32>("h3")) @[PiplinedCPU.scala 100:42]
    node r_choose_half = and(io.DataMem.raddr, UInt<32>("h2")) @[PiplinedCPU.scala 101:42]
    wire r_mask : UInt<32> @[PiplinedCPU.scala 103:22]
    node _r_mask_T = eq(UInt<1>("h0"), r_choose_byte) @[Mux.scala 81:61]
    node _r_mask_T_1 = mux(_r_mask_T, UInt<32>("hff"), UInt<8>("hff")) @[Mux.scala 81:58]
    node _r_mask_T_2 = eq(UInt<1>("h1"), r_choose_byte) @[Mux.scala 81:61]
    node _r_mask_T_3 = mux(_r_mask_T_2, UInt<32>("hff00"), _r_mask_T_1) @[Mux.scala 81:58]
    node _r_mask_T_4 = eq(UInt<2>("h2"), r_choose_byte) @[Mux.scala 81:61]
    node _r_mask_T_5 = mux(_r_mask_T_4, UInt<32>("hff0000"), _r_mask_T_3) @[Mux.scala 81:58]
    node _r_mask_T_6 = eq(UInt<2>("h3"), r_choose_byte) @[Mux.scala 81:61]
    node _r_mask_T_7 = mux(_r_mask_T_6, UInt<32>("hff000000"), _r_mask_T_5) @[Mux.scala 81:58]
    node _r_mask_T_8 = eq(UInt<1>("h0"), r_choose_half) @[Mux.scala 81:61]
    node _r_mask_T_9 = mux(_r_mask_T_8, UInt<32>("hffff"), UInt<32>("hffff")) @[Mux.scala 81:58]
    node _r_mask_T_10 = eq(UInt<1>("h1"), r_choose_half) @[Mux.scala 81:61]
    node _r_mask_T_11 = mux(_r_mask_T_10, UInt<32>("hffff0000"), _r_mask_T_9) @[Mux.scala 81:58]
    node _r_mask_T_12 = eq(UInt<1>("h0"), io.DataMem.Length) @[Mux.scala 81:61]
    node _r_mask_T_13 = mux(_r_mask_T_12, _r_mask_T_7, UInt<32>("hffffffff")) @[Mux.scala 81:58]
    node _r_mask_T_14 = eq(UInt<1>("h1"), io.DataMem.Length) @[Mux.scala 81:61]
    node _r_mask_T_15 = mux(_r_mask_T_14, _r_mask_T_11, _r_mask_T_13) @[Mux.scala 81:58]
    node _r_mask_T_16 = eq(UInt<2>("h2"), io.DataMem.Length) @[Mux.scala 81:61]
    node _r_mask_T_17 = mux(_r_mask_T_16, UInt<32>("hffffffff"), _r_mask_T_15) @[Mux.scala 81:58]
    r_mask <= _r_mask_T_17 @[PiplinedCPU.scala 105:12]
    wire read_shift_bit : UInt<5> @[PiplinedCPU.scala 119:30]
    node _read_shift_bit_T = eq(UInt<1>("h0"), r_choose_byte) @[Mux.scala 81:61]
    node _read_shift_bit_T_1 = mux(_read_shift_bit_T, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _read_shift_bit_T_2 = eq(UInt<1>("h1"), r_choose_byte) @[Mux.scala 81:61]
    node _read_shift_bit_T_3 = mux(_read_shift_bit_T_2, UInt<4>("h8"), _read_shift_bit_T_1) @[Mux.scala 81:58]
    node _read_shift_bit_T_4 = eq(UInt<2>("h2"), r_choose_byte) @[Mux.scala 81:61]
    node _read_shift_bit_T_5 = mux(_read_shift_bit_T_4, UInt<5>("h10"), _read_shift_bit_T_3) @[Mux.scala 81:58]
    node _read_shift_bit_T_6 = eq(UInt<2>("h3"), r_choose_byte) @[Mux.scala 81:61]
    node _read_shift_bit_T_7 = mux(_read_shift_bit_T_6, UInt<5>("h18"), _read_shift_bit_T_5) @[Mux.scala 81:58]
    node _read_shift_bit_T_8 = eq(UInt<1>("h0"), r_choose_half) @[Mux.scala 81:61]
    node _read_shift_bit_T_9 = mux(_read_shift_bit_T_8, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _read_shift_bit_T_10 = eq(UInt<1>("h1"), r_choose_half) @[Mux.scala 81:61]
    node _read_shift_bit_T_11 = mux(_read_shift_bit_T_10, UInt<5>("h10"), _read_shift_bit_T_9) @[Mux.scala 81:58]
    node _read_shift_bit_T_12 = eq(UInt<1>("h0"), io.DataMem.Length) @[Mux.scala 81:61]
    node _read_shift_bit_T_13 = mux(_read_shift_bit_T_12, _read_shift_bit_T_7, UInt<1>("h0")) @[Mux.scala 81:58]
    node _read_shift_bit_T_14 = eq(UInt<1>("h1"), io.DataMem.Length) @[Mux.scala 81:61]
    node _read_shift_bit_T_15 = mux(_read_shift_bit_T_14, _read_shift_bit_T_11, _read_shift_bit_T_13) @[Mux.scala 81:58]
    node _read_shift_bit_T_16 = eq(UInt<2>("h2"), io.DataMem.Length) @[Mux.scala 81:61]
    node _read_shift_bit_T_17 = mux(_read_shift_bit_T_16, UInt<1>("h0"), _read_shift_bit_T_15) @[Mux.scala 81:58]
    read_shift_bit <= _read_shift_bit_T_17 @[PiplinedCPU.scala 120:20]
    io.master.aw.valid <= UInt<1>("h0") @[PiplinedCPU.scala 138:30]
    io.master.aw.bits.addr <= UInt<1>("h0") @[PiplinedCPU.scala 139:30]
    io.master.aw.bits.burst <= UInt<1>("h0") @[PiplinedCPU.scala 140:30]
    io.master.aw.bits.len <= UInt<1>("h0") @[PiplinedCPU.scala 141:30]
    io.master.aw.bits.size <= UInt<2>("h2") @[PiplinedCPU.scala 142:30]
    io.master.aw.bits.cache <= UInt<1>("h0") @[PiplinedCPU.scala 143:30]
    io.master.aw.bits.id <= UInt<1>("h0") @[PiplinedCPU.scala 144:30]
    io.master.aw.bits.prot <= UInt<1>("h0") @[PiplinedCPU.scala 145:30]
    io.master.aw.bits.lock <= UInt<1>("h0") @[PiplinedCPU.scala 146:30]
    io.master.aw.bits.qos <= UInt<1>("h0") @[PiplinedCPU.scala 147:30]
    io.master.aw.bits.region <= UInt<1>("h0") @[PiplinedCPU.scala 148:30]
    io.master.w.valid <= UInt<1>("h0") @[PiplinedCPU.scala 150:27]
    io.master.w.bits.data <= UInt<1>("h0") @[PiplinedCPU.scala 151:27]
    io.master.w.bits.last <= UInt<1>("h1") @[PiplinedCPU.scala 153:27]
    io.master.b.ready <= UInt<1>("h0") @[PiplinedCPU.scala 155:23]
    io.master.ar.valid <= UInt<1>("h0") @[PiplinedCPU.scala 158:30]
    io.master.ar.bits.addr <= UInt<1>("h0") @[PiplinedCPU.scala 159:30]
    io.master.ar.bits.burst <= UInt<1>("h0") @[PiplinedCPU.scala 160:30]
    io.master.ar.bits.len <= UInt<1>("h0") @[PiplinedCPU.scala 161:30]
    io.master.ar.bits.size <= UInt<2>("h2") @[PiplinedCPU.scala 162:30]
    io.master.ar.bits.cache <= UInt<1>("h0") @[PiplinedCPU.scala 163:30]
    io.master.ar.bits.id <= UInt<1>("h0") @[PiplinedCPU.scala 164:30]
    io.master.ar.bits.prot <= UInt<1>("h0") @[PiplinedCPU.scala 165:30]
    io.master.ar.bits.lock <= UInt<1>("h0") @[PiplinedCPU.scala 166:30]
    io.master.ar.bits.qos <= UInt<1>("h0") @[PiplinedCPU.scala 167:30]
    io.master.ar.bits.region <= UInt<1>("h0") @[PiplinedCPU.scala 168:30]
    io.master.r.ready <= UInt<1>("h0") @[PiplinedCPU.scala 170:23]
    wire WMEM_Stall : UInt<1>
    WMEM_Stall <= UInt<1>("h0")
    wire RMEM_Stall : UInt<1>
    RMEM_Stall <= UInt<1>("h0")
    node _WMEM_Stall_T = not(io.master.b.valid) @[PiplinedCPU.scala 178:39]
    node _WMEM_Stall_T_1 = and(io.DataMem.Mem_W, _WMEM_Stall_T) @[PiplinedCPU.scala 178:36]
    WMEM_Stall <= _WMEM_Stall_T_1 @[PiplinedCPU.scala 178:16]
    node _RMEM_Stall_T = not(io.master.r.valid) @[PiplinedCPU.scala 179:39]
    node _RMEM_Stall_T_1 = and(io.DataMem.Mem_R, _RMEM_Stall_T) @[PiplinedCPU.scala 179:36]
    RMEM_Stall <= _RMEM_Stall_T_1 @[PiplinedCPU.scala 179:16]
    reg wState : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[PiplinedCPU.scala 183:25]
    node _T = eq(UInt<2>("h0"), wState) @[PiplinedCPU.scala 185:20]
    when _T : @[PiplinedCPU.scala 185:20]
      when io.DataMem.Mem_W : @[PiplinedCPU.scala 187:37]
        wState <= UInt<2>("h1") @[PiplinedCPU.scala 188:24]
    else :
      node _T_1 = eq(UInt<2>("h1"), wState) @[PiplinedCPU.scala 185:20]
      when _T_1 : @[PiplinedCPU.scala 185:20]
        node _T_2 = and(io.master.w.ready, io.master.aw.ready) @[PiplinedCPU.scala 192:37]
        when _T_2 : @[PiplinedCPU.scala 192:60]
          wState <= UInt<2>("h2") @[PiplinedCPU.scala 193:24]
      else :
        node _T_3 = eq(UInt<2>("h2"), wState) @[PiplinedCPU.scala 185:20]
        when _T_3 : @[PiplinedCPU.scala 185:20]
          when io.master.b.valid : @[PiplinedCPU.scala 197:37]
            wState <= UInt<2>("h0") @[PiplinedCPU.scala 198:24]
    node _T_4 = eq(wState, UInt<2>("h1")) @[PiplinedCPU.scala 203:17]
    when _T_4 : @[PiplinedCPU.scala 203:28]
      io.master.aw.valid <= UInt<1>("h1") @[PiplinedCPU.scala 204:32]
      io.master.w.valid <= UInt<1>("h1") @[PiplinedCPU.scala 205:32]
      io.master.aw.bits.addr <= io.DataMem.waddr @[PiplinedCPU.scala 206:32]
      node _io_master_w_bits_data_T = dshl(io.DataMem.wdata, write_shift_bit) @[PiplinedCPU.scala 207:52]
      io.master.w.bits.data <= _io_master_w_bits_data_T @[PiplinedCPU.scala 207:32]
      io.master.b.ready <= UInt<1>("h1") @[PiplinedCPU.scala 208:32]
    node _T_5 = eq(wState, UInt<2>("h2")) @[PiplinedCPU.scala 211:17]
    when _T_5 : @[PiplinedCPU.scala 211:32]
      io.master.b.ready <= UInt<1>("h1") @[PiplinedCPU.scala 212:32]
    reg rState : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[PiplinedCPU.scala 217:25]
    node _T_6 = eq(UInt<2>("h0"), rState) @[PiplinedCPU.scala 219:20]
    when _T_6 : @[PiplinedCPU.scala 219:20]
      node _T_7 = and(io.DataMem.Mem_R, io.DMA_Hcf) @[PiplinedCPU.scala 221:37]
      when _T_7 : @[PiplinedCPU.scala 221:52]
        rState <= UInt<2>("h1") @[PiplinedCPU.scala 222:24]
    else :
      node _T_8 = eq(UInt<2>("h1"), rState) @[PiplinedCPU.scala 219:20]
      when _T_8 : @[PiplinedCPU.scala 219:20]
        when io.master.ar.ready : @[PiplinedCPU.scala 226:39]
          rState <= UInt<2>("h2") @[PiplinedCPU.scala 227:24]
      else :
        node _T_9 = eq(UInt<2>("h2"), rState) @[PiplinedCPU.scala 219:20]
        when _T_9 : @[PiplinedCPU.scala 219:20]
          when io.master.r.valid : @[PiplinedCPU.scala 231:37]
            rState <= UInt<2>("h0") @[PiplinedCPU.scala 232:24]
    node _T_10 = eq(rState, UInt<2>("h1")) @[PiplinedCPU.scala 237:17]
    when _T_10 : @[PiplinedCPU.scala 237:28]
      io.master.ar.valid <= UInt<1>("h1") @[PiplinedCPU.scala 238:33]
      io.master.ar.bits.addr <= io.DataMem.raddr @[PiplinedCPU.scala 239:33]
      io.master.r.ready <= UInt<1>("h1") @[PiplinedCPU.scala 240:33]
    node _T_11 = eq(rState, UInt<2>("h2")) @[PiplinedCPU.scala 242:17]
    when _T_11 : @[PiplinedCPU.scala 242:33]
      io.master.r.ready <= UInt<1>("h1") @[PiplinedCPU.scala 243:33]
    node _stage_IF_io_Stall_T = or(io.Stall_DH, io.Stall_MA) @[PiplinedCPU.scala 251:39]
    node _stage_IF_io_Stall_T_1 = not(contorller.io.Flush_BH) @[PiplinedCPU.scala 251:59]
    node _stage_IF_io_Stall_T_2 = and(_stage_IF_io_Stall_T, _stage_IF_io_Stall_T_1) @[PiplinedCPU.scala 251:55]
    stage_IF.io.Stall <= _stage_IF_io_Stall_T_2 @[PiplinedCPU.scala 251:23]
    stage_IF.io.next_pc_in <= datapath_IF.io.next_pc @[PiplinedCPU.scala 252:28]
    datapath_IF.io.PCSel <= contorller.io.PCSel @[PiplinedCPU.scala 255:26]
    datapath_IF.io.IF_pc_in <= stage_IF.io.pc @[PiplinedCPU.scala 256:29]
    datapath_IF.io.EXE_pc_in <= stage_EXE.io.pc @[PiplinedCPU.scala 257:30]
    datapath_IF.io.EXE_target_pc_in <= datapath_EXE.io.EXE_target_pc_out @[PiplinedCPU.scala 258:37]
    node _datapath_IF_io_Mem_data_T = bits(io.InstMem.rdata, 31, 0) @[PiplinedCPU.scala 259:48]
    datapath_IF.io.Mem_data <= _datapath_IF_io_Mem_data_T @[PiplinedCPU.scala 259:29]
    io.InstMem.Mem_R <= contorller.io.IM_Mem_R @[PiplinedCPU.scala 262:22]
    io.InstMem.Mem_W <= contorller.io.IM_Mem_W @[PiplinedCPU.scala 263:22]
    io.InstMem.Length <= contorller.io.IM_Length @[PiplinedCPU.scala 264:23]
    io.InstMem.raddr <= datapath_IF.io.Mem_Addr @[PiplinedCPU.scala 265:22]
    io.InstMem.waddr <= UInt<1>("h0") @[PiplinedCPU.scala 266:22]
    io.InstMem.wdata <= UInt<1>("h0") @[PiplinedCPU.scala 267:22]
    stage_ID.io.Flush <= contorller.io.Flush_BH @[PiplinedCPU.scala 270:23]
    node _stage_ID_io_Stall_T = or(io.Stall_DH, io.Stall_MA) @[PiplinedCPU.scala 271:38]
    stage_ID.io.Stall <= _stage_ID_io_Stall_T @[PiplinedCPU.scala 271:23]
    stage_ID.io.inst_in <= datapath_IF.io.inst @[PiplinedCPU.scala 272:25]
    stage_ID.io.pc_in <= stage_IF.io.pc @[PiplinedCPU.scala 273:23]
    datapath_ID.io.ID_inst_in <= stage_ID.io.inst @[PiplinedCPU.scala 276:31]
    node _datapath_ID_io_WB_index_T = bits(stage_WB.io.inst, 11, 7) @[PiplinedCPU.scala 277:48]
    datapath_ID.io.WB_index <= _datapath_ID_io_WB_index_T @[PiplinedCPU.scala 277:29]
    datapath_ID.io.WB_wdata <= datapath_WB.io.WB_wdata @[PiplinedCPU.scala 278:29]
    datapath_ID.io.WB_RegWEn <= contorller.io.W_RegWEn @[PiplinedCPU.scala 279:30]
    datapath_ID.io.ImmSel <= contorller.io.D_ImmSel @[PiplinedCPU.scala 280:27]
    node _stage_EXE_io_Flush_T = or(contorller.io.Flush_WB_ID_DH, contorller.io.Flush_BH) @[PiplinedCPU.scala 283:57]
    node _stage_EXE_io_Flush_T_1 = not(io.Stall_MA) @[PiplinedCPU.scala 283:87]
    node _stage_EXE_io_Flush_T_2 = and(_stage_EXE_io_Flush_T, _stage_EXE_io_Flush_T_1) @[PiplinedCPU.scala 283:84]
    stage_EXE.io.Flush <= _stage_EXE_io_Flush_T_2 @[PiplinedCPU.scala 283:24]
    node _stage_EXE_io_Stall_T = or(contorller.io.Hcf, io.Stall_MA) @[PiplinedCPU.scala 284:45]
    stage_EXE.io.Stall <= _stage_EXE_io_Stall_T @[PiplinedCPU.scala 284:24]
    stage_EXE.io.pc_in <= stage_ID.io.pc @[PiplinedCPU.scala 285:24]
    stage_EXE.io.inst_in <= stage_ID.io.inst @[PiplinedCPU.scala 286:26]
    stage_EXE.io.imm_in <= datapath_ID.io.imm @[PiplinedCPU.scala 287:25]
    stage_EXE.io.rs1_rdata_in <= datapath_ID.io.ID_rs1_rdata @[PiplinedCPU.scala 288:31]
    stage_EXE.io.rs2_rdata_in <= datapath_ID.io.ID_rs2_rdata @[PiplinedCPU.scala 289:31]
    datapath_EXE.io.EXE_pc_in <= stage_EXE.io.pc @[PiplinedCPU.scala 292:31]
    datapath_EXE.io.EXE_imm_in <= stage_EXE.io.imm @[PiplinedCPU.scala 293:32]
    datapath_EXE.io.EXE_rs1_rdata_in <= stage_EXE.io.rs1_rdata @[PiplinedCPU.scala 294:38]
    datapath_EXE.io.EXE_rs2_rdata_in <= stage_EXE.io.rs2_rdata @[PiplinedCPU.scala 295:38]
    datapath_EXE.io.E_ASel <= contorller.io.E_ASel @[PiplinedCPU.scala 296:28]
    datapath_EXE.io.E_BSel <= contorller.io.E_BSel @[PiplinedCPU.scala 297:28]
    datapath_EXE.io.E_BrUn <= contorller.io.E_BrUn @[PiplinedCPU.scala 298:28]
    datapath_EXE.io.E_ALUSel <= contorller.io.E_ALUSel @[PiplinedCPU.scala 299:30]
    node _stage_MEM_io_Stall_T = or(contorller.io.Hcf, io.Stall_MA) @[PiplinedCPU.scala 302:45]
    stage_MEM.io.Stall <= _stage_MEM_io_Stall_T @[PiplinedCPU.scala 302:24]
    stage_MEM.io.pc_in <= stage_EXE.io.pc @[PiplinedCPU.scala 303:24]
    stage_MEM.io.inst_in <= stage_EXE.io.inst @[PiplinedCPU.scala 304:26]
    stage_MEM.io.DM_wdata_in <= datapath_EXE.io.EXE_rs2_rdata_out @[PiplinedCPU.scala 305:30]
    stage_MEM.io.alu_out_in <= datapath_EXE.io.EXE_alu_out @[PiplinedCPU.scala 306:29]
    datapath_MEM.io.MEM_pc_in <= stage_MEM.io.pc @[PiplinedCPU.scala 309:31]
    datapath_MEM.io.MEM_alu_out_in <= stage_MEM.io.alu_out @[PiplinedCPU.scala 310:36]
    datapath_MEM.io.MEM_DM_wdata_in <= stage_MEM.io.DM_wdata @[PiplinedCPU.scala 311:37]
    node _datapath_MEM_io_Mem_Data_T = and(io.master.r.bits.data, r_mask) @[PiplinedCPU.scala 313:56]
    node _datapath_MEM_io_Mem_Data_T_1 = dshr(_datapath_MEM_io_Mem_Data_T, read_shift_bit) @[PiplinedCPU.scala 313:66]
    datapath_MEM.io.Mem_Data <= _datapath_MEM_io_Mem_Data_T_1 @[PiplinedCPU.scala 313:30]
    io.DataMem.Mem_R <= contorller.io.DM_Mem_R @[PiplinedCPU.scala 316:22]
    io.DataMem.Mem_W <= contorller.io.DM_Mem_W @[PiplinedCPU.scala 317:22]
    io.DataMem.Length <= contorller.io.DM_Length @[PiplinedCPU.scala 318:23]
    io.DataMem.raddr <= datapath_MEM.io.Mem_Addr @[PiplinedCPU.scala 319:22]
    io.DataMem.waddr <= datapath_MEM.io.Mem_Addr @[PiplinedCPU.scala 320:22]
    io.DataMem.wdata <= datapath_MEM.io.Mem_Write_Data @[PiplinedCPU.scala 321:22]
    node _stage_WB_io_Stall_T = or(contorller.io.Hcf, io.Stall_MA) @[PiplinedCPU.scala 324:44]
    stage_WB.io.Stall <= _stage_WB_io_Stall_T @[PiplinedCPU.scala 324:23]
    stage_WB.io.pc_plus4_in <= datapath_MEM.io.MEM_pc_plus_4 @[PiplinedCPU.scala 325:29]
    stage_WB.io.inst_in <= stage_MEM.io.inst @[PiplinedCPU.scala 326:25]
    stage_WB.io.alu_out_in <= datapath_MEM.io.MEM_alu_out @[PiplinedCPU.scala 327:28]
    stage_WB.io.ld_data_in <= datapath_MEM.io.MEM_ld_data @[PiplinedCPU.scala 328:28]
    datapath_WB.io.WB_pc_plus4_in <= stage_WB.io.pc_plus4 @[PiplinedCPU.scala 331:35]
    datapath_WB.io.WB_alu_out_in <= stage_WB.io.alu_out @[PiplinedCPU.scala 332:34]
    datapath_WB.io.WB_ld_data_in <= stage_WB.io.ld_data @[PiplinedCPU.scala 333:34]
    datapath_WB.io.W_WBSel <= contorller.io.W_WBSel @[PiplinedCPU.scala 334:28]
    contorller.io.IF_Inst <= io.InstMem.rdata @[PiplinedCPU.scala 337:27]
    contorller.io.ID_Inst <= stage_ID.io.inst @[PiplinedCPU.scala 338:27]
    contorller.io.EXE_Inst <= stage_EXE.io.inst @[PiplinedCPU.scala 339:28]
    contorller.io.MEM_Inst <= stage_MEM.io.inst @[PiplinedCPU.scala 340:28]
    contorller.io.WB_Inst <= stage_WB.io.inst @[PiplinedCPU.scala 341:27]
    contorller.io.E_BrEq <= datapath_EXE.io.E_BrEq @[PiplinedCPU.scala 343:26]
    contorller.io.E_BrLT <= datapath_EXE.io.E_BrLT @[PiplinedCPU.scala 344:26]
    contorller.io.ID_pc <= stage_ID.io.pc @[PiplinedCPU.scala 346:25]
    contorller.io.EXE_target_pc <= datapath_EXE.io.EXE_target_pc_out @[PiplinedCPU.scala 348:33]
    contorller.io.DM_Valid <= io.DataMem.Valid @[PiplinedCPU.scala 349:28]
    contorller.io.IM_Valid <= io.InstMem.Valid @[PiplinedCPU.scala 350:28]
    io.regs <= datapath_ID.io.regs @[PiplinedCPU.scala 355:13]
    io.Hcf <= contorller.io.Hcf @[PiplinedCPU.scala 356:12]
    io.E_Branch_taken <= contorller.io.E_Branch_taken @[PiplinedCPU.scala 359:23]
    io.Flush <= contorller.io.Flush_BH @[PiplinedCPU.scala 360:14]
    io.Stall_DH <= contorller.io.Stall_WB_ID_DH @[PiplinedCPU.scala 361:17]
    node _io_Stall_MA_T = or(RMEM_Stall, WMEM_Stall) @[PiplinedCPU.scala 363:31]
    io.Stall_MA <= _io_Stall_MA_T @[PiplinedCPU.scala 363:17]
    io.IF_PC <= stage_IF.io.pc @[PiplinedCPU.scala 364:14]
    io.ID_PC <= stage_ID.io.pc @[PiplinedCPU.scala 365:14]
    io.EXE_PC <= stage_EXE.io.pc @[PiplinedCPU.scala 366:15]
    io.MEM_PC <= stage_MEM.io.pc @[PiplinedCPU.scala 367:15]
    node _io_WB_PC_T = gt(stage_WB.io.pc_plus4, UInt<1>("h0")) @[PiplinedCPU.scala 368:42]
    node _io_WB_PC_T_1 = sub(stage_WB.io.pc_plus4, UInt<3>("h4")) @[PiplinedCPU.scala 368:70]
    node _io_WB_PC_T_2 = tail(_io_WB_PC_T_1, 1) @[PiplinedCPU.scala 368:70]
    node _io_WB_PC_T_3 = mux(_io_WB_PC_T, _io_WB_PC_T_2, stage_WB.io.pc_plus4) @[PiplinedCPU.scala 368:20]
    io.WB_PC <= _io_WB_PC_T_3 @[PiplinedCPU.scala 368:14]
    io.EXE_alu_out <= datapath_EXE.io.EXE_alu_out @[PiplinedCPU.scala 369:20]
    io.EXE_src1 <= datapath_EXE.io.EXE_src1 @[PiplinedCPU.scala 370:17]
    io.EXE_src2 <= datapath_EXE.io.EXE_src2 @[PiplinedCPU.scala 371:17]
    io.ALU_src1 <= datapath_EXE.io.alu_src1 @[PiplinedCPU.scala 372:17]
    io.ALU_src2 <= datapath_EXE.io.alu_src2 @[PiplinedCPU.scala 373:17]
    io.WB_wdata <= datapath_WB.io.WB_wdata @[PiplinedCPU.scala 374:17]
    node _io_WB_rd_T = bits(stage_WB.io.inst, 11, 7) @[PiplinedCPU.scala 375:33]
    io.WB_rd <= _io_WB_rd_T @[PiplinedCPU.scala 375:14]
    node _io_EXE_Jump_T = bits(stage_EXE.io.inst, 6, 0) @[PiplinedCPU.scala 376:38]
    node _io_EXE_Jump_T_1 = eq(_io_EXE_Jump_T, UInt<7>("h6f")) @[PiplinedCPU.scala 376:44]
    node _io_EXE_Jump_T_2 = bits(stage_EXE.io.inst, 6, 0) @[PiplinedCPU.scala 376:73]
    node _io_EXE_Jump_T_3 = eq(_io_EXE_Jump_T_2, UInt<7>("h67")) @[PiplinedCPU.scala 376:79]
    node _io_EXE_Jump_T_4 = or(_io_EXE_Jump_T_1, _io_EXE_Jump_T_3) @[PiplinedCPU.scala 376:52]
    io.EXE_Jump <= _io_EXE_Jump_T_4 @[PiplinedCPU.scala 376:17]
    node _io_EXE_Branch_T = bits(stage_EXE.io.inst, 6, 0) @[PiplinedCPU.scala 377:40]
    node _io_EXE_Branch_T_1 = eq(_io_EXE_Branch_T, UInt<7>("h63")) @[PiplinedCPU.scala 377:46]
    io.EXE_Branch <= _io_EXE_Branch_T_1 @[PiplinedCPU.scala 377:19]

  module InstMem :
    input clock : Clock
    input reset : Reset
    output io : { flip raddr : UInt<15>, inst : UInt<32>}

    cmem memory : UInt<8> [32768] @[InstMem.scala 14:19]
    wire rdata : UInt<32> @[InstMem.scala 17:19]
    node _rdata_T = add(io.raddr, UInt<2>("h3")) @[InstMem.scala 18:32]
    node _rdata_T_1 = tail(_rdata_T, 1) @[InstMem.scala 18:32]
    infer mport rdata_MPORT = memory[_rdata_T_1], clock @[InstMem.scala 18:22]
    node _rdata_T_2 = add(io.raddr, UInt<2>("h2")) @[InstMem.scala 19:31]
    node _rdata_T_3 = tail(_rdata_T_2, 1) @[InstMem.scala 19:31]
    infer mport rdata_MPORT_1 = memory[_rdata_T_3], clock @[InstMem.scala 19:21]
    node _rdata_T_4 = add(io.raddr, UInt<1>("h1")) @[InstMem.scala 20:31]
    node _rdata_T_5 = tail(_rdata_T_4, 1) @[InstMem.scala 20:31]
    infer mport rdata_MPORT_2 = memory[_rdata_T_5], clock @[InstMem.scala 20:21]
    node _rdata_T_6 = add(io.raddr, UInt<1>("h0")) @[InstMem.scala 21:31]
    node _rdata_T_7 = tail(_rdata_T_6, 1) @[InstMem.scala 21:31]
    infer mport rdata_MPORT_3 = memory[_rdata_T_7], clock @[InstMem.scala 21:21]
    node rdata_lo = cat(rdata_MPORT_2, rdata_MPORT_3) @[Cat.scala 33:92]
    node rdata_hi = cat(rdata_MPORT, rdata_MPORT_1) @[Cat.scala 33:92]
    node _rdata_T_8 = cat(rdata_hi, rdata_lo) @[Cat.scala 33:92]
    rdata <= _rdata_T_8 @[InstMem.scala 18:9]
    io.inst <= rdata @[InstMem.scala 23:11]

  module AXIReadBus :
    input clock : Clock
    input reset : Reset
    output io : { master : { flip readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, slave : { readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}[3]}

    node _read_port_T = geq(io.master.readAddr.bits.addr, UInt<1>("h0")) @[AXIReadBus.scala 26:35]
    node _read_port_T_1 = lt(io.master.readAddr.bits.addr, UInt<7>("h64")) @[AXIReadBus.scala 26:85]
    node _read_port_T_2 = and(_read_port_T, _read_port_T_1) @[AXIReadBus.scala 26:53]
    node _read_port_T_3 = geq(io.master.readAddr.bits.addr, UInt<16>("h8000")) @[AXIReadBus.scala 26:35]
    node _read_port_T_4 = lt(io.master.readAddr.bits.addr, UInt<16>("h8800")) @[AXIReadBus.scala 26:85]
    node _read_port_T_5 = and(_read_port_T_3, _read_port_T_4) @[AXIReadBus.scala 26:53]
    node _read_port_T_6 = geq(io.master.readAddr.bits.addr, UInt<17>("h10000")) @[AXIReadBus.scala 26:35]
    node _read_port_T_7 = lt(io.master.readAddr.bits.addr, UInt<17>("h10800")) @[AXIReadBus.scala 26:85]
    node _read_port_T_8 = and(_read_port_T_6, _read_port_T_7) @[AXIReadBus.scala 26:53]
    node _read_port_T_9 = mux(_read_port_T_8, UInt<2>("h2"), UInt<1>("h0")) @[Mux.scala 101:16]
    node _read_port_T_10 = mux(_read_port_T_5, UInt<1>("h1"), _read_port_T_9) @[Mux.scala 101:16]
    node read_port = mux(_read_port_T_2, UInt<1>("h0"), _read_port_T_10) @[Mux.scala 101:16]
    reg read_port_reg : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXIReadBus.scala 28:30]
    reg read_addr_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXIReadBus.scala 29:30]
    reg read_addr_reg_id : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[AXIReadBus.scala 30:33]
    reg read_addr_reg_size : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXIReadBus.scala 31:35]
    reg read_addr_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIReadBus.scala 32:36]
    reg outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIReadBus.scala 33:28]
    io.slave[0].readAddr.valid <= UInt<1>("h0") @[AXIReadBus.scala 44:32]
    io.slave[0].readAddr.bits.addr <= UInt<1>("h0") @[AXIReadBus.scala 45:36]
    io.slave[0].readAddr.bits.id <= UInt<1>("h0") @[AXIReadBus.scala 46:34]
    io.slave[0].readAddr.bits.region is invalid @[AXIReadBus.scala 47:38]
    io.slave[0].readAddr.bits.len <= UInt<1>("h0") @[AXIReadBus.scala 48:35]
    io.slave[0].readAddr.bits.size <= UInt<1>("h0") @[AXIReadBus.scala 49:36]
    io.slave[0].readAddr.bits.burst <= UInt<1>("h0") @[AXIReadBus.scala 50:37]
    io.slave[0].readAddr.bits.lock is invalid @[AXIReadBus.scala 51:36]
    io.slave[0].readAddr.bits.cache is invalid @[AXIReadBus.scala 52:37]
    io.slave[0].readAddr.bits.prot is invalid @[AXIReadBus.scala 53:36]
    io.slave[0].readAddr.bits.qos is invalid @[AXIReadBus.scala 54:35]
    io.slave[0].readData.ready <= UInt<1>("h0") @[AXIReadBus.scala 55:32]
    io.slave[1].readAddr.valid <= UInt<1>("h0") @[AXIReadBus.scala 44:32]
    io.slave[1].readAddr.bits.addr <= UInt<1>("h0") @[AXIReadBus.scala 45:36]
    io.slave[1].readAddr.bits.id <= UInt<1>("h0") @[AXIReadBus.scala 46:34]
    io.slave[1].readAddr.bits.region is invalid @[AXIReadBus.scala 47:38]
    io.slave[1].readAddr.bits.len <= UInt<1>("h0") @[AXIReadBus.scala 48:35]
    io.slave[1].readAddr.bits.size <= UInt<1>("h0") @[AXIReadBus.scala 49:36]
    io.slave[1].readAddr.bits.burst <= UInt<1>("h0") @[AXIReadBus.scala 50:37]
    io.slave[1].readAddr.bits.lock is invalid @[AXIReadBus.scala 51:36]
    io.slave[1].readAddr.bits.cache is invalid @[AXIReadBus.scala 52:37]
    io.slave[1].readAddr.bits.prot is invalid @[AXIReadBus.scala 53:36]
    io.slave[1].readAddr.bits.qos is invalid @[AXIReadBus.scala 54:35]
    io.slave[1].readData.ready <= UInt<1>("h0") @[AXIReadBus.scala 55:32]
    io.slave[2].readAddr.valid <= UInt<1>("h0") @[AXIReadBus.scala 44:32]
    io.slave[2].readAddr.bits.addr <= UInt<1>("h0") @[AXIReadBus.scala 45:36]
    io.slave[2].readAddr.bits.id <= UInt<1>("h0") @[AXIReadBus.scala 46:34]
    io.slave[2].readAddr.bits.region is invalid @[AXIReadBus.scala 47:38]
    io.slave[2].readAddr.bits.len <= UInt<1>("h0") @[AXIReadBus.scala 48:35]
    io.slave[2].readAddr.bits.size <= UInt<1>("h0") @[AXIReadBus.scala 49:36]
    io.slave[2].readAddr.bits.burst <= UInt<1>("h0") @[AXIReadBus.scala 50:37]
    io.slave[2].readAddr.bits.lock is invalid @[AXIReadBus.scala 51:36]
    io.slave[2].readAddr.bits.cache is invalid @[AXIReadBus.scala 52:37]
    io.slave[2].readAddr.bits.prot is invalid @[AXIReadBus.scala 53:36]
    io.slave[2].readAddr.bits.qos is invalid @[AXIReadBus.scala 54:35]
    io.slave[2].readData.ready <= UInt<1>("h0") @[AXIReadBus.scala 55:32]
    io.master.readData.valid <= UInt<1>("h0") @[AXIReadBus.scala 58:28]
    io.master.readData.bits.data <= UInt<1>("h0") @[AXIReadBus.scala 59:32]
    io.master.readData.bits.resp <= UInt<1>("h0") @[AXIReadBus.scala 60:32]
    io.master.readData.bits.id is invalid @[AXIReadBus.scala 61:30]
    io.master.readData.bits.last <= UInt<1>("h0") @[AXIReadBus.scala 62:32]
    node _io_master_readAddr_ready_T = not(outstanding) @[AXIReadBus.scala 63:31]
    io.master.readAddr.ready <= _io_master_readAddr_ready_T @[AXIReadBus.scala 63:28]
    node _T = and(io.master.readAddr.ready, io.master.readAddr.valid) @[Decoupled.scala 52:35]
    when _T : @[AXIReadBus.scala 66:33]
      outstanding <= UInt<1>("h1") @[AXIReadBus.scala 67:17]
      read_port_reg <= read_port @[AXIReadBus.scala 68:19]
      read_addr_reg <= io.master.readAddr.bits.addr @[AXIReadBus.scala 69:19]
      read_addr_reg_id <= io.master.readAddr.bits.id @[AXIReadBus.scala 70:22]
      read_addr_reg_size <= io.master.readAddr.bits.size @[AXIReadBus.scala 71:24]
      read_addr_reg_valid <= UInt<1>("h1") @[AXIReadBus.scala 72:25]
    when read_addr_reg_valid : @[AXIReadBus.scala 81:29]
      node _T_1 = bits(read_port_reg, 1, 0)
      when io.slave[_T_1].readAddr.ready : @[AXIReadBus.scala 82:50]
        read_addr_reg_valid <= UInt<1>("h0") @[AXIReadBus.scala 83:27]
    when outstanding : @[AXIReadBus.scala 88:21]
      node _io_master_readData_valid_T = bits(read_port_reg, 1, 0)
      io.master.readData.valid <= io.slave[_io_master_readData_valid_T].readData.valid @[AXIReadBus.scala 89:30]
      node _io_master_readData_bits_data_T = bits(read_port_reg, 1, 0)
      io.master.readData.bits.data <= io.slave[_io_master_readData_bits_data_T].readData.bits.data @[AXIReadBus.scala 90:34]
      node _io_master_readData_bits_resp_T = bits(read_port_reg, 1, 0)
      io.master.readData.bits.resp <= io.slave[_io_master_readData_bits_resp_T].readData.bits.resp @[AXIReadBus.scala 91:34]
      node _io_master_readData_bits_last_T = bits(read_port_reg, 1, 0)
      io.master.readData.bits.last <= io.slave[_io_master_readData_bits_last_T].readData.bits.last @[AXIReadBus.scala 92:34]
      node _io_master_readData_bits_id_T = bits(read_port_reg, 1, 0)
      io.master.readData.bits.id <= io.slave[_io_master_readData_bits_id_T].readData.bits.id @[AXIReadBus.scala 93:32]
      node _T_2 = bits(read_port_reg, 1, 0)
      io.slave[_T_2].readAddr.bits.addr <= read_addr_reg @[AXIReadBus.scala 94:48]
      node _T_3 = bits(read_port_reg, 1, 0)
      io.slave[_T_3].readAddr.valid <= read_addr_reg_valid @[AXIReadBus.scala 95:44]
      node _T_4 = bits(read_port_reg, 1, 0)
      io.slave[_T_4].readData.ready <= io.master.readData.ready @[AXIReadBus.scala 96:44]
      node _T_5 = bits(read_port_reg, 1, 0)
      io.slave[_T_5].readAddr.bits.size <= read_addr_reg_size @[AXIReadBus.scala 97:48]
      node _T_6 = bits(read_port_reg, 1, 0)
      io.slave[_T_6].readAddr.bits.id <= read_addr_reg_id @[AXIReadBus.scala 98:46]
      node _T_7 = and(io.master.readData.ready, io.master.readData.valid) @[Decoupled.scala 52:35]
      when _T_7 : @[AXIReadBus.scala 105:35]
        outstanding <= UInt<1>("h0") @[AXIReadBus.scala 106:19]

  module AXIReadBus_1 :
    input clock : Clock
    input reset : Reset
    output io : { master : { flip readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, slave : { readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}[3]}

    node _read_port_T = geq(io.master.readAddr.bits.addr, UInt<1>("h0")) @[AXIReadBus.scala 26:35]
    node _read_port_T_1 = lt(io.master.readAddr.bits.addr, UInt<7>("h64")) @[AXIReadBus.scala 26:85]
    node _read_port_T_2 = and(_read_port_T, _read_port_T_1) @[AXIReadBus.scala 26:53]
    node _read_port_T_3 = geq(io.master.readAddr.bits.addr, UInt<16>("h8000")) @[AXIReadBus.scala 26:35]
    node _read_port_T_4 = lt(io.master.readAddr.bits.addr, UInt<16>("h8800")) @[AXIReadBus.scala 26:85]
    node _read_port_T_5 = and(_read_port_T_3, _read_port_T_4) @[AXIReadBus.scala 26:53]
    node _read_port_T_6 = geq(io.master.readAddr.bits.addr, UInt<17>("h10000")) @[AXIReadBus.scala 26:35]
    node _read_port_T_7 = lt(io.master.readAddr.bits.addr, UInt<17>("h10800")) @[AXIReadBus.scala 26:85]
    node _read_port_T_8 = and(_read_port_T_6, _read_port_T_7) @[AXIReadBus.scala 26:53]
    node _read_port_T_9 = mux(_read_port_T_8, UInt<2>("h2"), UInt<1>("h0")) @[Mux.scala 101:16]
    node _read_port_T_10 = mux(_read_port_T_5, UInt<1>("h1"), _read_port_T_9) @[Mux.scala 101:16]
    node read_port = mux(_read_port_T_2, UInt<1>("h0"), _read_port_T_10) @[Mux.scala 101:16]
    reg read_port_reg : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXIReadBus.scala 28:30]
    reg read_addr_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXIReadBus.scala 29:30]
    reg read_addr_reg_id : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[AXIReadBus.scala 30:33]
    reg read_addr_reg_size : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXIReadBus.scala 31:35]
    reg read_addr_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIReadBus.scala 32:36]
    reg outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIReadBus.scala 33:28]
    io.slave[0].readAddr.valid <= UInt<1>("h0") @[AXIReadBus.scala 44:32]
    io.slave[0].readAddr.bits.addr <= UInt<1>("h0") @[AXIReadBus.scala 45:36]
    io.slave[0].readAddr.bits.id <= UInt<1>("h0") @[AXIReadBus.scala 46:34]
    io.slave[0].readAddr.bits.region is invalid @[AXIReadBus.scala 47:38]
    io.slave[0].readAddr.bits.len <= UInt<1>("h0") @[AXIReadBus.scala 48:35]
    io.slave[0].readAddr.bits.size <= UInt<1>("h0") @[AXIReadBus.scala 49:36]
    io.slave[0].readAddr.bits.burst <= UInt<1>("h0") @[AXIReadBus.scala 50:37]
    io.slave[0].readAddr.bits.lock is invalid @[AXIReadBus.scala 51:36]
    io.slave[0].readAddr.bits.cache is invalid @[AXIReadBus.scala 52:37]
    io.slave[0].readAddr.bits.prot is invalid @[AXIReadBus.scala 53:36]
    io.slave[0].readAddr.bits.qos is invalid @[AXIReadBus.scala 54:35]
    io.slave[0].readData.ready <= UInt<1>("h0") @[AXIReadBus.scala 55:32]
    io.slave[1].readAddr.valid <= UInt<1>("h0") @[AXIReadBus.scala 44:32]
    io.slave[1].readAddr.bits.addr <= UInt<1>("h0") @[AXIReadBus.scala 45:36]
    io.slave[1].readAddr.bits.id <= UInt<1>("h0") @[AXIReadBus.scala 46:34]
    io.slave[1].readAddr.bits.region is invalid @[AXIReadBus.scala 47:38]
    io.slave[1].readAddr.bits.len <= UInt<1>("h0") @[AXIReadBus.scala 48:35]
    io.slave[1].readAddr.bits.size <= UInt<1>("h0") @[AXIReadBus.scala 49:36]
    io.slave[1].readAddr.bits.burst <= UInt<1>("h0") @[AXIReadBus.scala 50:37]
    io.slave[1].readAddr.bits.lock is invalid @[AXIReadBus.scala 51:36]
    io.slave[1].readAddr.bits.cache is invalid @[AXIReadBus.scala 52:37]
    io.slave[1].readAddr.bits.prot is invalid @[AXIReadBus.scala 53:36]
    io.slave[1].readAddr.bits.qos is invalid @[AXIReadBus.scala 54:35]
    io.slave[1].readData.ready <= UInt<1>("h0") @[AXIReadBus.scala 55:32]
    io.slave[2].readAddr.valid <= UInt<1>("h0") @[AXIReadBus.scala 44:32]
    io.slave[2].readAddr.bits.addr <= UInt<1>("h0") @[AXIReadBus.scala 45:36]
    io.slave[2].readAddr.bits.id <= UInt<1>("h0") @[AXIReadBus.scala 46:34]
    io.slave[2].readAddr.bits.region is invalid @[AXIReadBus.scala 47:38]
    io.slave[2].readAddr.bits.len <= UInt<1>("h0") @[AXIReadBus.scala 48:35]
    io.slave[2].readAddr.bits.size <= UInt<1>("h0") @[AXIReadBus.scala 49:36]
    io.slave[2].readAddr.bits.burst <= UInt<1>("h0") @[AXIReadBus.scala 50:37]
    io.slave[2].readAddr.bits.lock is invalid @[AXIReadBus.scala 51:36]
    io.slave[2].readAddr.bits.cache is invalid @[AXIReadBus.scala 52:37]
    io.slave[2].readAddr.bits.prot is invalid @[AXIReadBus.scala 53:36]
    io.slave[2].readAddr.bits.qos is invalid @[AXIReadBus.scala 54:35]
    io.slave[2].readData.ready <= UInt<1>("h0") @[AXIReadBus.scala 55:32]
    io.master.readData.valid <= UInt<1>("h0") @[AXIReadBus.scala 58:28]
    io.master.readData.bits.data <= UInt<1>("h0") @[AXIReadBus.scala 59:32]
    io.master.readData.bits.resp <= UInt<1>("h0") @[AXIReadBus.scala 60:32]
    io.master.readData.bits.id is invalid @[AXIReadBus.scala 61:30]
    io.master.readData.bits.last <= UInt<1>("h0") @[AXIReadBus.scala 62:32]
    node _io_master_readAddr_ready_T = not(outstanding) @[AXIReadBus.scala 63:31]
    io.master.readAddr.ready <= _io_master_readAddr_ready_T @[AXIReadBus.scala 63:28]
    node _T = and(io.master.readAddr.ready, io.master.readAddr.valid) @[Decoupled.scala 52:35]
    when _T : @[AXIReadBus.scala 66:33]
      outstanding <= UInt<1>("h1") @[AXIReadBus.scala 67:17]
      read_port_reg <= read_port @[AXIReadBus.scala 68:19]
      read_addr_reg <= io.master.readAddr.bits.addr @[AXIReadBus.scala 69:19]
      read_addr_reg_id <= io.master.readAddr.bits.id @[AXIReadBus.scala 70:22]
      read_addr_reg_size <= io.master.readAddr.bits.size @[AXIReadBus.scala 71:24]
      read_addr_reg_valid <= UInt<1>("h1") @[AXIReadBus.scala 72:25]
    when read_addr_reg_valid : @[AXIReadBus.scala 81:29]
      node _T_1 = bits(read_port_reg, 1, 0)
      when io.slave[_T_1].readAddr.ready : @[AXIReadBus.scala 82:50]
        read_addr_reg_valid <= UInt<1>("h0") @[AXIReadBus.scala 83:27]
    when outstanding : @[AXIReadBus.scala 88:21]
      node _io_master_readData_valid_T = bits(read_port_reg, 1, 0)
      io.master.readData.valid <= io.slave[_io_master_readData_valid_T].readData.valid @[AXIReadBus.scala 89:30]
      node _io_master_readData_bits_data_T = bits(read_port_reg, 1, 0)
      io.master.readData.bits.data <= io.slave[_io_master_readData_bits_data_T].readData.bits.data @[AXIReadBus.scala 90:34]
      node _io_master_readData_bits_resp_T = bits(read_port_reg, 1, 0)
      io.master.readData.bits.resp <= io.slave[_io_master_readData_bits_resp_T].readData.bits.resp @[AXIReadBus.scala 91:34]
      node _io_master_readData_bits_last_T = bits(read_port_reg, 1, 0)
      io.master.readData.bits.last <= io.slave[_io_master_readData_bits_last_T].readData.bits.last @[AXIReadBus.scala 92:34]
      node _io_master_readData_bits_id_T = bits(read_port_reg, 1, 0)
      io.master.readData.bits.id <= io.slave[_io_master_readData_bits_id_T].readData.bits.id @[AXIReadBus.scala 93:32]
      node _T_2 = bits(read_port_reg, 1, 0)
      io.slave[_T_2].readAddr.bits.addr <= read_addr_reg @[AXIReadBus.scala 94:48]
      node _T_3 = bits(read_port_reg, 1, 0)
      io.slave[_T_3].readAddr.valid <= read_addr_reg_valid @[AXIReadBus.scala 95:44]
      node _T_4 = bits(read_port_reg, 1, 0)
      io.slave[_T_4].readData.ready <= io.master.readData.ready @[AXIReadBus.scala 96:44]
      node _T_5 = bits(read_port_reg, 1, 0)
      io.slave[_T_5].readAddr.bits.size <= read_addr_reg_size @[AXIReadBus.scala 97:48]
      node _T_6 = bits(read_port_reg, 1, 0)
      io.slave[_T_6].readAddr.bits.id <= read_addr_reg_id @[AXIReadBus.scala 98:46]
      node _T_7 = and(io.master.readData.ready, io.master.readData.valid) @[Decoupled.scala 52:35]
      when _T_7 : @[AXIReadBus.scala 105:35]
        outstanding <= UInt<1>("h0") @[AXIReadBus.scala 106:19]

  module RRArbiter :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}, chosen : UInt<1>}

    wire choice : UInt
    choice <= UInt<1>("h1")
    io.chosen <= choice @[Arbiter.scala 54:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 55:16]
    io.out.bits <= io.in[io.chosen].bits @[Arbiter.scala 56:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 52:35]
    reg lastGrant : UInt<1>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 19:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 20:18]
      lastGrant <= io.chosen @[Reg.scala 20:22]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 81:49]
    node grantMask_1 = gt(UInt<1>("h1"), lastGrant) @[Arbiter.scala 81:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 82:76]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 82:76]
    node _ctrl_T = or(validMask_0, validMask_1) @[Arbiter.scala 45:68]
    node _ctrl_T_1 = or(_ctrl_T, io.in[0].valid) @[Arbiter.scala 45:68]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_2 = eq(_ctrl_T, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_3 = eq(_ctrl_T_1, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 86:34]
    node _T_1 = or(_T, ctrl_2) @[Arbiter.scala 86:50]
    node _T_2 = and(ctrl_1, grantMask_1) @[Arbiter.scala 86:34]
    node _T_3 = or(_T_2, ctrl_3) @[Arbiter.scala 86:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 74:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 74:16]
    node _io_in_1_ready_T = and(_T_3, io.out.ready) @[Arbiter.scala 74:21]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 74:16]
    when io.in[0].valid : @[Arbiter.scala 91:26]
      choice <= UInt<1>("h0") @[Arbiter.scala 91:35]
    when validMask_1 : @[Arbiter.scala 93:24]
      choice <= UInt<1>("h1") @[Arbiter.scala 93:33]

  module AXISlaveReadMux :
    input clock : Clock
    input reset : Reset
    output io : { out : { readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, in : { flip readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}[2]}

    wire _mask_WIRE : UInt<1>[2] @[AXISlaveReadMux.scala 24:33]
    _mask_WIRE[0] <= UInt<1>("h1") @[AXISlaveReadMux.scala 24:33]
    _mask_WIRE[1] <= UInt<1>("h1") @[AXISlaveReadMux.scala 24:33]
    wire mask : UInt<1>[2]
    mask <= _mask_WIRE
    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[AXISlaveReadMux.scala 30:22]
    node _outstanding_T = or(io.in[0].readAddr.valid, io.in[1].readAddr.valid) @[AXISlaveReadMux.scala 33:95]
    wire outstanding : UInt<1>
    outstanding <= _outstanding_T
    inst arbiter of RRArbiter @[AXISlaveReadMux.scala 35:23]
    arbiter.clock <= clock
    arbiter.reset <= reset
    reg chosen_reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveReadMux.scala 36:27]
    reg ar_determined : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveReadMux.scala 37:30]
    wire _address_reg_WIRE : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}
    _address_reg_WIRE.qos is invalid
    _address_reg_WIRE.prot is invalid
    _address_reg_WIRE.cache is invalid
    _address_reg_WIRE.lock is invalid
    _address_reg_WIRE.burst is invalid
    _address_reg_WIRE.size <= UInt<1>("h0")
    _address_reg_WIRE.len is invalid
    _address_reg_WIRE.region is invalid
    _address_reg_WIRE.addr <= UInt<1>("h0")
    _address_reg_WIRE.id <= UInt<1>("h0")
    reg address_reg : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}, clock with :
      reset => (reset, _address_reg_WIRE) @[AXISlaveReadMux.scala 38:28]
    wire _data_reg_WIRE : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}
    _data_reg_WIRE.last <= UInt<1>("h0")
    _data_reg_WIRE.resp <= UInt<1>("h0")
    _data_reg_WIRE.data <= UInt<1>("h0")
    _data_reg_WIRE.id <= UInt<1>("h0")
    reg data_reg : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}, clock with :
      reset => (reset, _data_reg_WIRE) @[AXISlaveReadMux.scala 43:25]
    io.out.readAddr.bits.qos is invalid @[AXISlaveReadMux.scala 51:28]
    io.out.readAddr.bits.len is invalid @[AXISlaveReadMux.scala 52:28]
    io.out.readAddr.bits.cache is invalid @[AXISlaveReadMux.scala 53:30]
    io.out.readAddr.bits.lock is invalid @[AXISlaveReadMux.scala 54:29]
    io.out.readAddr.bits.size <= UInt<1>("h0") @[AXISlaveReadMux.scala 55:29]
    io.out.readAddr.bits.id <= UInt<1>("h0") @[AXISlaveReadMux.scala 56:27]
    io.out.readAddr.bits.prot is invalid @[AXISlaveReadMux.scala 57:29]
    io.out.readAddr.bits.region is invalid @[AXISlaveReadMux.scala 58:31]
    io.out.readAddr.bits.burst is invalid @[AXISlaveReadMux.scala 59:30]
    io.out.readData.ready <= UInt<1>("h0") @[AXISlaveReadMux.scala 60:25]
    arbiter.io.out.ready <= UInt<1>("h1") @[AXISlaveReadMux.scala 61:24]
    io.in[0].readData.bits.data <= UInt<1>("h0") @[AXISlaveReadMux.scala 64:33]
    io.in[0].readData.valid <= UInt<1>("h0") @[AXISlaveReadMux.scala 65:29]
    io.in[0].readData.bits.resp <= UInt<1>("h0") @[AXISlaveReadMux.scala 66:33]
    io.in[0].readData.bits.id <= UInt<1>("h0") @[AXISlaveReadMux.scala 67:31]
    io.in[0].readData.bits.last <= UInt<1>("h1") @[AXISlaveReadMux.scala 68:33]
    io.in[1].readData.bits.data <= UInt<1>("h0") @[AXISlaveReadMux.scala 64:33]
    io.in[1].readData.valid <= UInt<1>("h0") @[AXISlaveReadMux.scala 65:29]
    io.in[1].readData.bits.resp <= UInt<1>("h0") @[AXISlaveReadMux.scala 66:33]
    io.in[1].readData.bits.id <= UInt<1>("h0") @[AXISlaveReadMux.scala 67:31]
    io.in[1].readData.bits.last <= UInt<1>("h1") @[AXISlaveReadMux.scala 68:33]
    node _io_in_0_readAddr_ready_T = and(arbiter.io.in[0].ready, mask[0]) @[AXISlaveReadMux.scala 72:55]
    io.in[0].readAddr.ready <= _io_in_0_readAddr_ready_T @[AXISlaveReadMux.scala 72:29]
    node _arbiter_io_in_0_valid_T = and(io.in[0].readAddr.valid, mask[0]) @[AXISlaveReadMux.scala 73:55]
    arbiter.io.in[0].valid <= _arbiter_io_in_0_valid_T @[AXISlaveReadMux.scala 73:28]
    arbiter.io.in[0].bits <= UInt<1>("h0") @[AXISlaveReadMux.scala 74:27]
    node _io_in_1_readAddr_ready_T = and(arbiter.io.in[1].ready, mask[1]) @[AXISlaveReadMux.scala 72:55]
    io.in[1].readAddr.ready <= _io_in_1_readAddr_ready_T @[AXISlaveReadMux.scala 72:29]
    node _arbiter_io_in_1_valid_T = and(io.in[1].readAddr.valid, mask[1]) @[AXISlaveReadMux.scala 73:55]
    arbiter.io.in[1].valid <= _arbiter_io_in_1_valid_T @[AXISlaveReadMux.scala 73:28]
    arbiter.io.in[1].bits <= UInt<1>("h0") @[AXISlaveReadMux.scala 74:27]
    io.out.readAddr.valid <= ar_determined @[AXISlaveReadMux.scala 77:25]
    node _T = eq(UInt<2>("h0"), state) @[AXISlaveReadMux.scala 79:16]
    when _T : @[AXISlaveReadMux.scala 79:16]
      when outstanding : @[AXISlaveReadMux.scala 81:24]
        state <= UInt<2>("h1") @[AXISlaveReadMux.scala 82:15]
    else :
      node _T_1 = eq(UInt<2>("h1"), state) @[AXISlaveReadMux.scala 79:16]
      when _T_1 : @[AXISlaveReadMux.scala 79:16]
        node _T_2 = and(io.out.readData.ready, io.out.readData.valid) @[Decoupled.scala 52:35]
        when _T_2 : @[AXISlaveReadMux.scala 86:33]
          state <= UInt<2>("h2") @[AXISlaveReadMux.scala 87:15]
      else :
        node _T_3 = eq(UInt<2>("h2"), state) @[AXISlaveReadMux.scala 79:16]
        when _T_3 : @[AXISlaveReadMux.scala 79:16]
          node _T_4 = or(chosen_reg, UInt<1>("h0"))
          node _T_5 = bits(_T_4, 0, 0)
          node _T_6 = and(io.in[_T_5].readData.ready, io.in[_T_5].readData.valid) @[Decoupled.scala 52:35]
          when _T_6 : @[AXISlaveReadMux.scala 91:44]
            state <= UInt<2>("h0") @[AXISlaveReadMux.scala 92:15]
    node _T_7 = eq(state, UInt<2>("h0")) @[AXISlaveReadMux.scala 97:14]
    when _T_7 : @[AXISlaveReadMux.scala 97:24]
      mask[0] <= UInt<1>("h1") @[AXISlaveReadMux.scala 98:20]
      mask[1] <= UInt<1>("h1") @[AXISlaveReadMux.scala 98:20]
      when arbiter.io.out.valid : @[AXISlaveReadMux.scala 99:31]
        chosen_reg <= arbiter.io.chosen @[AXISlaveReadMux.scala 100:18]
        address_reg <= io.in[arbiter.io.chosen].readAddr.bits @[AXISlaveReadMux.scala 101:19]
        ar_determined <= UInt<1>("h1") @[AXISlaveReadMux.scala 102:21]
      io.out.readData.ready <= UInt<1>("h0") @[AXISlaveReadMux.scala 104:27]
    else :
      node _T_8 = eq(state, UInt<2>("h1")) @[AXISlaveReadMux.scala 106:19]
      when _T_8 : @[AXISlaveReadMux.scala 106:33]
        mask[0] <= UInt<1>("h0") @[AXISlaveReadMux.scala 107:22]
        mask[1] <= UInt<1>("h0") @[AXISlaveReadMux.scala 107:22]
        node _T_9 = and(io.out.readAddr.ready, io.out.readAddr.valid) @[Decoupled.scala 52:35]
        when _T_9 : @[AXISlaveReadMux.scala 108:33]
          ar_determined <= UInt<1>("h0") @[AXISlaveReadMux.scala 109:23]
        node _T_10 = and(io.out.readData.ready, io.out.readData.valid) @[Decoupled.scala 52:35]
        when _T_10 : @[AXISlaveReadMux.scala 111:33]
          data_reg <= io.out.readData.bits @[AXISlaveReadMux.scala 112:18]
        io.out.readData.ready <= UInt<1>("h1") @[AXISlaveReadMux.scala 114:29]
      else :
        node _T_11 = eq(state, UInt<2>("h2")) @[AXISlaveReadMux.scala 116:19]
        when _T_11 : @[AXISlaveReadMux.scala 116:31]
          mask[0] <= UInt<1>("h0") @[AXISlaveReadMux.scala 117:20]
          mask[1] <= UInt<1>("h0") @[AXISlaveReadMux.scala 117:20]
          node _T_12 = or(chosen_reg, UInt<1>("h0"))
          node _T_13 = bits(_T_12, 0, 0)
          io.in[_T_13].readData.valid <= UInt<1>("h1") @[AXISlaveReadMux.scala 118:38]
    io.out.readAddr.bits <= address_reg @[AXISlaveReadMux.scala 121:24]
    node _T_14 = or(chosen_reg, UInt<1>("h0"))
    node _T_15 = bits(_T_14, 0, 0)
    io.in[_T_15].readData.bits <= data_reg @[AXISlaveReadMux.scala 122:35]

  module RRArbiter_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}, chosen : UInt<1>}

    wire choice : UInt
    choice <= UInt<1>("h1")
    io.chosen <= choice @[Arbiter.scala 54:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 55:16]
    io.out.bits <= io.in[io.chosen].bits @[Arbiter.scala 56:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 52:35]
    reg lastGrant : UInt<1>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 19:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 20:18]
      lastGrant <= io.chosen @[Reg.scala 20:22]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 81:49]
    node grantMask_1 = gt(UInt<1>("h1"), lastGrant) @[Arbiter.scala 81:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 82:76]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 82:76]
    node _ctrl_T = or(validMask_0, validMask_1) @[Arbiter.scala 45:68]
    node _ctrl_T_1 = or(_ctrl_T, io.in[0].valid) @[Arbiter.scala 45:68]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_2 = eq(_ctrl_T, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_3 = eq(_ctrl_T_1, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 86:34]
    node _T_1 = or(_T, ctrl_2) @[Arbiter.scala 86:50]
    node _T_2 = and(ctrl_1, grantMask_1) @[Arbiter.scala 86:34]
    node _T_3 = or(_T_2, ctrl_3) @[Arbiter.scala 86:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 74:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 74:16]
    node _io_in_1_ready_T = and(_T_3, io.out.ready) @[Arbiter.scala 74:21]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 74:16]
    when io.in[0].valid : @[Arbiter.scala 91:26]
      choice <= UInt<1>("h0") @[Arbiter.scala 91:35]
    when validMask_1 : @[Arbiter.scala 93:24]
      choice <= UInt<1>("h1") @[Arbiter.scala 93:33]

  module AXISlaveReadMux_1 :
    input clock : Clock
    input reset : Reset
    output io : { out : { readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, in : { flip readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}[2]}

    wire _mask_WIRE : UInt<1>[2] @[AXISlaveReadMux.scala 24:33]
    _mask_WIRE[0] <= UInt<1>("h1") @[AXISlaveReadMux.scala 24:33]
    _mask_WIRE[1] <= UInt<1>("h1") @[AXISlaveReadMux.scala 24:33]
    wire mask : UInt<1>[2]
    mask <= _mask_WIRE
    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[AXISlaveReadMux.scala 30:22]
    node _outstanding_T = or(io.in[0].readAddr.valid, io.in[1].readAddr.valid) @[AXISlaveReadMux.scala 33:95]
    wire outstanding : UInt<1>
    outstanding <= _outstanding_T
    inst arbiter of RRArbiter_1 @[AXISlaveReadMux.scala 35:23]
    arbiter.clock <= clock
    arbiter.reset <= reset
    reg chosen_reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveReadMux.scala 36:27]
    reg ar_determined : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveReadMux.scala 37:30]
    wire _address_reg_WIRE : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}
    _address_reg_WIRE.qos is invalid
    _address_reg_WIRE.prot is invalid
    _address_reg_WIRE.cache is invalid
    _address_reg_WIRE.lock is invalid
    _address_reg_WIRE.burst is invalid
    _address_reg_WIRE.size <= UInt<1>("h0")
    _address_reg_WIRE.len is invalid
    _address_reg_WIRE.region is invalid
    _address_reg_WIRE.addr <= UInt<1>("h0")
    _address_reg_WIRE.id <= UInt<1>("h0")
    reg address_reg : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}, clock with :
      reset => (reset, _address_reg_WIRE) @[AXISlaveReadMux.scala 38:28]
    wire _data_reg_WIRE : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}
    _data_reg_WIRE.last <= UInt<1>("h0")
    _data_reg_WIRE.resp <= UInt<1>("h0")
    _data_reg_WIRE.data <= UInt<1>("h0")
    _data_reg_WIRE.id <= UInt<1>("h0")
    reg data_reg : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}, clock with :
      reset => (reset, _data_reg_WIRE) @[AXISlaveReadMux.scala 43:25]
    io.out.readAddr.bits.qos is invalid @[AXISlaveReadMux.scala 51:28]
    io.out.readAddr.bits.len is invalid @[AXISlaveReadMux.scala 52:28]
    io.out.readAddr.bits.cache is invalid @[AXISlaveReadMux.scala 53:30]
    io.out.readAddr.bits.lock is invalid @[AXISlaveReadMux.scala 54:29]
    io.out.readAddr.bits.size <= UInt<1>("h0") @[AXISlaveReadMux.scala 55:29]
    io.out.readAddr.bits.id <= UInt<1>("h0") @[AXISlaveReadMux.scala 56:27]
    io.out.readAddr.bits.prot is invalid @[AXISlaveReadMux.scala 57:29]
    io.out.readAddr.bits.region is invalid @[AXISlaveReadMux.scala 58:31]
    io.out.readAddr.bits.burst is invalid @[AXISlaveReadMux.scala 59:30]
    io.out.readData.ready <= UInt<1>("h0") @[AXISlaveReadMux.scala 60:25]
    arbiter.io.out.ready <= UInt<1>("h1") @[AXISlaveReadMux.scala 61:24]
    io.in[0].readData.bits.data <= UInt<1>("h0") @[AXISlaveReadMux.scala 64:33]
    io.in[0].readData.valid <= UInt<1>("h0") @[AXISlaveReadMux.scala 65:29]
    io.in[0].readData.bits.resp <= UInt<1>("h0") @[AXISlaveReadMux.scala 66:33]
    io.in[0].readData.bits.id <= UInt<1>("h0") @[AXISlaveReadMux.scala 67:31]
    io.in[0].readData.bits.last <= UInt<1>("h1") @[AXISlaveReadMux.scala 68:33]
    io.in[1].readData.bits.data <= UInt<1>("h0") @[AXISlaveReadMux.scala 64:33]
    io.in[1].readData.valid <= UInt<1>("h0") @[AXISlaveReadMux.scala 65:29]
    io.in[1].readData.bits.resp <= UInt<1>("h0") @[AXISlaveReadMux.scala 66:33]
    io.in[1].readData.bits.id <= UInt<1>("h0") @[AXISlaveReadMux.scala 67:31]
    io.in[1].readData.bits.last <= UInt<1>("h1") @[AXISlaveReadMux.scala 68:33]
    node _io_in_0_readAddr_ready_T = and(arbiter.io.in[0].ready, mask[0]) @[AXISlaveReadMux.scala 72:55]
    io.in[0].readAddr.ready <= _io_in_0_readAddr_ready_T @[AXISlaveReadMux.scala 72:29]
    node _arbiter_io_in_0_valid_T = and(io.in[0].readAddr.valid, mask[0]) @[AXISlaveReadMux.scala 73:55]
    arbiter.io.in[0].valid <= _arbiter_io_in_0_valid_T @[AXISlaveReadMux.scala 73:28]
    arbiter.io.in[0].bits <= UInt<1>("h0") @[AXISlaveReadMux.scala 74:27]
    node _io_in_1_readAddr_ready_T = and(arbiter.io.in[1].ready, mask[1]) @[AXISlaveReadMux.scala 72:55]
    io.in[1].readAddr.ready <= _io_in_1_readAddr_ready_T @[AXISlaveReadMux.scala 72:29]
    node _arbiter_io_in_1_valid_T = and(io.in[1].readAddr.valid, mask[1]) @[AXISlaveReadMux.scala 73:55]
    arbiter.io.in[1].valid <= _arbiter_io_in_1_valid_T @[AXISlaveReadMux.scala 73:28]
    arbiter.io.in[1].bits <= UInt<1>("h0") @[AXISlaveReadMux.scala 74:27]
    io.out.readAddr.valid <= ar_determined @[AXISlaveReadMux.scala 77:25]
    node _T = eq(UInt<2>("h0"), state) @[AXISlaveReadMux.scala 79:16]
    when _T : @[AXISlaveReadMux.scala 79:16]
      when outstanding : @[AXISlaveReadMux.scala 81:24]
        state <= UInt<2>("h1") @[AXISlaveReadMux.scala 82:15]
    else :
      node _T_1 = eq(UInt<2>("h1"), state) @[AXISlaveReadMux.scala 79:16]
      when _T_1 : @[AXISlaveReadMux.scala 79:16]
        node _T_2 = and(io.out.readData.ready, io.out.readData.valid) @[Decoupled.scala 52:35]
        when _T_2 : @[AXISlaveReadMux.scala 86:33]
          state <= UInt<2>("h2") @[AXISlaveReadMux.scala 87:15]
      else :
        node _T_3 = eq(UInt<2>("h2"), state) @[AXISlaveReadMux.scala 79:16]
        when _T_3 : @[AXISlaveReadMux.scala 79:16]
          node _T_4 = or(chosen_reg, UInt<1>("h0"))
          node _T_5 = bits(_T_4, 0, 0)
          node _T_6 = and(io.in[_T_5].readData.ready, io.in[_T_5].readData.valid) @[Decoupled.scala 52:35]
          when _T_6 : @[AXISlaveReadMux.scala 91:44]
            state <= UInt<2>("h0") @[AXISlaveReadMux.scala 92:15]
    node _T_7 = eq(state, UInt<2>("h0")) @[AXISlaveReadMux.scala 97:14]
    when _T_7 : @[AXISlaveReadMux.scala 97:24]
      mask[0] <= UInt<1>("h1") @[AXISlaveReadMux.scala 98:20]
      mask[1] <= UInt<1>("h1") @[AXISlaveReadMux.scala 98:20]
      when arbiter.io.out.valid : @[AXISlaveReadMux.scala 99:31]
        chosen_reg <= arbiter.io.chosen @[AXISlaveReadMux.scala 100:18]
        address_reg <= io.in[arbiter.io.chosen].readAddr.bits @[AXISlaveReadMux.scala 101:19]
        ar_determined <= UInt<1>("h1") @[AXISlaveReadMux.scala 102:21]
      io.out.readData.ready <= UInt<1>("h0") @[AXISlaveReadMux.scala 104:27]
    else :
      node _T_8 = eq(state, UInt<2>("h1")) @[AXISlaveReadMux.scala 106:19]
      when _T_8 : @[AXISlaveReadMux.scala 106:33]
        mask[0] <= UInt<1>("h0") @[AXISlaveReadMux.scala 107:22]
        mask[1] <= UInt<1>("h0") @[AXISlaveReadMux.scala 107:22]
        node _T_9 = and(io.out.readAddr.ready, io.out.readAddr.valid) @[Decoupled.scala 52:35]
        when _T_9 : @[AXISlaveReadMux.scala 108:33]
          ar_determined <= UInt<1>("h0") @[AXISlaveReadMux.scala 109:23]
        node _T_10 = and(io.out.readData.ready, io.out.readData.valid) @[Decoupled.scala 52:35]
        when _T_10 : @[AXISlaveReadMux.scala 111:33]
          data_reg <= io.out.readData.bits @[AXISlaveReadMux.scala 112:18]
        io.out.readData.ready <= UInt<1>("h1") @[AXISlaveReadMux.scala 114:29]
      else :
        node _T_11 = eq(state, UInt<2>("h2")) @[AXISlaveReadMux.scala 116:19]
        when _T_11 : @[AXISlaveReadMux.scala 116:31]
          mask[0] <= UInt<1>("h0") @[AXISlaveReadMux.scala 117:20]
          mask[1] <= UInt<1>("h0") @[AXISlaveReadMux.scala 117:20]
          node _T_12 = or(chosen_reg, UInt<1>("h0"))
          node _T_13 = bits(_T_12, 0, 0)
          io.in[_T_13].readData.valid <= UInt<1>("h1") @[AXISlaveReadMux.scala 118:38]
    io.out.readAddr.bits <= address_reg @[AXISlaveReadMux.scala 121:24]
    node _T_14 = or(chosen_reg, UInt<1>("h0"))
    node _T_15 = bits(_T_14, 0, 0)
    io.in[_T_15].readData.bits <= data_reg @[AXISlaveReadMux.scala 122:35]

  module RRArbiter_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}, chosen : UInt<1>}

    wire choice : UInt
    choice <= UInt<1>("h1")
    io.chosen <= choice @[Arbiter.scala 54:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 55:16]
    io.out.bits <= io.in[io.chosen].bits @[Arbiter.scala 56:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 52:35]
    reg lastGrant : UInt<1>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 19:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 20:18]
      lastGrant <= io.chosen @[Reg.scala 20:22]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 81:49]
    node grantMask_1 = gt(UInt<1>("h1"), lastGrant) @[Arbiter.scala 81:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 82:76]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 82:76]
    node _ctrl_T = or(validMask_0, validMask_1) @[Arbiter.scala 45:68]
    node _ctrl_T_1 = or(_ctrl_T, io.in[0].valid) @[Arbiter.scala 45:68]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_2 = eq(_ctrl_T, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_3 = eq(_ctrl_T_1, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 86:34]
    node _T_1 = or(_T, ctrl_2) @[Arbiter.scala 86:50]
    node _T_2 = and(ctrl_1, grantMask_1) @[Arbiter.scala 86:34]
    node _T_3 = or(_T_2, ctrl_3) @[Arbiter.scala 86:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 74:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 74:16]
    node _io_in_1_ready_T = and(_T_3, io.out.ready) @[Arbiter.scala 74:21]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 74:16]
    when io.in[0].valid : @[Arbiter.scala 91:26]
      choice <= UInt<1>("h0") @[Arbiter.scala 91:35]
    when validMask_1 : @[Arbiter.scala 93:24]
      choice <= UInt<1>("h1") @[Arbiter.scala 93:33]

  module AXISlaveReadMux_2 :
    input clock : Clock
    input reset : Reset
    output io : { out : { readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, in : { flip readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}[2]}

    wire _mask_WIRE : UInt<1>[2] @[AXISlaveReadMux.scala 24:33]
    _mask_WIRE[0] <= UInt<1>("h1") @[AXISlaveReadMux.scala 24:33]
    _mask_WIRE[1] <= UInt<1>("h1") @[AXISlaveReadMux.scala 24:33]
    wire mask : UInt<1>[2]
    mask <= _mask_WIRE
    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[AXISlaveReadMux.scala 30:22]
    node _outstanding_T = or(io.in[0].readAddr.valid, io.in[1].readAddr.valid) @[AXISlaveReadMux.scala 33:95]
    wire outstanding : UInt<1>
    outstanding <= _outstanding_T
    inst arbiter of RRArbiter_2 @[AXISlaveReadMux.scala 35:23]
    arbiter.clock <= clock
    arbiter.reset <= reset
    reg chosen_reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveReadMux.scala 36:27]
    reg ar_determined : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveReadMux.scala 37:30]
    wire _address_reg_WIRE : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}
    _address_reg_WIRE.qos is invalid
    _address_reg_WIRE.prot is invalid
    _address_reg_WIRE.cache is invalid
    _address_reg_WIRE.lock is invalid
    _address_reg_WIRE.burst is invalid
    _address_reg_WIRE.size <= UInt<1>("h0")
    _address_reg_WIRE.len is invalid
    _address_reg_WIRE.region is invalid
    _address_reg_WIRE.addr <= UInt<1>("h0")
    _address_reg_WIRE.id <= UInt<1>("h0")
    reg address_reg : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}, clock with :
      reset => (reset, _address_reg_WIRE) @[AXISlaveReadMux.scala 38:28]
    wire _data_reg_WIRE : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}
    _data_reg_WIRE.last <= UInt<1>("h0")
    _data_reg_WIRE.resp <= UInt<1>("h0")
    _data_reg_WIRE.data <= UInt<1>("h0")
    _data_reg_WIRE.id <= UInt<1>("h0")
    reg data_reg : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}, clock with :
      reset => (reset, _data_reg_WIRE) @[AXISlaveReadMux.scala 43:25]
    io.out.readAddr.bits.qos is invalid @[AXISlaveReadMux.scala 51:28]
    io.out.readAddr.bits.len is invalid @[AXISlaveReadMux.scala 52:28]
    io.out.readAddr.bits.cache is invalid @[AXISlaveReadMux.scala 53:30]
    io.out.readAddr.bits.lock is invalid @[AXISlaveReadMux.scala 54:29]
    io.out.readAddr.bits.size <= UInt<1>("h0") @[AXISlaveReadMux.scala 55:29]
    io.out.readAddr.bits.id <= UInt<1>("h0") @[AXISlaveReadMux.scala 56:27]
    io.out.readAddr.bits.prot is invalid @[AXISlaveReadMux.scala 57:29]
    io.out.readAddr.bits.region is invalid @[AXISlaveReadMux.scala 58:31]
    io.out.readAddr.bits.burst is invalid @[AXISlaveReadMux.scala 59:30]
    io.out.readData.ready <= UInt<1>("h0") @[AXISlaveReadMux.scala 60:25]
    arbiter.io.out.ready <= UInt<1>("h1") @[AXISlaveReadMux.scala 61:24]
    io.in[0].readData.bits.data <= UInt<1>("h0") @[AXISlaveReadMux.scala 64:33]
    io.in[0].readData.valid <= UInt<1>("h0") @[AXISlaveReadMux.scala 65:29]
    io.in[0].readData.bits.resp <= UInt<1>("h0") @[AXISlaveReadMux.scala 66:33]
    io.in[0].readData.bits.id <= UInt<1>("h0") @[AXISlaveReadMux.scala 67:31]
    io.in[0].readData.bits.last <= UInt<1>("h1") @[AXISlaveReadMux.scala 68:33]
    io.in[1].readData.bits.data <= UInt<1>("h0") @[AXISlaveReadMux.scala 64:33]
    io.in[1].readData.valid <= UInt<1>("h0") @[AXISlaveReadMux.scala 65:29]
    io.in[1].readData.bits.resp <= UInt<1>("h0") @[AXISlaveReadMux.scala 66:33]
    io.in[1].readData.bits.id <= UInt<1>("h0") @[AXISlaveReadMux.scala 67:31]
    io.in[1].readData.bits.last <= UInt<1>("h1") @[AXISlaveReadMux.scala 68:33]
    node _io_in_0_readAddr_ready_T = and(arbiter.io.in[0].ready, mask[0]) @[AXISlaveReadMux.scala 72:55]
    io.in[0].readAddr.ready <= _io_in_0_readAddr_ready_T @[AXISlaveReadMux.scala 72:29]
    node _arbiter_io_in_0_valid_T = and(io.in[0].readAddr.valid, mask[0]) @[AXISlaveReadMux.scala 73:55]
    arbiter.io.in[0].valid <= _arbiter_io_in_0_valid_T @[AXISlaveReadMux.scala 73:28]
    arbiter.io.in[0].bits <= UInt<1>("h0") @[AXISlaveReadMux.scala 74:27]
    node _io_in_1_readAddr_ready_T = and(arbiter.io.in[1].ready, mask[1]) @[AXISlaveReadMux.scala 72:55]
    io.in[1].readAddr.ready <= _io_in_1_readAddr_ready_T @[AXISlaveReadMux.scala 72:29]
    node _arbiter_io_in_1_valid_T = and(io.in[1].readAddr.valid, mask[1]) @[AXISlaveReadMux.scala 73:55]
    arbiter.io.in[1].valid <= _arbiter_io_in_1_valid_T @[AXISlaveReadMux.scala 73:28]
    arbiter.io.in[1].bits <= UInt<1>("h0") @[AXISlaveReadMux.scala 74:27]
    io.out.readAddr.valid <= ar_determined @[AXISlaveReadMux.scala 77:25]
    node _T = eq(UInt<2>("h0"), state) @[AXISlaveReadMux.scala 79:16]
    when _T : @[AXISlaveReadMux.scala 79:16]
      when outstanding : @[AXISlaveReadMux.scala 81:24]
        state <= UInt<2>("h1") @[AXISlaveReadMux.scala 82:15]
    else :
      node _T_1 = eq(UInt<2>("h1"), state) @[AXISlaveReadMux.scala 79:16]
      when _T_1 : @[AXISlaveReadMux.scala 79:16]
        node _T_2 = and(io.out.readData.ready, io.out.readData.valid) @[Decoupled.scala 52:35]
        when _T_2 : @[AXISlaveReadMux.scala 86:33]
          state <= UInt<2>("h2") @[AXISlaveReadMux.scala 87:15]
      else :
        node _T_3 = eq(UInt<2>("h2"), state) @[AXISlaveReadMux.scala 79:16]
        when _T_3 : @[AXISlaveReadMux.scala 79:16]
          node _T_4 = or(chosen_reg, UInt<1>("h0"))
          node _T_5 = bits(_T_4, 0, 0)
          node _T_6 = and(io.in[_T_5].readData.ready, io.in[_T_5].readData.valid) @[Decoupled.scala 52:35]
          when _T_6 : @[AXISlaveReadMux.scala 91:44]
            state <= UInt<2>("h0") @[AXISlaveReadMux.scala 92:15]
    node _T_7 = eq(state, UInt<2>("h0")) @[AXISlaveReadMux.scala 97:14]
    when _T_7 : @[AXISlaveReadMux.scala 97:24]
      mask[0] <= UInt<1>("h1") @[AXISlaveReadMux.scala 98:20]
      mask[1] <= UInt<1>("h1") @[AXISlaveReadMux.scala 98:20]
      when arbiter.io.out.valid : @[AXISlaveReadMux.scala 99:31]
        chosen_reg <= arbiter.io.chosen @[AXISlaveReadMux.scala 100:18]
        address_reg <= io.in[arbiter.io.chosen].readAddr.bits @[AXISlaveReadMux.scala 101:19]
        ar_determined <= UInt<1>("h1") @[AXISlaveReadMux.scala 102:21]
      io.out.readData.ready <= UInt<1>("h0") @[AXISlaveReadMux.scala 104:27]
    else :
      node _T_8 = eq(state, UInt<2>("h1")) @[AXISlaveReadMux.scala 106:19]
      when _T_8 : @[AXISlaveReadMux.scala 106:33]
        mask[0] <= UInt<1>("h0") @[AXISlaveReadMux.scala 107:22]
        mask[1] <= UInt<1>("h0") @[AXISlaveReadMux.scala 107:22]
        node _T_9 = and(io.out.readAddr.ready, io.out.readAddr.valid) @[Decoupled.scala 52:35]
        when _T_9 : @[AXISlaveReadMux.scala 108:33]
          ar_determined <= UInt<1>("h0") @[AXISlaveReadMux.scala 109:23]
        node _T_10 = and(io.out.readData.ready, io.out.readData.valid) @[Decoupled.scala 52:35]
        when _T_10 : @[AXISlaveReadMux.scala 111:33]
          data_reg <= io.out.readData.bits @[AXISlaveReadMux.scala 112:18]
        io.out.readData.ready <= UInt<1>("h1") @[AXISlaveReadMux.scala 114:29]
      else :
        node _T_11 = eq(state, UInt<2>("h2")) @[AXISlaveReadMux.scala 116:19]
        when _T_11 : @[AXISlaveReadMux.scala 116:31]
          mask[0] <= UInt<1>("h0") @[AXISlaveReadMux.scala 117:20]
          mask[1] <= UInt<1>("h0") @[AXISlaveReadMux.scala 117:20]
          node _T_12 = or(chosen_reg, UInt<1>("h0"))
          node _T_13 = bits(_T_12, 0, 0)
          io.in[_T_13].readData.valid <= UInt<1>("h1") @[AXISlaveReadMux.scala 118:38]
    io.out.readAddr.bits <= address_reg @[AXISlaveReadMux.scala 121:24]
    node _T_14 = or(chosen_reg, UInt<1>("h0"))
    node _T_15 = bits(_T_14, 0, 0)
    io.in[_T_15].readData.bits <= data_reg @[AXISlaveReadMux.scala 122:35]

  module AXIWriteBus :
    input clock : Clock
    input reset : Reset
    output io : { master : { flip writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}}, slave : { writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}}[3]}

    node _write_port_T = geq(io.master.writeAddr.bits.addr, UInt<1>("h0")) @[AXIWriteBus.scala 28:36]
    node _write_port_T_1 = lt(io.master.writeAddr.bits.addr, UInt<7>("h64")) @[AXIWriteBus.scala 28:87]
    node _write_port_T_2 = and(_write_port_T, _write_port_T_1) @[AXIWriteBus.scala 28:54]
    node _write_port_T_3 = geq(io.master.writeAddr.bits.addr, UInt<16>("h8000")) @[AXIWriteBus.scala 28:36]
    node _write_port_T_4 = lt(io.master.writeAddr.bits.addr, UInt<16>("h8800")) @[AXIWriteBus.scala 28:87]
    node _write_port_T_5 = and(_write_port_T_3, _write_port_T_4) @[AXIWriteBus.scala 28:54]
    node _write_port_T_6 = geq(io.master.writeAddr.bits.addr, UInt<17>("h10000")) @[AXIWriteBus.scala 28:36]
    node _write_port_T_7 = lt(io.master.writeAddr.bits.addr, UInt<17>("h10800")) @[AXIWriteBus.scala 28:87]
    node _write_port_T_8 = and(_write_port_T_6, _write_port_T_7) @[AXIWriteBus.scala 28:54]
    node _write_port_T_9 = mux(_write_port_T_8, UInt<2>("h2"), UInt<1>("h0")) @[Mux.scala 101:16]
    node _write_port_T_10 = mux(_write_port_T_5, UInt<1>("h1"), _write_port_T_9) @[Mux.scala 101:16]
    node write_port = mux(_write_port_T_2, UInt<1>("h0"), _write_port_T_10) @[Mux.scala 101:16]
    reg write_port_reg : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXIWriteBus.scala 31:31]
    reg write_addr_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXIWriteBus.scala 33:31]
    reg write_addr_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 34:37]
    reg write_addr_reg_id : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[AXIWriteBus.scala 35:34]
    reg write_addr_reg_size : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXIWriteBus.scala 36:36]
    reg write_data_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXIWriteBus.scala 38:31]
    reg write_data_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 39:37]
    reg write_data_reg_strb : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[AXIWriteBus.scala 40:36]
    reg write_data_reg_last : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 41:36]
    reg write_resp_reg : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[AXIWriteBus.scala 43:31]
    reg write_resp_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 44:37]
    reg write_resp_reg_id : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[AXIWriteBus.scala 45:34]
    reg w_outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 48:30]
    reg aw_outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 49:31]
    reg b_outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 50:30]
    io.slave[0].writeData.valid <= UInt<1>("h0") @[AXIWriteBus.scala 54:33]
    io.slave[0].writeData.bits.data <= UInt<1>("h0") @[AXIWriteBus.scala 55:37]
    io.slave[0].writeData.bits.strb <= UInt<1>("h0") @[AXIWriteBus.scala 56:37]
    io.slave[0].writeData.bits.last <= UInt<1>("h0") @[AXIWriteBus.scala 57:37]
    io.slave[0].writeAddr.valid <= UInt<1>("h0") @[AXIWriteBus.scala 58:33]
    io.slave[0].writeAddr.bits.addr <= UInt<1>("h0") @[AXIWriteBus.scala 59:37]
    io.slave[0].writeAddr.bits.id <= UInt<1>("h0") @[AXIWriteBus.scala 60:35]
    io.slave[0].writeAddr.bits.region is invalid @[AXIWriteBus.scala 61:39]
    io.slave[0].writeAddr.bits.len is invalid @[AXIWriteBus.scala 62:36]
    io.slave[0].writeAddr.bits.size <= UInt<1>("h0") @[AXIWriteBus.scala 63:37]
    io.slave[0].writeAddr.bits.burst is invalid @[AXIWriteBus.scala 64:38]
    io.slave[0].writeAddr.bits.lock is invalid @[AXIWriteBus.scala 65:37]
    io.slave[0].writeAddr.bits.cache is invalid @[AXIWriteBus.scala 66:38]
    io.slave[0].writeAddr.bits.prot is invalid @[AXIWriteBus.scala 67:37]
    io.slave[0].writeAddr.bits.qos is invalid @[AXIWriteBus.scala 68:36]
    io.slave[0].writeResp.ready <= UInt<1>("h0") @[AXIWriteBus.scala 69:33]
    io.slave[1].writeData.valid <= UInt<1>("h0") @[AXIWriteBus.scala 54:33]
    io.slave[1].writeData.bits.data <= UInt<1>("h0") @[AXIWriteBus.scala 55:37]
    io.slave[1].writeData.bits.strb <= UInt<1>("h0") @[AXIWriteBus.scala 56:37]
    io.slave[1].writeData.bits.last <= UInt<1>("h0") @[AXIWriteBus.scala 57:37]
    io.slave[1].writeAddr.valid <= UInt<1>("h0") @[AXIWriteBus.scala 58:33]
    io.slave[1].writeAddr.bits.addr <= UInt<1>("h0") @[AXIWriteBus.scala 59:37]
    io.slave[1].writeAddr.bits.id <= UInt<1>("h0") @[AXIWriteBus.scala 60:35]
    io.slave[1].writeAddr.bits.region is invalid @[AXIWriteBus.scala 61:39]
    io.slave[1].writeAddr.bits.len is invalid @[AXIWriteBus.scala 62:36]
    io.slave[1].writeAddr.bits.size <= UInt<1>("h0") @[AXIWriteBus.scala 63:37]
    io.slave[1].writeAddr.bits.burst is invalid @[AXIWriteBus.scala 64:38]
    io.slave[1].writeAddr.bits.lock is invalid @[AXIWriteBus.scala 65:37]
    io.slave[1].writeAddr.bits.cache is invalid @[AXIWriteBus.scala 66:38]
    io.slave[1].writeAddr.bits.prot is invalid @[AXIWriteBus.scala 67:37]
    io.slave[1].writeAddr.bits.qos is invalid @[AXIWriteBus.scala 68:36]
    io.slave[1].writeResp.ready <= UInt<1>("h0") @[AXIWriteBus.scala 69:33]
    io.slave[2].writeData.valid <= UInt<1>("h0") @[AXIWriteBus.scala 54:33]
    io.slave[2].writeData.bits.data <= UInt<1>("h0") @[AXIWriteBus.scala 55:37]
    io.slave[2].writeData.bits.strb <= UInt<1>("h0") @[AXIWriteBus.scala 56:37]
    io.slave[2].writeData.bits.last <= UInt<1>("h0") @[AXIWriteBus.scala 57:37]
    io.slave[2].writeAddr.valid <= UInt<1>("h0") @[AXIWriteBus.scala 58:33]
    io.slave[2].writeAddr.bits.addr <= UInt<1>("h0") @[AXIWriteBus.scala 59:37]
    io.slave[2].writeAddr.bits.id <= UInt<1>("h0") @[AXIWriteBus.scala 60:35]
    io.slave[2].writeAddr.bits.region is invalid @[AXIWriteBus.scala 61:39]
    io.slave[2].writeAddr.bits.len is invalid @[AXIWriteBus.scala 62:36]
    io.slave[2].writeAddr.bits.size <= UInt<1>("h0") @[AXIWriteBus.scala 63:37]
    io.slave[2].writeAddr.bits.burst is invalid @[AXIWriteBus.scala 64:38]
    io.slave[2].writeAddr.bits.lock is invalid @[AXIWriteBus.scala 65:37]
    io.slave[2].writeAddr.bits.cache is invalid @[AXIWriteBus.scala 66:38]
    io.slave[2].writeAddr.bits.prot is invalid @[AXIWriteBus.scala 67:37]
    io.slave[2].writeAddr.bits.qos is invalid @[AXIWriteBus.scala 68:36]
    io.slave[2].writeResp.ready <= UInt<1>("h0") @[AXIWriteBus.scala 69:33]
    node _io_master_writeData_ready_T = not(w_outstanding) @[AXIWriteBus.scala 72:32]
    io.master.writeData.ready <= _io_master_writeData_ready_T @[AXIWriteBus.scala 72:29]
    node _io_master_writeAddr_ready_T = not(aw_outstanding) @[AXIWriteBus.scala 73:32]
    io.master.writeAddr.ready <= _io_master_writeAddr_ready_T @[AXIWriteBus.scala 73:29]
    io.master.writeResp.valid <= write_resp_reg_valid @[AXIWriteBus.scala 74:29]
    io.master.writeResp.bits.resp <= write_resp_reg @[AXIWriteBus.scala 75:33]
    io.master.writeResp.bits.id <= write_resp_reg_id @[AXIWriteBus.scala 76:31]
    node _T = and(io.master.writeAddr.ready, io.master.writeAddr.valid) @[Decoupled.scala 52:35]
    when _T : @[AXIWriteBus.scala 80:34]
      aw_outstanding <= UInt<1>("h1") @[AXIWriteBus.scala 81:20]
      write_port_reg <= write_port @[AXIWriteBus.scala 82:20]
      write_addr_reg <= io.master.writeAddr.bits.addr @[AXIWriteBus.scala 83:20]
      write_addr_reg_valid <= UInt<1>("h1") @[AXIWriteBus.scala 84:26]
      write_addr_reg_id <= io.master.writeAddr.bits.id @[AXIWriteBus.scala 85:23]
      write_addr_reg_size <= io.master.writeAddr.bits.size @[AXIWriteBus.scala 86:25]
    node _T_1 = and(io.master.writeData.ready, io.master.writeData.valid) @[Decoupled.scala 52:35]
    when _T_1 : @[AXIWriteBus.scala 88:34]
      w_outstanding <= UInt<1>("h1") @[AXIWriteBus.scala 89:19]
      write_data_reg_strb <= io.master.writeData.bits.strb @[AXIWriteBus.scala 90:25]
      write_data_reg <= io.master.writeData.bits.data @[AXIWriteBus.scala 91:20]
      write_data_reg_valid <= UInt<1>("h1") @[AXIWriteBus.scala 92:26]
      write_data_reg_last <= io.master.writeData.bits.last @[AXIWriteBus.scala 93:25]
    node _T_2 = bits(write_port_reg, 1, 0)
    node _T_3 = and(write_addr_reg_valid, io.slave[_T_2].writeAddr.ready) @[AXIWriteBus.scala 97:29]
    when _T_3 : @[AXIWriteBus.scala 97:74]
      write_addr_reg_valid <= UInt<1>("h0") @[AXIWriteBus.scala 98:28]
    node _T_4 = bits(write_port_reg, 1, 0)
    node _T_5 = and(write_data_reg_valid, io.slave[_T_4].writeData.ready) @[AXIWriteBus.scala 100:29]
    when _T_5 : @[AXIWriteBus.scala 100:74]
      write_data_reg_valid <= UInt<1>("h0") @[AXIWriteBus.scala 101:28]
    node _T_6 = and(aw_outstanding, w_outstanding) @[AXIWriteBus.scala 105:23]
    node _T_7 = and(_T_6, write_resp_reg_valid) @[AXIWriteBus.scala 105:40]
    node _T_8 = and(_T_7, io.master.writeResp.ready) @[AXIWriteBus.scala 105:64]
    when _T_8 : @[AXIWriteBus.scala 105:94]
      write_resp_reg_valid <= UInt<1>("h0") @[AXIWriteBus.scala 106:28]
      aw_outstanding <= UInt<1>("h0") @[AXIWriteBus.scala 107:22]
      w_outstanding <= UInt<1>("h0") @[AXIWriteBus.scala 108:21]
      b_outstanding <= UInt<1>("h0") @[AXIWriteBus.scala 109:21]
    when aw_outstanding : @[AXIWriteBus.scala 112:24]
      node _T_9 = bits(write_port_reg, 1, 0)
      node _T_10 = and(io.slave[_T_9].writeResp.ready, io.slave[_T_9].writeResp.valid) @[Decoupled.scala 52:35]
      when _T_10 : @[AXIWriteBus.scala 114:50]
        b_outstanding <= UInt<1>("h1") @[AXIWriteBus.scala 115:21]
        write_resp_reg_valid <= UInt<1>("h1") @[AXIWriteBus.scala 116:28]
        node _write_resp_reg_T = bits(write_port_reg, 1, 0)
        write_resp_reg <= io.slave[_write_resp_reg_T].writeResp.bits.resp @[AXIWriteBus.scala 117:22]
        node _write_resp_reg_id_T = bits(write_port_reg, 1, 0)
        write_resp_reg_id <= io.slave[_write_resp_reg_id_T].writeResp.bits.id @[AXIWriteBus.scala 118:25]
      node _T_11 = bits(write_port_reg, 1, 0)
      io.slave[_T_11].writeAddr.bits.addr <= write_addr_reg @[AXIWriteBus.scala 121:50]
      node _T_12 = bits(write_port_reg, 1, 0)
      io.slave[_T_12].writeAddr.valid <= write_addr_reg_valid @[AXIWriteBus.scala 122:46]
      node _T_13 = bits(write_port_reg, 1, 0)
      io.slave[_T_13].writeAddr.bits.id <= write_addr_reg_id @[AXIWriteBus.scala 123:48]
      node _T_14 = bits(write_port_reg, 1, 0)
      io.slave[_T_14].writeAddr.bits.size <= write_addr_reg_size @[AXIWriteBus.scala 124:50]
      node _T_15 = bits(write_port_reg, 1, 0)
      io.slave[_T_15].writeData.bits.data <= write_data_reg @[AXIWriteBus.scala 125:50]
      node _T_16 = bits(write_port_reg, 1, 0)
      io.slave[_T_16].writeData.bits.strb <= write_data_reg_strb @[AXIWriteBus.scala 126:50]
      node _T_17 = bits(write_port_reg, 1, 0)
      io.slave[_T_17].writeData.valid <= write_data_reg_valid @[AXIWriteBus.scala 127:46]
      node _T_18 = bits(write_port_reg, 1, 0)
      io.slave[_T_18].writeData.bits.last <= write_data_reg_last @[AXIWriteBus.scala 128:50]
      node _T_19 = bits(write_port_reg, 1, 0)
      node _io_slave_writeResp_ready_T = not(b_outstanding) @[AXIWriteBus.scala 129:49]
      io.slave[_T_19].writeResp.ready <= _io_slave_writeResp_ready_T @[AXIWriteBus.scala 129:46]

  module AXIWriteBus_1 :
    input clock : Clock
    input reset : Reset
    output io : { master : { flip writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}}, slave : { writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}}[3]}

    node _write_port_T = geq(io.master.writeAddr.bits.addr, UInt<1>("h0")) @[AXIWriteBus.scala 28:36]
    node _write_port_T_1 = lt(io.master.writeAddr.bits.addr, UInt<7>("h64")) @[AXIWriteBus.scala 28:87]
    node _write_port_T_2 = and(_write_port_T, _write_port_T_1) @[AXIWriteBus.scala 28:54]
    node _write_port_T_3 = geq(io.master.writeAddr.bits.addr, UInt<16>("h8000")) @[AXIWriteBus.scala 28:36]
    node _write_port_T_4 = lt(io.master.writeAddr.bits.addr, UInt<16>("h8800")) @[AXIWriteBus.scala 28:87]
    node _write_port_T_5 = and(_write_port_T_3, _write_port_T_4) @[AXIWriteBus.scala 28:54]
    node _write_port_T_6 = geq(io.master.writeAddr.bits.addr, UInt<17>("h10000")) @[AXIWriteBus.scala 28:36]
    node _write_port_T_7 = lt(io.master.writeAddr.bits.addr, UInt<17>("h10800")) @[AXIWriteBus.scala 28:87]
    node _write_port_T_8 = and(_write_port_T_6, _write_port_T_7) @[AXIWriteBus.scala 28:54]
    node _write_port_T_9 = mux(_write_port_T_8, UInt<2>("h2"), UInt<1>("h0")) @[Mux.scala 101:16]
    node _write_port_T_10 = mux(_write_port_T_5, UInt<1>("h1"), _write_port_T_9) @[Mux.scala 101:16]
    node write_port = mux(_write_port_T_2, UInt<1>("h0"), _write_port_T_10) @[Mux.scala 101:16]
    reg write_port_reg : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXIWriteBus.scala 31:31]
    reg write_addr_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXIWriteBus.scala 33:31]
    reg write_addr_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 34:37]
    reg write_addr_reg_id : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[AXIWriteBus.scala 35:34]
    reg write_addr_reg_size : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXIWriteBus.scala 36:36]
    reg write_data_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXIWriteBus.scala 38:31]
    reg write_data_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 39:37]
    reg write_data_reg_strb : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[AXIWriteBus.scala 40:36]
    reg write_data_reg_last : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 41:36]
    reg write_resp_reg : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[AXIWriteBus.scala 43:31]
    reg write_resp_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 44:37]
    reg write_resp_reg_id : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[AXIWriteBus.scala 45:34]
    reg w_outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 48:30]
    reg aw_outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 49:31]
    reg b_outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 50:30]
    io.slave[0].writeData.valid <= UInt<1>("h0") @[AXIWriteBus.scala 54:33]
    io.slave[0].writeData.bits.data <= UInt<1>("h0") @[AXIWriteBus.scala 55:37]
    io.slave[0].writeData.bits.strb <= UInt<1>("h0") @[AXIWriteBus.scala 56:37]
    io.slave[0].writeData.bits.last <= UInt<1>("h0") @[AXIWriteBus.scala 57:37]
    io.slave[0].writeAddr.valid <= UInt<1>("h0") @[AXIWriteBus.scala 58:33]
    io.slave[0].writeAddr.bits.addr <= UInt<1>("h0") @[AXIWriteBus.scala 59:37]
    io.slave[0].writeAddr.bits.id <= UInt<1>("h0") @[AXIWriteBus.scala 60:35]
    io.slave[0].writeAddr.bits.region is invalid @[AXIWriteBus.scala 61:39]
    io.slave[0].writeAddr.bits.len is invalid @[AXIWriteBus.scala 62:36]
    io.slave[0].writeAddr.bits.size <= UInt<1>("h0") @[AXIWriteBus.scala 63:37]
    io.slave[0].writeAddr.bits.burst is invalid @[AXIWriteBus.scala 64:38]
    io.slave[0].writeAddr.bits.lock is invalid @[AXIWriteBus.scala 65:37]
    io.slave[0].writeAddr.bits.cache is invalid @[AXIWriteBus.scala 66:38]
    io.slave[0].writeAddr.bits.prot is invalid @[AXIWriteBus.scala 67:37]
    io.slave[0].writeAddr.bits.qos is invalid @[AXIWriteBus.scala 68:36]
    io.slave[0].writeResp.ready <= UInt<1>("h0") @[AXIWriteBus.scala 69:33]
    io.slave[1].writeData.valid <= UInt<1>("h0") @[AXIWriteBus.scala 54:33]
    io.slave[1].writeData.bits.data <= UInt<1>("h0") @[AXIWriteBus.scala 55:37]
    io.slave[1].writeData.bits.strb <= UInt<1>("h0") @[AXIWriteBus.scala 56:37]
    io.slave[1].writeData.bits.last <= UInt<1>("h0") @[AXIWriteBus.scala 57:37]
    io.slave[1].writeAddr.valid <= UInt<1>("h0") @[AXIWriteBus.scala 58:33]
    io.slave[1].writeAddr.bits.addr <= UInt<1>("h0") @[AXIWriteBus.scala 59:37]
    io.slave[1].writeAddr.bits.id <= UInt<1>("h0") @[AXIWriteBus.scala 60:35]
    io.slave[1].writeAddr.bits.region is invalid @[AXIWriteBus.scala 61:39]
    io.slave[1].writeAddr.bits.len is invalid @[AXIWriteBus.scala 62:36]
    io.slave[1].writeAddr.bits.size <= UInt<1>("h0") @[AXIWriteBus.scala 63:37]
    io.slave[1].writeAddr.bits.burst is invalid @[AXIWriteBus.scala 64:38]
    io.slave[1].writeAddr.bits.lock is invalid @[AXIWriteBus.scala 65:37]
    io.slave[1].writeAddr.bits.cache is invalid @[AXIWriteBus.scala 66:38]
    io.slave[1].writeAddr.bits.prot is invalid @[AXIWriteBus.scala 67:37]
    io.slave[1].writeAddr.bits.qos is invalid @[AXIWriteBus.scala 68:36]
    io.slave[1].writeResp.ready <= UInt<1>("h0") @[AXIWriteBus.scala 69:33]
    io.slave[2].writeData.valid <= UInt<1>("h0") @[AXIWriteBus.scala 54:33]
    io.slave[2].writeData.bits.data <= UInt<1>("h0") @[AXIWriteBus.scala 55:37]
    io.slave[2].writeData.bits.strb <= UInt<1>("h0") @[AXIWriteBus.scala 56:37]
    io.slave[2].writeData.bits.last <= UInt<1>("h0") @[AXIWriteBus.scala 57:37]
    io.slave[2].writeAddr.valid <= UInt<1>("h0") @[AXIWriteBus.scala 58:33]
    io.slave[2].writeAddr.bits.addr <= UInt<1>("h0") @[AXIWriteBus.scala 59:37]
    io.slave[2].writeAddr.bits.id <= UInt<1>("h0") @[AXIWriteBus.scala 60:35]
    io.slave[2].writeAddr.bits.region is invalid @[AXIWriteBus.scala 61:39]
    io.slave[2].writeAddr.bits.len is invalid @[AXIWriteBus.scala 62:36]
    io.slave[2].writeAddr.bits.size <= UInt<1>("h0") @[AXIWriteBus.scala 63:37]
    io.slave[2].writeAddr.bits.burst is invalid @[AXIWriteBus.scala 64:38]
    io.slave[2].writeAddr.bits.lock is invalid @[AXIWriteBus.scala 65:37]
    io.slave[2].writeAddr.bits.cache is invalid @[AXIWriteBus.scala 66:38]
    io.slave[2].writeAddr.bits.prot is invalid @[AXIWriteBus.scala 67:37]
    io.slave[2].writeAddr.bits.qos is invalid @[AXIWriteBus.scala 68:36]
    io.slave[2].writeResp.ready <= UInt<1>("h0") @[AXIWriteBus.scala 69:33]
    node _io_master_writeData_ready_T = not(w_outstanding) @[AXIWriteBus.scala 72:32]
    io.master.writeData.ready <= _io_master_writeData_ready_T @[AXIWriteBus.scala 72:29]
    node _io_master_writeAddr_ready_T = not(aw_outstanding) @[AXIWriteBus.scala 73:32]
    io.master.writeAddr.ready <= _io_master_writeAddr_ready_T @[AXIWriteBus.scala 73:29]
    io.master.writeResp.valid <= write_resp_reg_valid @[AXIWriteBus.scala 74:29]
    io.master.writeResp.bits.resp <= write_resp_reg @[AXIWriteBus.scala 75:33]
    io.master.writeResp.bits.id <= write_resp_reg_id @[AXIWriteBus.scala 76:31]
    node _T = and(io.master.writeAddr.ready, io.master.writeAddr.valid) @[Decoupled.scala 52:35]
    when _T : @[AXIWriteBus.scala 80:34]
      aw_outstanding <= UInt<1>("h1") @[AXIWriteBus.scala 81:20]
      write_port_reg <= write_port @[AXIWriteBus.scala 82:20]
      write_addr_reg <= io.master.writeAddr.bits.addr @[AXIWriteBus.scala 83:20]
      write_addr_reg_valid <= UInt<1>("h1") @[AXIWriteBus.scala 84:26]
      write_addr_reg_id <= io.master.writeAddr.bits.id @[AXIWriteBus.scala 85:23]
      write_addr_reg_size <= io.master.writeAddr.bits.size @[AXIWriteBus.scala 86:25]
    node _T_1 = and(io.master.writeData.ready, io.master.writeData.valid) @[Decoupled.scala 52:35]
    when _T_1 : @[AXIWriteBus.scala 88:34]
      w_outstanding <= UInt<1>("h1") @[AXIWriteBus.scala 89:19]
      write_data_reg_strb <= io.master.writeData.bits.strb @[AXIWriteBus.scala 90:25]
      write_data_reg <= io.master.writeData.bits.data @[AXIWriteBus.scala 91:20]
      write_data_reg_valid <= UInt<1>("h1") @[AXIWriteBus.scala 92:26]
      write_data_reg_last <= io.master.writeData.bits.last @[AXIWriteBus.scala 93:25]
    node _T_2 = bits(write_port_reg, 1, 0)
    node _T_3 = and(write_addr_reg_valid, io.slave[_T_2].writeAddr.ready) @[AXIWriteBus.scala 97:29]
    when _T_3 : @[AXIWriteBus.scala 97:74]
      write_addr_reg_valid <= UInt<1>("h0") @[AXIWriteBus.scala 98:28]
    node _T_4 = bits(write_port_reg, 1, 0)
    node _T_5 = and(write_data_reg_valid, io.slave[_T_4].writeData.ready) @[AXIWriteBus.scala 100:29]
    when _T_5 : @[AXIWriteBus.scala 100:74]
      write_data_reg_valid <= UInt<1>("h0") @[AXIWriteBus.scala 101:28]
    node _T_6 = and(aw_outstanding, w_outstanding) @[AXIWriteBus.scala 105:23]
    node _T_7 = and(_T_6, write_resp_reg_valid) @[AXIWriteBus.scala 105:40]
    node _T_8 = and(_T_7, io.master.writeResp.ready) @[AXIWriteBus.scala 105:64]
    when _T_8 : @[AXIWriteBus.scala 105:94]
      write_resp_reg_valid <= UInt<1>("h0") @[AXIWriteBus.scala 106:28]
      aw_outstanding <= UInt<1>("h0") @[AXIWriteBus.scala 107:22]
      w_outstanding <= UInt<1>("h0") @[AXIWriteBus.scala 108:21]
      b_outstanding <= UInt<1>("h0") @[AXIWriteBus.scala 109:21]
    when aw_outstanding : @[AXIWriteBus.scala 112:24]
      node _T_9 = bits(write_port_reg, 1, 0)
      node _T_10 = and(io.slave[_T_9].writeResp.ready, io.slave[_T_9].writeResp.valid) @[Decoupled.scala 52:35]
      when _T_10 : @[AXIWriteBus.scala 114:50]
        b_outstanding <= UInt<1>("h1") @[AXIWriteBus.scala 115:21]
        write_resp_reg_valid <= UInt<1>("h1") @[AXIWriteBus.scala 116:28]
        node _write_resp_reg_T = bits(write_port_reg, 1, 0)
        write_resp_reg <= io.slave[_write_resp_reg_T].writeResp.bits.resp @[AXIWriteBus.scala 117:22]
        node _write_resp_reg_id_T = bits(write_port_reg, 1, 0)
        write_resp_reg_id <= io.slave[_write_resp_reg_id_T].writeResp.bits.id @[AXIWriteBus.scala 118:25]
      node _T_11 = bits(write_port_reg, 1, 0)
      io.slave[_T_11].writeAddr.bits.addr <= write_addr_reg @[AXIWriteBus.scala 121:50]
      node _T_12 = bits(write_port_reg, 1, 0)
      io.slave[_T_12].writeAddr.valid <= write_addr_reg_valid @[AXIWriteBus.scala 122:46]
      node _T_13 = bits(write_port_reg, 1, 0)
      io.slave[_T_13].writeAddr.bits.id <= write_addr_reg_id @[AXIWriteBus.scala 123:48]
      node _T_14 = bits(write_port_reg, 1, 0)
      io.slave[_T_14].writeAddr.bits.size <= write_addr_reg_size @[AXIWriteBus.scala 124:50]
      node _T_15 = bits(write_port_reg, 1, 0)
      io.slave[_T_15].writeData.bits.data <= write_data_reg @[AXIWriteBus.scala 125:50]
      node _T_16 = bits(write_port_reg, 1, 0)
      io.slave[_T_16].writeData.bits.strb <= write_data_reg_strb @[AXIWriteBus.scala 126:50]
      node _T_17 = bits(write_port_reg, 1, 0)
      io.slave[_T_17].writeData.valid <= write_data_reg_valid @[AXIWriteBus.scala 127:46]
      node _T_18 = bits(write_port_reg, 1, 0)
      io.slave[_T_18].writeData.bits.last <= write_data_reg_last @[AXIWriteBus.scala 128:50]
      node _T_19 = bits(write_port_reg, 1, 0)
      node _io_slave_writeResp_ready_T = not(b_outstanding) @[AXIWriteBus.scala 129:49]
      io.slave[_T_19].writeResp.ready <= _io_slave_writeResp_ready_T @[AXIWriteBus.scala 129:46]

  module RRArbiter_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}, chosen : UInt<1>}

    wire choice : UInt
    choice <= UInt<1>("h1")
    io.chosen <= choice @[Arbiter.scala 54:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 55:16]
    io.out.bits <= io.in[io.chosen].bits @[Arbiter.scala 56:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 52:35]
    reg lastGrant : UInt<1>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 19:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 20:18]
      lastGrant <= io.chosen @[Reg.scala 20:22]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 81:49]
    node grantMask_1 = gt(UInt<1>("h1"), lastGrant) @[Arbiter.scala 81:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 82:76]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 82:76]
    node _ctrl_T = or(validMask_0, validMask_1) @[Arbiter.scala 45:68]
    node _ctrl_T_1 = or(_ctrl_T, io.in[0].valid) @[Arbiter.scala 45:68]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_2 = eq(_ctrl_T, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_3 = eq(_ctrl_T_1, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 86:34]
    node _T_1 = or(_T, ctrl_2) @[Arbiter.scala 86:50]
    node _T_2 = and(ctrl_1, grantMask_1) @[Arbiter.scala 86:34]
    node _T_3 = or(_T_2, ctrl_3) @[Arbiter.scala 86:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 74:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 74:16]
    node _io_in_1_ready_T = and(_T_3, io.out.ready) @[Arbiter.scala 74:21]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 74:16]
    when io.in[0].valid : @[Arbiter.scala 91:26]
      choice <= UInt<1>("h0") @[Arbiter.scala 91:35]
    when validMask_1 : @[Arbiter.scala 93:24]
      choice <= UInt<1>("h1") @[Arbiter.scala 93:33]

  module AXISlaveWriteMux :
    input clock : Clock
    input reset : Reset
    output io : { out : { writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}}, in : { flip writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}}[2]}

    wire _mask_WIRE : UInt<1>[2] @[AXISlaveWriteMux.scala 26:33]
    _mask_WIRE[0] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 26:33]
    _mask_WIRE[1] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 26:33]
    wire mask : UInt<1>[2]
    mask <= _mask_WIRE
    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[AXISlaveWriteMux.scala 32:22]
    node _outstanding_T = or(io.in[0].writeAddr.valid, io.in[1].writeAddr.valid) @[AXISlaveWriteMux.scala 35:96]
    wire outstanding : UInt<1>
    outstanding <= _outstanding_T
    inst arbiter of RRArbiter_3 @[AXISlaveWriteMux.scala 38:23]
    arbiter.clock <= clock
    arbiter.reset <= reset
    reg chosen_reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveWriteMux.scala 39:27]
    reg w_determined : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveWriteMux.scala 40:29]
    reg aw_determined : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveWriteMux.scala 41:30]
    wire _address_reg_WIRE : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}
    _address_reg_WIRE.qos is invalid
    _address_reg_WIRE.prot is invalid
    _address_reg_WIRE.cache is invalid
    _address_reg_WIRE.lock is invalid
    _address_reg_WIRE.burst is invalid
    _address_reg_WIRE.size <= UInt<1>("h0")
    _address_reg_WIRE.len is invalid
    _address_reg_WIRE.region is invalid
    _address_reg_WIRE.addr <= UInt<1>("h0")
    _address_reg_WIRE.id <= UInt<1>("h0")
    reg address_reg : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}, clock with :
      reset => (reset, _address_reg_WIRE) @[AXISlaveWriteMux.scala 43:28]
    wire _data_reg_WIRE : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}
    _data_reg_WIRE.last <= UInt<1>("h0")
    _data_reg_WIRE.strb <= UInt<1>("h0")
    _data_reg_WIRE.data <= UInt<1>("h0")
    reg data_reg : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}, clock with :
      reset => (reset, _data_reg_WIRE) @[AXISlaveWriteMux.scala 48:25]
    wire _resp_reg_WIRE : { id : UInt<4>, resp : UInt<2>}
    _resp_reg_WIRE.resp <= UInt<1>("h0")
    _resp_reg_WIRE.id <= UInt<1>("h0")
    reg resp_reg : { id : UInt<4>, resp : UInt<2>}, clock with :
      reset => (reset, _resp_reg_WIRE) @[AXISlaveWriteMux.scala 53:25]
    io.out.writeAddr.bits.qos is invalid @[AXISlaveWriteMux.scala 59:29]
    io.out.writeAddr.bits.len is invalid @[AXISlaveWriteMux.scala 60:29]
    io.out.writeAddr.bits.cache is invalid @[AXISlaveWriteMux.scala 61:31]
    io.out.writeAddr.bits.lock is invalid @[AXISlaveWriteMux.scala 62:30]
    io.out.writeAddr.bits.size <= UInt<1>("h0") @[AXISlaveWriteMux.scala 63:30]
    io.out.writeAddr.bits.id <= UInt<1>("h0") @[AXISlaveWriteMux.scala 64:28]
    io.out.writeAddr.bits.prot is invalid @[AXISlaveWriteMux.scala 65:30]
    io.out.writeAddr.bits.region is invalid @[AXISlaveWriteMux.scala 66:32]
    io.out.writeAddr.bits.burst is invalid @[AXISlaveWriteMux.scala 67:31]
    io.out.writeResp.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 68:26]
    arbiter.io.out.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 69:24]
    io.in[0].writeData.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 72:30]
    io.in[0].writeResp.valid <= UInt<1>("h0") @[AXISlaveWriteMux.scala 73:30]
    io.in[0].writeResp.bits.id <= UInt<1>("h0") @[AXISlaveWriteMux.scala 74:32]
    io.in[0].writeResp.bits.resp <= UInt<1>("h0") @[AXISlaveWriteMux.scala 75:34]
    io.in[1].writeData.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 72:30]
    io.in[1].writeResp.valid <= UInt<1>("h0") @[AXISlaveWriteMux.scala 73:30]
    io.in[1].writeResp.bits.id <= UInt<1>("h0") @[AXISlaveWriteMux.scala 74:32]
    io.in[1].writeResp.bits.resp <= UInt<1>("h0") @[AXISlaveWriteMux.scala 75:34]
    node _io_in_0_writeAddr_ready_T = and(arbiter.io.in[0].ready, mask[0]) @[AXISlaveWriteMux.scala 79:56]
    io.in[0].writeAddr.ready <= _io_in_0_writeAddr_ready_T @[AXISlaveWriteMux.scala 79:30]
    node _arbiter_io_in_0_valid_T = and(io.in[0].writeAddr.valid, mask[0]) @[AXISlaveWriteMux.scala 80:56]
    arbiter.io.in[0].valid <= _arbiter_io_in_0_valid_T @[AXISlaveWriteMux.scala 80:28]
    arbiter.io.in[0].bits <= UInt<1>("h0") @[AXISlaveWriteMux.scala 81:27]
    node _io_in_1_writeAddr_ready_T = and(arbiter.io.in[1].ready, mask[1]) @[AXISlaveWriteMux.scala 79:56]
    io.in[1].writeAddr.ready <= _io_in_1_writeAddr_ready_T @[AXISlaveWriteMux.scala 79:30]
    node _arbiter_io_in_1_valid_T = and(io.in[1].writeAddr.valid, mask[1]) @[AXISlaveWriteMux.scala 80:56]
    arbiter.io.in[1].valid <= _arbiter_io_in_1_valid_T @[AXISlaveWriteMux.scala 80:28]
    arbiter.io.in[1].bits <= UInt<1>("h0") @[AXISlaveWriteMux.scala 81:27]
    io.out.writeAddr.valid <= aw_determined @[AXISlaveWriteMux.scala 85:26]
    io.out.writeData.valid <= w_determined @[AXISlaveWriteMux.scala 86:26]
    node _T = eq(UInt<2>("h0"), state) @[AXISlaveWriteMux.scala 88:16]
    when _T : @[AXISlaveWriteMux.scala 88:16]
      when outstanding : @[AXISlaveWriteMux.scala 90:24]
        node _T_1 = and(io.in[arbiter.io.chosen].writeData.ready, io.in[arbiter.io.chosen].writeData.valid) @[Decoupled.scala 52:35]
        when _T_1 : @[AXISlaveWriteMux.scala 92:61]
          state <= UInt<2>("h2") @[AXISlaveWriteMux.scala 93:17]
        else :
          state <= UInt<2>("h1") @[AXISlaveWriteMux.scala 96:17]
    else :
      node _T_2 = eq(UInt<2>("h1"), state) @[AXISlaveWriteMux.scala 88:16]
      when _T_2 : @[AXISlaveWriteMux.scala 88:16]
        node _T_3 = or(chosen_reg, UInt<1>("h0"))
        node _T_4 = bits(_T_3, 0, 0)
        node _T_5 = and(io.in[_T_4].writeData.ready, io.in[_T_4].writeData.valid) @[Decoupled.scala 52:35]
        when _T_5 : @[AXISlaveWriteMux.scala 101:45]
          state <= UInt<2>("h2") @[AXISlaveWriteMux.scala 102:15]
      else :
        node _T_6 = eq(UInt<2>("h2"), state) @[AXISlaveWriteMux.scala 88:16]
        when _T_6 : @[AXISlaveWriteMux.scala 88:16]
          node _T_7 = and(io.out.writeResp.ready, io.out.writeResp.valid) @[Decoupled.scala 52:35]
          when _T_7 : @[AXISlaveWriteMux.scala 106:34]
            state <= UInt<2>("h3") @[AXISlaveWriteMux.scala 107:15]
        else :
          node _T_8 = eq(UInt<2>("h3"), state) @[AXISlaveWriteMux.scala 88:16]
          when _T_8 : @[AXISlaveWriteMux.scala 88:16]
            node _T_9 = or(chosen_reg, UInt<1>("h0"))
            node _T_10 = bits(_T_9, 0, 0)
            node _T_11 = and(io.in[_T_10].writeResp.ready, io.in[_T_10].writeResp.valid) @[Decoupled.scala 52:35]
            when _T_11 : @[AXISlaveWriteMux.scala 111:45]
              state <= UInt<2>("h0") @[AXISlaveWriteMux.scala 112:15]
    node _T_12 = eq(state, UInt<2>("h0")) @[AXISlaveWriteMux.scala 117:14]
    when _T_12 : @[AXISlaveWriteMux.scala 117:24]
      mask[0] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 119:20]
      mask[1] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 119:20]
      when arbiter.io.out.valid : @[AXISlaveWriteMux.scala 121:31]
        io.in[arbiter.io.chosen].writeData.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 122:48]
        chosen_reg <= arbiter.io.chosen @[AXISlaveWriteMux.scala 123:18]
        address_reg <= io.in[arbiter.io.chosen].writeAddr.bits @[AXISlaveWriteMux.scala 124:19]
        aw_determined <= UInt<1>("h1") @[AXISlaveWriteMux.scala 125:21]
        node _T_13 = and(io.in[arbiter.io.chosen].writeData.ready, io.in[arbiter.io.chosen].writeData.valid) @[Decoupled.scala 52:35]
        when _T_13 : @[AXISlaveWriteMux.scala 126:59]
          data_reg <= io.in[arbiter.io.chosen].writeData.bits @[AXISlaveWriteMux.scala 127:18]
          w_determined <= UInt<1>("h1") @[AXISlaveWriteMux.scala 128:22]
      io.out.writeResp.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 131:28]
    else :
      node _T_14 = eq(state, UInt<2>("h1")) @[AXISlaveWriteMux.scala 133:19]
      when _T_14 : @[AXISlaveWriteMux.scala 133:33]
        mask[0] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 134:20]
        mask[1] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 134:20]
        node _T_15 = or(chosen_reg, UInt<1>("h0"))
        node _T_16 = bits(_T_15, 0, 0)
        node _T_17 = and(io.in[_T_16].writeData.ready, io.in[_T_16].writeData.valid) @[Decoupled.scala 52:35]
        when _T_17 : @[AXISlaveWriteMux.scala 135:43]
          node _data_reg_T = or(chosen_reg, UInt<1>("h0"))
          node _data_reg_T_1 = bits(_data_reg_T, 0, 0)
          data_reg <= io.in[_data_reg_T_1].writeData.bits @[AXISlaveWriteMux.scala 136:16]
        node _T_18 = and(io.out.writeAddr.ready, io.out.writeAddr.valid) @[Decoupled.scala 52:35]
        when _T_18 : @[AXISlaveWriteMux.scala 138:32]
          aw_determined <= UInt<1>("h0") @[AXISlaveWriteMux.scala 139:21]
        node _T_19 = or(chosen_reg, UInt<1>("h0"))
        node _T_20 = bits(_T_19, 0, 0)
        io.in[_T_20].writeData.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 141:39]
        io.out.writeResp.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 142:28]
      else :
        node _T_21 = eq(state, UInt<2>("h2")) @[AXISlaveWriteMux.scala 144:19]
        when _T_21 : @[AXISlaveWriteMux.scala 144:33]
          mask[0] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 145:22]
          mask[1] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 145:22]
          node _T_22 = and(io.out.writeAddr.ready, io.out.writeAddr.valid) @[Decoupled.scala 52:35]
          when _T_22 : @[AXISlaveWriteMux.scala 146:34]
            aw_determined <= UInt<1>("h0") @[AXISlaveWriteMux.scala 147:23]
          node _T_23 = and(io.out.writeData.ready, io.out.writeData.valid) @[Decoupled.scala 52:35]
          when _T_23 : @[AXISlaveWriteMux.scala 149:34]
            w_determined <= UInt<1>("h0") @[AXISlaveWriteMux.scala 150:22]
          node _T_24 = and(io.out.writeResp.ready, io.out.writeResp.valid) @[Decoupled.scala 52:35]
          when _T_24 : @[AXISlaveWriteMux.scala 152:34]
            resp_reg <= io.out.writeResp.bits @[AXISlaveWriteMux.scala 153:18]
          io.out.writeResp.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 155:30]
        else :
          node _T_25 = eq(state, UInt<2>("h3")) @[AXISlaveWriteMux.scala 157:19]
          when _T_25 : @[AXISlaveWriteMux.scala 157:31]
            mask[0] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 158:20]
            mask[1] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 158:20]
            node _T_26 = or(chosen_reg, UInt<1>("h0"))
            node _T_27 = bits(_T_26, 0, 0)
            io.in[_T_27].writeResp.valid <= UInt<1>("h1") @[AXISlaveWriteMux.scala 159:39]
    io.out.writeData.bits <= data_reg @[AXISlaveWriteMux.scala 162:25]
    io.out.writeAddr.bits <= address_reg @[AXISlaveWriteMux.scala 163:25]
    node _T_28 = or(chosen_reg, UInt<1>("h0"))
    node _T_29 = bits(_T_28, 0, 0)
    io.in[_T_29].writeResp.bits <= resp_reg @[AXISlaveWriteMux.scala 164:36]

  module RRArbiter_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}, chosen : UInt<1>}

    wire choice : UInt
    choice <= UInt<1>("h1")
    io.chosen <= choice @[Arbiter.scala 54:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 55:16]
    io.out.bits <= io.in[io.chosen].bits @[Arbiter.scala 56:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 52:35]
    reg lastGrant : UInt<1>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 19:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 20:18]
      lastGrant <= io.chosen @[Reg.scala 20:22]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 81:49]
    node grantMask_1 = gt(UInt<1>("h1"), lastGrant) @[Arbiter.scala 81:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 82:76]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 82:76]
    node _ctrl_T = or(validMask_0, validMask_1) @[Arbiter.scala 45:68]
    node _ctrl_T_1 = or(_ctrl_T, io.in[0].valid) @[Arbiter.scala 45:68]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_2 = eq(_ctrl_T, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_3 = eq(_ctrl_T_1, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 86:34]
    node _T_1 = or(_T, ctrl_2) @[Arbiter.scala 86:50]
    node _T_2 = and(ctrl_1, grantMask_1) @[Arbiter.scala 86:34]
    node _T_3 = or(_T_2, ctrl_3) @[Arbiter.scala 86:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 74:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 74:16]
    node _io_in_1_ready_T = and(_T_3, io.out.ready) @[Arbiter.scala 74:21]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 74:16]
    when io.in[0].valid : @[Arbiter.scala 91:26]
      choice <= UInt<1>("h0") @[Arbiter.scala 91:35]
    when validMask_1 : @[Arbiter.scala 93:24]
      choice <= UInt<1>("h1") @[Arbiter.scala 93:33]

  module AXISlaveWriteMux_1 :
    input clock : Clock
    input reset : Reset
    output io : { out : { writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}}, in : { flip writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}}[2]}

    wire _mask_WIRE : UInt<1>[2] @[AXISlaveWriteMux.scala 26:33]
    _mask_WIRE[0] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 26:33]
    _mask_WIRE[1] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 26:33]
    wire mask : UInt<1>[2]
    mask <= _mask_WIRE
    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[AXISlaveWriteMux.scala 32:22]
    node _outstanding_T = or(io.in[0].writeAddr.valid, io.in[1].writeAddr.valid) @[AXISlaveWriteMux.scala 35:96]
    wire outstanding : UInt<1>
    outstanding <= _outstanding_T
    inst arbiter of RRArbiter_4 @[AXISlaveWriteMux.scala 38:23]
    arbiter.clock <= clock
    arbiter.reset <= reset
    reg chosen_reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveWriteMux.scala 39:27]
    reg w_determined : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveWriteMux.scala 40:29]
    reg aw_determined : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveWriteMux.scala 41:30]
    wire _address_reg_WIRE : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}
    _address_reg_WIRE.qos is invalid
    _address_reg_WIRE.prot is invalid
    _address_reg_WIRE.cache is invalid
    _address_reg_WIRE.lock is invalid
    _address_reg_WIRE.burst is invalid
    _address_reg_WIRE.size <= UInt<1>("h0")
    _address_reg_WIRE.len is invalid
    _address_reg_WIRE.region is invalid
    _address_reg_WIRE.addr <= UInt<1>("h0")
    _address_reg_WIRE.id <= UInt<1>("h0")
    reg address_reg : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}, clock with :
      reset => (reset, _address_reg_WIRE) @[AXISlaveWriteMux.scala 43:28]
    wire _data_reg_WIRE : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}
    _data_reg_WIRE.last <= UInt<1>("h0")
    _data_reg_WIRE.strb <= UInt<1>("h0")
    _data_reg_WIRE.data <= UInt<1>("h0")
    reg data_reg : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}, clock with :
      reset => (reset, _data_reg_WIRE) @[AXISlaveWriteMux.scala 48:25]
    wire _resp_reg_WIRE : { id : UInt<4>, resp : UInt<2>}
    _resp_reg_WIRE.resp <= UInt<1>("h0")
    _resp_reg_WIRE.id <= UInt<1>("h0")
    reg resp_reg : { id : UInt<4>, resp : UInt<2>}, clock with :
      reset => (reset, _resp_reg_WIRE) @[AXISlaveWriteMux.scala 53:25]
    io.out.writeAddr.bits.qos is invalid @[AXISlaveWriteMux.scala 59:29]
    io.out.writeAddr.bits.len is invalid @[AXISlaveWriteMux.scala 60:29]
    io.out.writeAddr.bits.cache is invalid @[AXISlaveWriteMux.scala 61:31]
    io.out.writeAddr.bits.lock is invalid @[AXISlaveWriteMux.scala 62:30]
    io.out.writeAddr.bits.size <= UInt<1>("h0") @[AXISlaveWriteMux.scala 63:30]
    io.out.writeAddr.bits.id <= UInt<1>("h0") @[AXISlaveWriteMux.scala 64:28]
    io.out.writeAddr.bits.prot is invalid @[AXISlaveWriteMux.scala 65:30]
    io.out.writeAddr.bits.region is invalid @[AXISlaveWriteMux.scala 66:32]
    io.out.writeAddr.bits.burst is invalid @[AXISlaveWriteMux.scala 67:31]
    io.out.writeResp.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 68:26]
    arbiter.io.out.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 69:24]
    io.in[0].writeData.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 72:30]
    io.in[0].writeResp.valid <= UInt<1>("h0") @[AXISlaveWriteMux.scala 73:30]
    io.in[0].writeResp.bits.id <= UInt<1>("h0") @[AXISlaveWriteMux.scala 74:32]
    io.in[0].writeResp.bits.resp <= UInt<1>("h0") @[AXISlaveWriteMux.scala 75:34]
    io.in[1].writeData.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 72:30]
    io.in[1].writeResp.valid <= UInt<1>("h0") @[AXISlaveWriteMux.scala 73:30]
    io.in[1].writeResp.bits.id <= UInt<1>("h0") @[AXISlaveWriteMux.scala 74:32]
    io.in[1].writeResp.bits.resp <= UInt<1>("h0") @[AXISlaveWriteMux.scala 75:34]
    node _io_in_0_writeAddr_ready_T = and(arbiter.io.in[0].ready, mask[0]) @[AXISlaveWriteMux.scala 79:56]
    io.in[0].writeAddr.ready <= _io_in_0_writeAddr_ready_T @[AXISlaveWriteMux.scala 79:30]
    node _arbiter_io_in_0_valid_T = and(io.in[0].writeAddr.valid, mask[0]) @[AXISlaveWriteMux.scala 80:56]
    arbiter.io.in[0].valid <= _arbiter_io_in_0_valid_T @[AXISlaveWriteMux.scala 80:28]
    arbiter.io.in[0].bits <= UInt<1>("h0") @[AXISlaveWriteMux.scala 81:27]
    node _io_in_1_writeAddr_ready_T = and(arbiter.io.in[1].ready, mask[1]) @[AXISlaveWriteMux.scala 79:56]
    io.in[1].writeAddr.ready <= _io_in_1_writeAddr_ready_T @[AXISlaveWriteMux.scala 79:30]
    node _arbiter_io_in_1_valid_T = and(io.in[1].writeAddr.valid, mask[1]) @[AXISlaveWriteMux.scala 80:56]
    arbiter.io.in[1].valid <= _arbiter_io_in_1_valid_T @[AXISlaveWriteMux.scala 80:28]
    arbiter.io.in[1].bits <= UInt<1>("h0") @[AXISlaveWriteMux.scala 81:27]
    io.out.writeAddr.valid <= aw_determined @[AXISlaveWriteMux.scala 85:26]
    io.out.writeData.valid <= w_determined @[AXISlaveWriteMux.scala 86:26]
    node _T = eq(UInt<2>("h0"), state) @[AXISlaveWriteMux.scala 88:16]
    when _T : @[AXISlaveWriteMux.scala 88:16]
      when outstanding : @[AXISlaveWriteMux.scala 90:24]
        node _T_1 = and(io.in[arbiter.io.chosen].writeData.ready, io.in[arbiter.io.chosen].writeData.valid) @[Decoupled.scala 52:35]
        when _T_1 : @[AXISlaveWriteMux.scala 92:61]
          state <= UInt<2>("h2") @[AXISlaveWriteMux.scala 93:17]
        else :
          state <= UInt<2>("h1") @[AXISlaveWriteMux.scala 96:17]
    else :
      node _T_2 = eq(UInt<2>("h1"), state) @[AXISlaveWriteMux.scala 88:16]
      when _T_2 : @[AXISlaveWriteMux.scala 88:16]
        node _T_3 = or(chosen_reg, UInt<1>("h0"))
        node _T_4 = bits(_T_3, 0, 0)
        node _T_5 = and(io.in[_T_4].writeData.ready, io.in[_T_4].writeData.valid) @[Decoupled.scala 52:35]
        when _T_5 : @[AXISlaveWriteMux.scala 101:45]
          state <= UInt<2>("h2") @[AXISlaveWriteMux.scala 102:15]
      else :
        node _T_6 = eq(UInt<2>("h2"), state) @[AXISlaveWriteMux.scala 88:16]
        when _T_6 : @[AXISlaveWriteMux.scala 88:16]
          node _T_7 = and(io.out.writeResp.ready, io.out.writeResp.valid) @[Decoupled.scala 52:35]
          when _T_7 : @[AXISlaveWriteMux.scala 106:34]
            state <= UInt<2>("h3") @[AXISlaveWriteMux.scala 107:15]
        else :
          node _T_8 = eq(UInt<2>("h3"), state) @[AXISlaveWriteMux.scala 88:16]
          when _T_8 : @[AXISlaveWriteMux.scala 88:16]
            node _T_9 = or(chosen_reg, UInt<1>("h0"))
            node _T_10 = bits(_T_9, 0, 0)
            node _T_11 = and(io.in[_T_10].writeResp.ready, io.in[_T_10].writeResp.valid) @[Decoupled.scala 52:35]
            when _T_11 : @[AXISlaveWriteMux.scala 111:45]
              state <= UInt<2>("h0") @[AXISlaveWriteMux.scala 112:15]
    node _T_12 = eq(state, UInt<2>("h0")) @[AXISlaveWriteMux.scala 117:14]
    when _T_12 : @[AXISlaveWriteMux.scala 117:24]
      mask[0] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 119:20]
      mask[1] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 119:20]
      when arbiter.io.out.valid : @[AXISlaveWriteMux.scala 121:31]
        io.in[arbiter.io.chosen].writeData.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 122:48]
        chosen_reg <= arbiter.io.chosen @[AXISlaveWriteMux.scala 123:18]
        address_reg <= io.in[arbiter.io.chosen].writeAddr.bits @[AXISlaveWriteMux.scala 124:19]
        aw_determined <= UInt<1>("h1") @[AXISlaveWriteMux.scala 125:21]
        node _T_13 = and(io.in[arbiter.io.chosen].writeData.ready, io.in[arbiter.io.chosen].writeData.valid) @[Decoupled.scala 52:35]
        when _T_13 : @[AXISlaveWriteMux.scala 126:59]
          data_reg <= io.in[arbiter.io.chosen].writeData.bits @[AXISlaveWriteMux.scala 127:18]
          w_determined <= UInt<1>("h1") @[AXISlaveWriteMux.scala 128:22]
      io.out.writeResp.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 131:28]
    else :
      node _T_14 = eq(state, UInt<2>("h1")) @[AXISlaveWriteMux.scala 133:19]
      when _T_14 : @[AXISlaveWriteMux.scala 133:33]
        mask[0] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 134:20]
        mask[1] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 134:20]
        node _T_15 = or(chosen_reg, UInt<1>("h0"))
        node _T_16 = bits(_T_15, 0, 0)
        node _T_17 = and(io.in[_T_16].writeData.ready, io.in[_T_16].writeData.valid) @[Decoupled.scala 52:35]
        when _T_17 : @[AXISlaveWriteMux.scala 135:43]
          node _data_reg_T = or(chosen_reg, UInt<1>("h0"))
          node _data_reg_T_1 = bits(_data_reg_T, 0, 0)
          data_reg <= io.in[_data_reg_T_1].writeData.bits @[AXISlaveWriteMux.scala 136:16]
        node _T_18 = and(io.out.writeAddr.ready, io.out.writeAddr.valid) @[Decoupled.scala 52:35]
        when _T_18 : @[AXISlaveWriteMux.scala 138:32]
          aw_determined <= UInt<1>("h0") @[AXISlaveWriteMux.scala 139:21]
        node _T_19 = or(chosen_reg, UInt<1>("h0"))
        node _T_20 = bits(_T_19, 0, 0)
        io.in[_T_20].writeData.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 141:39]
        io.out.writeResp.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 142:28]
      else :
        node _T_21 = eq(state, UInt<2>("h2")) @[AXISlaveWriteMux.scala 144:19]
        when _T_21 : @[AXISlaveWriteMux.scala 144:33]
          mask[0] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 145:22]
          mask[1] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 145:22]
          node _T_22 = and(io.out.writeAddr.ready, io.out.writeAddr.valid) @[Decoupled.scala 52:35]
          when _T_22 : @[AXISlaveWriteMux.scala 146:34]
            aw_determined <= UInt<1>("h0") @[AXISlaveWriteMux.scala 147:23]
          node _T_23 = and(io.out.writeData.ready, io.out.writeData.valid) @[Decoupled.scala 52:35]
          when _T_23 : @[AXISlaveWriteMux.scala 149:34]
            w_determined <= UInt<1>("h0") @[AXISlaveWriteMux.scala 150:22]
          node _T_24 = and(io.out.writeResp.ready, io.out.writeResp.valid) @[Decoupled.scala 52:35]
          when _T_24 : @[AXISlaveWriteMux.scala 152:34]
            resp_reg <= io.out.writeResp.bits @[AXISlaveWriteMux.scala 153:18]
          io.out.writeResp.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 155:30]
        else :
          node _T_25 = eq(state, UInt<2>("h3")) @[AXISlaveWriteMux.scala 157:19]
          when _T_25 : @[AXISlaveWriteMux.scala 157:31]
            mask[0] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 158:20]
            mask[1] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 158:20]
            node _T_26 = or(chosen_reg, UInt<1>("h0"))
            node _T_27 = bits(_T_26, 0, 0)
            io.in[_T_27].writeResp.valid <= UInt<1>("h1") @[AXISlaveWriteMux.scala 159:39]
    io.out.writeData.bits <= data_reg @[AXISlaveWriteMux.scala 162:25]
    io.out.writeAddr.bits <= address_reg @[AXISlaveWriteMux.scala 163:25]
    node _T_28 = or(chosen_reg, UInt<1>("h0"))
    node _T_29 = bits(_T_28, 0, 0)
    io.in[_T_29].writeResp.bits <= resp_reg @[AXISlaveWriteMux.scala 164:36]

  module RRArbiter_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}[2], out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}, chosen : UInt<1>}

    wire choice : UInt
    choice <= UInt<1>("h1")
    io.chosen <= choice @[Arbiter.scala 54:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 55:16]
    io.out.bits <= io.in[io.chosen].bits @[Arbiter.scala 56:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 52:35]
    reg lastGrant : UInt<1>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 19:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 20:18]
      lastGrant <= io.chosen @[Reg.scala 20:22]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 81:49]
    node grantMask_1 = gt(UInt<1>("h1"), lastGrant) @[Arbiter.scala 81:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 82:76]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 82:76]
    node _ctrl_T = or(validMask_0, validMask_1) @[Arbiter.scala 45:68]
    node _ctrl_T_1 = or(_ctrl_T, io.in[0].valid) @[Arbiter.scala 45:68]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_2 = eq(_ctrl_T, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_3 = eq(_ctrl_T_1, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 86:34]
    node _T_1 = or(_T, ctrl_2) @[Arbiter.scala 86:50]
    node _T_2 = and(ctrl_1, grantMask_1) @[Arbiter.scala 86:34]
    node _T_3 = or(_T_2, ctrl_3) @[Arbiter.scala 86:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 74:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 74:16]
    node _io_in_1_ready_T = and(_T_3, io.out.ready) @[Arbiter.scala 74:21]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 74:16]
    when io.in[0].valid : @[Arbiter.scala 91:26]
      choice <= UInt<1>("h0") @[Arbiter.scala 91:35]
    when validMask_1 : @[Arbiter.scala 93:24]
      choice <= UInt<1>("h1") @[Arbiter.scala 93:33]

  module AXISlaveWriteMux_2 :
    input clock : Clock
    input reset : Reset
    output io : { out : { writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}}, in : { flip writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}}[2]}

    wire _mask_WIRE : UInt<1>[2] @[AXISlaveWriteMux.scala 26:33]
    _mask_WIRE[0] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 26:33]
    _mask_WIRE[1] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 26:33]
    wire mask : UInt<1>[2]
    mask <= _mask_WIRE
    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[AXISlaveWriteMux.scala 32:22]
    node _outstanding_T = or(io.in[0].writeAddr.valid, io.in[1].writeAddr.valid) @[AXISlaveWriteMux.scala 35:96]
    wire outstanding : UInt<1>
    outstanding <= _outstanding_T
    inst arbiter of RRArbiter_5 @[AXISlaveWriteMux.scala 38:23]
    arbiter.clock <= clock
    arbiter.reset <= reset
    reg chosen_reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveWriteMux.scala 39:27]
    reg w_determined : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveWriteMux.scala 40:29]
    reg aw_determined : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveWriteMux.scala 41:30]
    wire _address_reg_WIRE : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}
    _address_reg_WIRE.qos is invalid
    _address_reg_WIRE.prot is invalid
    _address_reg_WIRE.cache is invalid
    _address_reg_WIRE.lock is invalid
    _address_reg_WIRE.burst is invalid
    _address_reg_WIRE.size <= UInt<1>("h0")
    _address_reg_WIRE.len is invalid
    _address_reg_WIRE.region is invalid
    _address_reg_WIRE.addr <= UInt<1>("h0")
    _address_reg_WIRE.id <= UInt<1>("h0")
    reg address_reg : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}, clock with :
      reset => (reset, _address_reg_WIRE) @[AXISlaveWriteMux.scala 43:28]
    wire _data_reg_WIRE : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}
    _data_reg_WIRE.last <= UInt<1>("h0")
    _data_reg_WIRE.strb <= UInt<1>("h0")
    _data_reg_WIRE.data <= UInt<1>("h0")
    reg data_reg : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}, clock with :
      reset => (reset, _data_reg_WIRE) @[AXISlaveWriteMux.scala 48:25]
    wire _resp_reg_WIRE : { id : UInt<4>, resp : UInt<2>}
    _resp_reg_WIRE.resp <= UInt<1>("h0")
    _resp_reg_WIRE.id <= UInt<1>("h0")
    reg resp_reg : { id : UInt<4>, resp : UInt<2>}, clock with :
      reset => (reset, _resp_reg_WIRE) @[AXISlaveWriteMux.scala 53:25]
    io.out.writeAddr.bits.qos is invalid @[AXISlaveWriteMux.scala 59:29]
    io.out.writeAddr.bits.len is invalid @[AXISlaveWriteMux.scala 60:29]
    io.out.writeAddr.bits.cache is invalid @[AXISlaveWriteMux.scala 61:31]
    io.out.writeAddr.bits.lock is invalid @[AXISlaveWriteMux.scala 62:30]
    io.out.writeAddr.bits.size <= UInt<1>("h0") @[AXISlaveWriteMux.scala 63:30]
    io.out.writeAddr.bits.id <= UInt<1>("h0") @[AXISlaveWriteMux.scala 64:28]
    io.out.writeAddr.bits.prot is invalid @[AXISlaveWriteMux.scala 65:30]
    io.out.writeAddr.bits.region is invalid @[AXISlaveWriteMux.scala 66:32]
    io.out.writeAddr.bits.burst is invalid @[AXISlaveWriteMux.scala 67:31]
    io.out.writeResp.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 68:26]
    arbiter.io.out.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 69:24]
    io.in[0].writeData.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 72:30]
    io.in[0].writeResp.valid <= UInt<1>("h0") @[AXISlaveWriteMux.scala 73:30]
    io.in[0].writeResp.bits.id <= UInt<1>("h0") @[AXISlaveWriteMux.scala 74:32]
    io.in[0].writeResp.bits.resp <= UInt<1>("h0") @[AXISlaveWriteMux.scala 75:34]
    io.in[1].writeData.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 72:30]
    io.in[1].writeResp.valid <= UInt<1>("h0") @[AXISlaveWriteMux.scala 73:30]
    io.in[1].writeResp.bits.id <= UInt<1>("h0") @[AXISlaveWriteMux.scala 74:32]
    io.in[1].writeResp.bits.resp <= UInt<1>("h0") @[AXISlaveWriteMux.scala 75:34]
    node _io_in_0_writeAddr_ready_T = and(arbiter.io.in[0].ready, mask[0]) @[AXISlaveWriteMux.scala 79:56]
    io.in[0].writeAddr.ready <= _io_in_0_writeAddr_ready_T @[AXISlaveWriteMux.scala 79:30]
    node _arbiter_io_in_0_valid_T = and(io.in[0].writeAddr.valid, mask[0]) @[AXISlaveWriteMux.scala 80:56]
    arbiter.io.in[0].valid <= _arbiter_io_in_0_valid_T @[AXISlaveWriteMux.scala 80:28]
    arbiter.io.in[0].bits <= UInt<1>("h0") @[AXISlaveWriteMux.scala 81:27]
    node _io_in_1_writeAddr_ready_T = and(arbiter.io.in[1].ready, mask[1]) @[AXISlaveWriteMux.scala 79:56]
    io.in[1].writeAddr.ready <= _io_in_1_writeAddr_ready_T @[AXISlaveWriteMux.scala 79:30]
    node _arbiter_io_in_1_valid_T = and(io.in[1].writeAddr.valid, mask[1]) @[AXISlaveWriteMux.scala 80:56]
    arbiter.io.in[1].valid <= _arbiter_io_in_1_valid_T @[AXISlaveWriteMux.scala 80:28]
    arbiter.io.in[1].bits <= UInt<1>("h0") @[AXISlaveWriteMux.scala 81:27]
    io.out.writeAddr.valid <= aw_determined @[AXISlaveWriteMux.scala 85:26]
    io.out.writeData.valid <= w_determined @[AXISlaveWriteMux.scala 86:26]
    node _T = eq(UInt<2>("h0"), state) @[AXISlaveWriteMux.scala 88:16]
    when _T : @[AXISlaveWriteMux.scala 88:16]
      when outstanding : @[AXISlaveWriteMux.scala 90:24]
        node _T_1 = and(io.in[arbiter.io.chosen].writeData.ready, io.in[arbiter.io.chosen].writeData.valid) @[Decoupled.scala 52:35]
        when _T_1 : @[AXISlaveWriteMux.scala 92:61]
          state <= UInt<2>("h2") @[AXISlaveWriteMux.scala 93:17]
        else :
          state <= UInt<2>("h1") @[AXISlaveWriteMux.scala 96:17]
    else :
      node _T_2 = eq(UInt<2>("h1"), state) @[AXISlaveWriteMux.scala 88:16]
      when _T_2 : @[AXISlaveWriteMux.scala 88:16]
        node _T_3 = or(chosen_reg, UInt<1>("h0"))
        node _T_4 = bits(_T_3, 0, 0)
        node _T_5 = and(io.in[_T_4].writeData.ready, io.in[_T_4].writeData.valid) @[Decoupled.scala 52:35]
        when _T_5 : @[AXISlaveWriteMux.scala 101:45]
          state <= UInt<2>("h2") @[AXISlaveWriteMux.scala 102:15]
      else :
        node _T_6 = eq(UInt<2>("h2"), state) @[AXISlaveWriteMux.scala 88:16]
        when _T_6 : @[AXISlaveWriteMux.scala 88:16]
          node _T_7 = and(io.out.writeResp.ready, io.out.writeResp.valid) @[Decoupled.scala 52:35]
          when _T_7 : @[AXISlaveWriteMux.scala 106:34]
            state <= UInt<2>("h3") @[AXISlaveWriteMux.scala 107:15]
        else :
          node _T_8 = eq(UInt<2>("h3"), state) @[AXISlaveWriteMux.scala 88:16]
          when _T_8 : @[AXISlaveWriteMux.scala 88:16]
            node _T_9 = or(chosen_reg, UInt<1>("h0"))
            node _T_10 = bits(_T_9, 0, 0)
            node _T_11 = and(io.in[_T_10].writeResp.ready, io.in[_T_10].writeResp.valid) @[Decoupled.scala 52:35]
            when _T_11 : @[AXISlaveWriteMux.scala 111:45]
              state <= UInt<2>("h0") @[AXISlaveWriteMux.scala 112:15]
    node _T_12 = eq(state, UInt<2>("h0")) @[AXISlaveWriteMux.scala 117:14]
    when _T_12 : @[AXISlaveWriteMux.scala 117:24]
      mask[0] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 119:20]
      mask[1] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 119:20]
      when arbiter.io.out.valid : @[AXISlaveWriteMux.scala 121:31]
        io.in[arbiter.io.chosen].writeData.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 122:48]
        chosen_reg <= arbiter.io.chosen @[AXISlaveWriteMux.scala 123:18]
        address_reg <= io.in[arbiter.io.chosen].writeAddr.bits @[AXISlaveWriteMux.scala 124:19]
        aw_determined <= UInt<1>("h1") @[AXISlaveWriteMux.scala 125:21]
        node _T_13 = and(io.in[arbiter.io.chosen].writeData.ready, io.in[arbiter.io.chosen].writeData.valid) @[Decoupled.scala 52:35]
        when _T_13 : @[AXISlaveWriteMux.scala 126:59]
          data_reg <= io.in[arbiter.io.chosen].writeData.bits @[AXISlaveWriteMux.scala 127:18]
          w_determined <= UInt<1>("h1") @[AXISlaveWriteMux.scala 128:22]
      io.out.writeResp.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 131:28]
    else :
      node _T_14 = eq(state, UInt<2>("h1")) @[AXISlaveWriteMux.scala 133:19]
      when _T_14 : @[AXISlaveWriteMux.scala 133:33]
        mask[0] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 134:20]
        mask[1] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 134:20]
        node _T_15 = or(chosen_reg, UInt<1>("h0"))
        node _T_16 = bits(_T_15, 0, 0)
        node _T_17 = and(io.in[_T_16].writeData.ready, io.in[_T_16].writeData.valid) @[Decoupled.scala 52:35]
        when _T_17 : @[AXISlaveWriteMux.scala 135:43]
          node _data_reg_T = or(chosen_reg, UInt<1>("h0"))
          node _data_reg_T_1 = bits(_data_reg_T, 0, 0)
          data_reg <= io.in[_data_reg_T_1].writeData.bits @[AXISlaveWriteMux.scala 136:16]
        node _T_18 = and(io.out.writeAddr.ready, io.out.writeAddr.valid) @[Decoupled.scala 52:35]
        when _T_18 : @[AXISlaveWriteMux.scala 138:32]
          aw_determined <= UInt<1>("h0") @[AXISlaveWriteMux.scala 139:21]
        node _T_19 = or(chosen_reg, UInt<1>("h0"))
        node _T_20 = bits(_T_19, 0, 0)
        io.in[_T_20].writeData.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 141:39]
        io.out.writeResp.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 142:28]
      else :
        node _T_21 = eq(state, UInt<2>("h2")) @[AXISlaveWriteMux.scala 144:19]
        when _T_21 : @[AXISlaveWriteMux.scala 144:33]
          mask[0] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 145:22]
          mask[1] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 145:22]
          node _T_22 = and(io.out.writeAddr.ready, io.out.writeAddr.valid) @[Decoupled.scala 52:35]
          when _T_22 : @[AXISlaveWriteMux.scala 146:34]
            aw_determined <= UInt<1>("h0") @[AXISlaveWriteMux.scala 147:23]
          node _T_23 = and(io.out.writeData.ready, io.out.writeData.valid) @[Decoupled.scala 52:35]
          when _T_23 : @[AXISlaveWriteMux.scala 149:34]
            w_determined <= UInt<1>("h0") @[AXISlaveWriteMux.scala 150:22]
          node _T_24 = and(io.out.writeResp.ready, io.out.writeResp.valid) @[Decoupled.scala 52:35]
          when _T_24 : @[AXISlaveWriteMux.scala 152:34]
            resp_reg <= io.out.writeResp.bits @[AXISlaveWriteMux.scala 153:18]
          io.out.writeResp.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 155:30]
        else :
          node _T_25 = eq(state, UInt<2>("h3")) @[AXISlaveWriteMux.scala 157:19]
          when _T_25 : @[AXISlaveWriteMux.scala 157:31]
            mask[0] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 158:20]
            mask[1] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 158:20]
            node _T_26 = or(chosen_reg, UInt<1>("h0"))
            node _T_27 = bits(_T_26, 0, 0)
            io.in[_T_27].writeResp.valid <= UInt<1>("h1") @[AXISlaveWriteMux.scala 159:39]
    io.out.writeData.bits <= data_reg @[AXISlaveWriteMux.scala 162:25]
    io.out.writeAddr.bits <= address_reg @[AXISlaveWriteMux.scala 163:25]
    node _T_28 = or(chosen_reg, UInt<1>("h0"))
    node _T_29 = bits(_T_28, 0, 0)
    io.in[_T_29].writeResp.bits <= resp_reg @[AXISlaveWriteMux.scala 164:36]

  module AXILiteXBar :
    input clock : Clock
    input reset : Reset
    output io : { flip masters : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}[2], flip slaves : { flip aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}, flip ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}[3]}

    inst readBuses_0 of AXIReadBus @[AXILiteXBar.scala 15:11]
    readBuses_0.clock <= clock
    readBuses_0.reset <= reset
    inst readBuses_1 of AXIReadBus_1 @[AXILiteXBar.scala 15:11]
    readBuses_1.clock <= clock
    readBuses_1.reset <= reset
    inst readMuxes_0 of AXISlaveReadMux @[AXILiteXBar.scala 18:11]
    readMuxes_0.clock <= clock
    readMuxes_0.reset <= reset
    inst readMuxes_1 of AXISlaveReadMux_1 @[AXILiteXBar.scala 18:11]
    readMuxes_1.clock <= clock
    readMuxes_1.reset <= reset
    inst readMuxes_2 of AXISlaveReadMux_2 @[AXILiteXBar.scala 18:11]
    readMuxes_2.clock <= clock
    readMuxes_2.reset <= reset
    inst writeBuses_0 of AXIWriteBus @[AXILiteXBar.scala 23:11]
    writeBuses_0.clock <= clock
    writeBuses_0.reset <= reset
    inst writeBuses_1 of AXIWriteBus_1 @[AXILiteXBar.scala 23:11]
    writeBuses_1.clock <= clock
    writeBuses_1.reset <= reset
    inst writeMuxes_0 of AXISlaveWriteMux @[AXILiteXBar.scala 27:11]
    writeMuxes_0.clock <= clock
    writeMuxes_0.reset <= reset
    inst writeMuxes_1 of AXISlaveWriteMux_1 @[AXILiteXBar.scala 27:11]
    writeMuxes_1.clock <= clock
    writeMuxes_1.reset <= reset
    inst writeMuxes_2 of AXISlaveWriteMux_2 @[AXILiteXBar.scala 27:11]
    writeMuxes_2.clock <= clock
    writeMuxes_2.reset <= reset
    readBuses_0.io.master.readAddr <= io.masters[0].ar @[AXILiteXBar.scala 32:15]
    io.masters[0].r.bits <= readBuses_0.io.master.readData.bits @[AXILiteXBar.scala 33:14]
    io.masters[0].r.valid <= readBuses_0.io.master.readData.valid @[AXILiteXBar.scala 33:14]
    readBuses_0.io.master.readData.ready <= io.masters[0].r.ready @[AXILiteXBar.scala 33:14]
    readBuses_1.io.master.readAddr <= io.masters[1].ar @[AXILiteXBar.scala 32:15]
    io.masters[1].r.bits <= readBuses_1.io.master.readData.bits @[AXILiteXBar.scala 33:14]
    io.masters[1].r.valid <= readBuses_1.io.master.readData.valid @[AXILiteXBar.scala 33:14]
    readBuses_1.io.master.readData.ready <= io.masters[1].r.ready @[AXILiteXBar.scala 33:14]
    writeBuses_0.io.master.writeAddr <= io.masters[0].aw @[AXILiteXBar.scala 37:15]
    writeBuses_0.io.master.writeData <= io.masters[0].w @[AXILiteXBar.scala 38:14]
    io.masters[0].b.bits <= writeBuses_0.io.master.writeResp.bits @[AXILiteXBar.scala 39:14]
    io.masters[0].b.valid <= writeBuses_0.io.master.writeResp.valid @[AXILiteXBar.scala 39:14]
    writeBuses_0.io.master.writeResp.ready <= io.masters[0].b.ready @[AXILiteXBar.scala 39:14]
    writeBuses_1.io.master.writeAddr <= io.masters[1].aw @[AXILiteXBar.scala 37:15]
    writeBuses_1.io.master.writeData <= io.masters[1].w @[AXILiteXBar.scala 38:14]
    io.masters[1].b.bits <= writeBuses_1.io.master.writeResp.bits @[AXILiteXBar.scala 39:14]
    io.masters[1].b.valid <= writeBuses_1.io.master.writeResp.valid @[AXILiteXBar.scala 39:14]
    writeBuses_1.io.master.writeResp.ready <= io.masters[1].b.ready @[AXILiteXBar.scala 39:14]
    io.slaves[0].ar.bits <= readMuxes_0.io.out.readAddr.bits @[AXILiteXBar.scala 45:16]
    io.slaves[0].ar.valid <= readMuxes_0.io.out.readAddr.valid @[AXILiteXBar.scala 45:16]
    readMuxes_0.io.out.readAddr.ready <= io.slaves[0].ar.ready @[AXILiteXBar.scala 45:16]
    readMuxes_0.io.out.readData <= io.slaves[0].r @[AXILiteXBar.scala 46:15]
    io.slaves[1].ar.bits <= readMuxes_1.io.out.readAddr.bits @[AXILiteXBar.scala 45:16]
    io.slaves[1].ar.valid <= readMuxes_1.io.out.readAddr.valid @[AXILiteXBar.scala 45:16]
    readMuxes_1.io.out.readAddr.ready <= io.slaves[1].ar.ready @[AXILiteXBar.scala 45:16]
    readMuxes_1.io.out.readData <= io.slaves[1].r @[AXILiteXBar.scala 46:15]
    io.slaves[2].ar.bits <= readMuxes_2.io.out.readAddr.bits @[AXILiteXBar.scala 45:16]
    io.slaves[2].ar.valid <= readMuxes_2.io.out.readAddr.valid @[AXILiteXBar.scala 45:16]
    readMuxes_2.io.out.readAddr.ready <= io.slaves[2].ar.ready @[AXILiteXBar.scala 45:16]
    readMuxes_2.io.out.readData <= io.slaves[2].r @[AXILiteXBar.scala 46:15]
    io.slaves[0].aw.bits <= writeMuxes_0.io.out.writeAddr.bits @[AXILiteXBar.scala 51:16]
    io.slaves[0].aw.valid <= writeMuxes_0.io.out.writeAddr.valid @[AXILiteXBar.scala 51:16]
    writeMuxes_0.io.out.writeAddr.ready <= io.slaves[0].aw.ready @[AXILiteXBar.scala 51:16]
    io.slaves[0].w.bits <= writeMuxes_0.io.out.writeData.bits @[AXILiteXBar.scala 52:15]
    io.slaves[0].w.valid <= writeMuxes_0.io.out.writeData.valid @[AXILiteXBar.scala 52:15]
    writeMuxes_0.io.out.writeData.ready <= io.slaves[0].w.ready @[AXILiteXBar.scala 52:15]
    writeMuxes_0.io.out.writeResp <= io.slaves[0].b @[AXILiteXBar.scala 53:15]
    io.slaves[1].aw.bits <= writeMuxes_1.io.out.writeAddr.bits @[AXILiteXBar.scala 51:16]
    io.slaves[1].aw.valid <= writeMuxes_1.io.out.writeAddr.valid @[AXILiteXBar.scala 51:16]
    writeMuxes_1.io.out.writeAddr.ready <= io.slaves[1].aw.ready @[AXILiteXBar.scala 51:16]
    io.slaves[1].w.bits <= writeMuxes_1.io.out.writeData.bits @[AXILiteXBar.scala 52:15]
    io.slaves[1].w.valid <= writeMuxes_1.io.out.writeData.valid @[AXILiteXBar.scala 52:15]
    writeMuxes_1.io.out.writeData.ready <= io.slaves[1].w.ready @[AXILiteXBar.scala 52:15]
    writeMuxes_1.io.out.writeResp <= io.slaves[1].b @[AXILiteXBar.scala 53:15]
    io.slaves[2].aw.bits <= writeMuxes_2.io.out.writeAddr.bits @[AXILiteXBar.scala 51:16]
    io.slaves[2].aw.valid <= writeMuxes_2.io.out.writeAddr.valid @[AXILiteXBar.scala 51:16]
    writeMuxes_2.io.out.writeAddr.ready <= io.slaves[2].aw.ready @[AXILiteXBar.scala 51:16]
    io.slaves[2].w.bits <= writeMuxes_2.io.out.writeData.bits @[AXILiteXBar.scala 52:15]
    io.slaves[2].w.valid <= writeMuxes_2.io.out.writeData.valid @[AXILiteXBar.scala 52:15]
    writeMuxes_2.io.out.writeData.ready <= io.slaves[2].w.ready @[AXILiteXBar.scala 52:15]
    writeMuxes_2.io.out.writeResp <= io.slaves[2].b @[AXILiteXBar.scala 53:15]
    readBuses_0.io.slave[0].readData <= readMuxes_0.io.in[0].readData @[AXILiteXBar.scala 58:30]
    readMuxes_0.io.in[0].readAddr <= readBuses_0.io.slave[0].readAddr @[AXILiteXBar.scala 58:30]
    readBuses_0.io.slave[1].readData <= readMuxes_1.io.in[0].readData @[AXILiteXBar.scala 58:30]
    readMuxes_1.io.in[0].readAddr <= readBuses_0.io.slave[1].readAddr @[AXILiteXBar.scala 58:30]
    readBuses_0.io.slave[2].readData <= readMuxes_2.io.in[0].readData @[AXILiteXBar.scala 58:30]
    readMuxes_2.io.in[0].readAddr <= readBuses_0.io.slave[2].readAddr @[AXILiteXBar.scala 58:30]
    readBuses_1.io.slave[0].readData <= readMuxes_0.io.in[1].readData @[AXILiteXBar.scala 58:30]
    readMuxes_0.io.in[1].readAddr <= readBuses_1.io.slave[0].readAddr @[AXILiteXBar.scala 58:30]
    readBuses_1.io.slave[1].readData <= readMuxes_1.io.in[1].readData @[AXILiteXBar.scala 58:30]
    readMuxes_1.io.in[1].readAddr <= readBuses_1.io.slave[1].readAddr @[AXILiteXBar.scala 58:30]
    readBuses_1.io.slave[2].readData <= readMuxes_2.io.in[1].readData @[AXILiteXBar.scala 58:30]
    readMuxes_2.io.in[1].readAddr <= readBuses_1.io.slave[2].readAddr @[AXILiteXBar.scala 58:30]
    writeBuses_0.io.slave[0].writeResp <= writeMuxes_0.io.in[0].writeResp @[AXILiteXBar.scala 62:31]
    writeMuxes_0.io.in[0].writeData <= writeBuses_0.io.slave[0].writeData @[AXILiteXBar.scala 62:31]
    writeMuxes_0.io.in[0].writeAddr <= writeBuses_0.io.slave[0].writeAddr @[AXILiteXBar.scala 62:31]
    writeBuses_0.io.slave[1].writeResp <= writeMuxes_1.io.in[0].writeResp @[AXILiteXBar.scala 62:31]
    writeMuxes_1.io.in[0].writeData <= writeBuses_0.io.slave[1].writeData @[AXILiteXBar.scala 62:31]
    writeMuxes_1.io.in[0].writeAddr <= writeBuses_0.io.slave[1].writeAddr @[AXILiteXBar.scala 62:31]
    writeBuses_0.io.slave[2].writeResp <= writeMuxes_2.io.in[0].writeResp @[AXILiteXBar.scala 62:31]
    writeMuxes_2.io.in[0].writeData <= writeBuses_0.io.slave[2].writeData @[AXILiteXBar.scala 62:31]
    writeMuxes_2.io.in[0].writeAddr <= writeBuses_0.io.slave[2].writeAddr @[AXILiteXBar.scala 62:31]
    writeBuses_1.io.slave[0].writeResp <= writeMuxes_0.io.in[1].writeResp @[AXILiteXBar.scala 62:31]
    writeMuxes_0.io.in[1].writeData <= writeBuses_1.io.slave[0].writeData @[AXILiteXBar.scala 62:31]
    writeMuxes_0.io.in[1].writeAddr <= writeBuses_1.io.slave[0].writeAddr @[AXILiteXBar.scala 62:31]
    writeBuses_1.io.slave[1].writeResp <= writeMuxes_1.io.in[1].writeResp @[AXILiteXBar.scala 62:31]
    writeMuxes_1.io.in[1].writeData <= writeBuses_1.io.slave[1].writeData @[AXILiteXBar.scala 62:31]
    writeMuxes_1.io.in[1].writeAddr <= writeBuses_1.io.slave[1].writeAddr @[AXILiteXBar.scala 62:31]
    writeBuses_1.io.slave[2].writeResp <= writeMuxes_2.io.in[1].writeResp @[AXILiteXBar.scala 62:31]
    writeMuxes_2.io.in[1].writeData <= writeBuses_1.io.slave[2].writeData @[AXILiteXBar.scala 62:31]
    writeMuxes_2.io.in[1].writeAddr <= writeBuses_1.io.slave[2].writeAddr @[AXILiteXBar.scala 62:31]

  module DataMem :
    input clock : Clock
    input reset : Reset
    output io : { slave : { flip aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}, flip ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, flip dump : UInt<1>}

    cmem memory : UInt<32> [64] @[DataMem.scala 23:19]
    reg readID : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[DataMem.scala 28:23]
    reg rAddrOffset : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DataMem.scala 29:28]
    node _wAddrOffset_T = sub(io.slave.aw.bits.addr, UInt<16>("h8000")) @[DataMem.scala 31:29]
    node _wAddrOffset_T_1 = tail(_wAddrOffset_T, 1) @[DataMem.scala 31:29]
    node _wAddrOffset_T_2 = not(UInt<32>("h3")) @[DataMem.scala 31:45]
    node _wAddrOffset_T_3 = and(_wAddrOffset_T_1, _wAddrOffset_T_2) @[DataMem.scala 31:43]
    node _wAddrOffset_T_4 = dshr(_wAddrOffset_T_3, UInt<2>("h2")) @[DataMem.scala 31:62]
    wire wAddrOffset : UInt
    wAddrOffset <= _wAddrOffset_T_4
    reg writeAddressReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DataMem.scala 33:32]
    reg writeID : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[DataMem.scala 34:24]
    reg writeState : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[DataMem.scala 37:27]
    reg readState : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[DataMem.scala 38:26]
    reg rLatencyCounter : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[DataMem.scala 39:32]
    reg wLatencyCounter : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[DataMem.scala 40:32]
    reg rlength : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[DataMem.scala 43:31]
    reg rburst_counter : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[DataMem.scala 44:31]
    reg wburst_counter : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[DataMem.scala 45:31]
    node _readLast_T = eq(rburst_counter, rlength) @[DataMem.scala 47:50]
    wire readLast : UInt<1>
    readLast <= _readLast_T
    io.slave.aw.ready <= UInt<1>("h0") @[DataMem.scala 52:21]
    io.slave.w.ready <= UInt<1>("h0") @[DataMem.scala 55:20]
    io.slave.b.bits.id <= UInt<1>("h0") @[DataMem.scala 58:22]
    io.slave.b.bits.resp <= UInt<1>("h0") @[DataMem.scala 59:24]
    io.slave.b.valid <= UInt<1>("h0") @[DataMem.scala 60:20]
    io.slave.ar.ready <= UInt<1>("h0") @[DataMem.scala 63:21]
    io.slave.r.bits.id <= UInt<1>("h0") @[DataMem.scala 66:22]
    io.slave.r.bits.data <= UInt<1>("h0") @[DataMem.scala 67:24]
    io.slave.r.bits.resp <= UInt<1>("h0") @[DataMem.scala 68:24]
    io.slave.r.bits.last <= readLast @[DataMem.scala 69:24]
    io.slave.r.valid <= UInt<1>("h0") @[DataMem.scala 70:20]
    node _T = eq(UInt<2>("h0"), readState) @[DataMem.scala 74:21]
    when _T : @[DataMem.scala 74:21]
      when io.slave.ar.valid : @[DataMem.scala 76:31]
        node _T_1 = eq(UInt<1>("h1"), UInt<1>("h1")) @[DataMem.scala 77:24]
        when _T_1 : @[DataMem.scala 77:33]
          readState <= UInt<2>("h2") @[DataMem.scala 78:21]
        else :
          readState <= UInt<2>("h1") @[DataMem.scala 81:21]
    else :
      node _T_2 = eq(UInt<2>("h1"), readState) @[DataMem.scala 74:21]
      when _T_2 : @[DataMem.scala 74:21]
        node _T_3 = eq(rLatencyCounter, UInt<1>("h0")) @[DataMem.scala 86:28]
        when _T_3 : @[DataMem.scala 86:49]
          readState <= UInt<2>("h2") @[DataMem.scala 87:19]
      else :
        node _T_4 = eq(UInt<2>("h2"), readState) @[DataMem.scala 74:21]
        when _T_4 : @[DataMem.scala 74:21]
          when io.slave.r.ready : @[DataMem.scala 91:29]
            readState <= UInt<2>("h3") @[DataMem.scala 92:19]
        else :
          node _T_5 = eq(UInt<2>("h3"), readState) @[DataMem.scala 74:21]
          when _T_5 : @[DataMem.scala 74:21]
            when readLast : @[DataMem.scala 96:21]
              readState <= UInt<2>("h0") @[DataMem.scala 97:19]
            else :
              readState <= UInt<2>("h2") @[DataMem.scala 99:19]
    node _T_6 = eq(readState, UInt<2>("h0")) @[DataMem.scala 104:18]
    when _T_6 : @[DataMem.scala 104:29]
      io.slave.ar.ready <= UInt<1>("h1") @[DataMem.scala 105:23]
      io.slave.r.valid <= UInt<1>("h0") @[DataMem.scala 106:22]
      node _rAddrOffset_T = sub(io.slave.ar.bits.addr, UInt<16>("h8000")) @[DataMem.scala 107:44]
      node _rAddrOffset_T_1 = tail(_rAddrOffset_T, 1) @[DataMem.scala 107:44]
      node _rAddrOffset_T_2 = not(UInt<32>("h3")) @[DataMem.scala 107:60]
      node _rAddrOffset_T_3 = and(_rAddrOffset_T_1, _rAddrOffset_T_2) @[DataMem.scala 107:58]
      node _rAddrOffset_T_4 = dshr(_rAddrOffset_T_3, UInt<2>("h2")) @[DataMem.scala 107:77]
      rAddrOffset <= _rAddrOffset_T_4 @[DataMem.scala 107:17]
      readID <= io.slave.ar.bits.id @[DataMem.scala 108:12]
      node _rlength_T = mux(io.slave.ar.valid, io.slave.ar.bits.len, rlength) @[DataMem.scala 111:19]
      rlength <= _rlength_T @[DataMem.scala 111:13]
    else :
      node _T_7 = eq(readState, UInt<2>("h1")) @[DataMem.scala 115:23]
      when _T_7 : @[DataMem.scala 115:38]
        node _rLatencyCounter_T = add(rLatencyCounter, UInt<1>("h1")) @[DataMem.scala 116:40]
        node _rLatencyCounter_T_1 = tail(_rLatencyCounter_T, 1) @[DataMem.scala 116:40]
        rLatencyCounter <= _rLatencyCounter_T_1 @[DataMem.scala 116:21]
      else :
        node _T_8 = eq(readState, UInt<2>("h2")) @[DataMem.scala 118:23]
        when _T_8 : @[DataMem.scala 118:38]
          skip
        else :
          node _T_9 = eq(readState, UInt<2>("h3")) @[DataMem.scala 121:23]
          when _T_9 : @[DataMem.scala 121:34]
            rLatencyCounter <= UInt<1>("h0") @[DataMem.scala 122:21]
            io.slave.ar.ready <= UInt<1>("h0") @[DataMem.scala 123:23]
            io.slave.r.valid <= UInt<1>("h1") @[DataMem.scala 124:22]
            node _io_slave_r_bits_data_T = bits(rAddrOffset, 5, 0) @[DataMem.scala 125:35]
            infer mport io_slave_r_bits_data_MPORT = memory[_io_slave_r_bits_data_T], clock @[DataMem.scala 125:35]
            io.slave.r.bits.data <= io_slave_r_bits_data_MPORT @[DataMem.scala 125:26]
            io.slave.r.bits.id <= readID @[DataMem.scala 126:24]
            io.slave.r.bits.resp <= UInt<1>("h0") @[DataMem.scala 127:26]
            node _rburst_counter_T = not(readLast) @[DataMem.scala 129:47]
            node _rburst_counter_T_1 = and(io.slave.r.ready, _rburst_counter_T) @[DataMem.scala 129:44]
            node _rburst_counter_T_2 = add(rburst_counter, UInt<1>("h1")) @[DataMem.scala 130:22]
            node _rburst_counter_T_3 = tail(_rburst_counter_T_2, 1) @[DataMem.scala 130:22]
            node _rburst_counter_T_4 = and(io.slave.r.ready, readLast) @[DataMem.scala 131:28]
            node _rburst_counter_T_5 = mux(_rburst_counter_T_4, UInt<1>("h0"), rburst_counter) @[DataMem.scala 131:10]
            node _rburst_counter_T_6 = mux(_rburst_counter_T_1, _rburst_counter_T_3, _rburst_counter_T_5) @[DataMem.scala 129:26]
            rburst_counter <= _rburst_counter_T_6 @[DataMem.scala 129:20]
            node _rAddrOffset_T_5 = add(rAddrOffset, UInt<3>("h4")) @[DataMem.scala 136:54]
            node _rAddrOffset_T_6 = tail(_rAddrOffset_T_5, 1) @[DataMem.scala 136:54]
            node _rAddrOffset_T_7 = mux(io.slave.r.ready, _rAddrOffset_T_6, rAddrOffset) @[DataMem.scala 136:23]
            rAddrOffset <= _rAddrOffset_T_7 @[DataMem.scala 136:17]
    node _T_10 = eq(UInt<3>("h0"), writeState) @[DataMem.scala 140:22]
    when _T_10 : @[DataMem.scala 140:22]
      writeState <= UInt<3>("h1") @[DataMem.scala 142:18]
    else :
      node _T_11 = eq(UInt<3>("h1"), writeState) @[DataMem.scala 140:22]
      when _T_11 : @[DataMem.scala 140:22]
        node _T_12 = and(io.slave.aw.valid, io.slave.w.valid) @[DataMem.scala 146:51]
        node _T_13 = or(io.slave.w.valid, _T_12) @[DataMem.scala 146:29]
        when _T_13 : @[DataMem.scala 146:73]
          node _T_14 = eq(UInt<1>("h1"), UInt<1>("h1")) @[DataMem.scala 147:24]
          node _T_15 = and(_T_14, io.slave.w.bits.last) @[DataMem.scala 147:32]
          when _T_15 : @[DataMem.scala 147:56]
            writeState <= UInt<3>("h3") @[DataMem.scala 148:22]
          else :
            node _T_16 = eq(UInt<1>("h1"), UInt<1>("h1")) @[DataMem.scala 149:30]
            when _T_16 : @[DataMem.scala 149:38]
              writeState <= UInt<3>("h5") @[DataMem.scala 150:22]
            else :
              writeState <= UInt<3>("h2") @[DataMem.scala 153:22]
        else :
          when io.slave.aw.valid : @[DataMem.scala 156:36]
            writeState <= UInt<3>("h4") @[DataMem.scala 157:20]
      else :
        node _T_17 = eq(UInt<3>("h4"), writeState) @[DataMem.scala 140:22]
        when _T_17 : @[DataMem.scala 140:22]
          when io.slave.w.valid : @[DataMem.scala 161:30]
            node _T_18 = eq(UInt<1>("h1"), UInt<1>("h1")) @[DataMem.scala 162:24]
            node _T_19 = and(_T_18, io.slave.w.bits.last) @[DataMem.scala 162:32]
            when _T_19 : @[DataMem.scala 162:56]
              writeState <= UInt<3>("h3") @[DataMem.scala 163:22]
            else :
              node _T_20 = eq(UInt<1>("h1"), UInt<1>("h1")) @[DataMem.scala 164:30]
              when _T_20 : @[DataMem.scala 164:38]
                writeState <= UInt<3>("h5") @[DataMem.scala 165:22]
              else :
                writeState <= UInt<3>("h2") @[DataMem.scala 167:22]
        else :
          node _T_21 = eq(UInt<3>("h2"), writeState) @[DataMem.scala 140:22]
          when _T_21 : @[DataMem.scala 140:22]
            node _T_22 = eq(wLatencyCounter, UInt<1>("h0")) @[DataMem.scala 172:28]
            node _T_23 = and(_T_22, io.slave.w.bits.last) @[DataMem.scala 172:48]
            when _T_23 : @[DataMem.scala 172:71]
              writeState <= UInt<3>("h3") @[DataMem.scala 173:20]
            else :
              node _T_24 = eq(wLatencyCounter, UInt<1>("h0")) @[DataMem.scala 174:34]
              when _T_24 : @[DataMem.scala 174:54]
                writeState <= UInt<3>("h5") @[DataMem.scala 175:20]
          else :
            node _T_25 = eq(UInt<3>("h5"), writeState) @[DataMem.scala 140:22]
            when _T_25 : @[DataMem.scala 140:22]
              writeState <= UInt<3>("h1") @[DataMem.scala 179:18]
            else :
              node _T_26 = eq(UInt<3>("h3"), writeState) @[DataMem.scala 140:22]
              when _T_26 : @[DataMem.scala 140:22]
                when io.slave.b.ready : @[DataMem.scala 182:30]
                  writeState <= UInt<3>("h1") @[DataMem.scala 183:20]
    wire _writeData_WIRE : UInt<8>[4] @[DataMem.scala 188:38]
    _writeData_WIRE[0] <= UInt<8>("h0") @[DataMem.scala 188:38]
    _writeData_WIRE[1] <= UInt<8>("h0") @[DataMem.scala 188:38]
    _writeData_WIRE[2] <= UInt<8>("h0") @[DataMem.scala 188:38]
    _writeData_WIRE[3] <= UInt<8>("h0") @[DataMem.scala 188:38]
    wire writeData : UInt<8>[4]
    writeData <= _writeData_WIRE
    node _T_27 = bits(io.slave.w.bits.strb, 0, 0) @[DataMem.scala 190:30]
    node _T_28 = eq(_T_27, UInt<1>("h1")) @[DataMem.scala 190:34]
    when _T_28 : @[DataMem.scala 190:43]
      node _writeData_0_T = bits(io.slave.w.bits.data, 7, 0) @[DataMem.scala 191:43]
      writeData[0] <= _writeData_0_T @[DataMem.scala 191:20]
    else :
      node _writeData_0_T_1 = or(wAddrOffset, UInt<6>("h0")) @[DataMem.scala 193:29]
      node _writeData_0_T_2 = bits(_writeData_0_T_1, 5, 0) @[DataMem.scala 193:29]
      infer mport writeData_0_MPORT = memory[_writeData_0_T_2], clock @[DataMem.scala 193:29]
      node _writeData_0_T_3 = bits(writeData_0_MPORT, 7, 0) @[DataMem.scala 193:42]
      writeData[0] <= _writeData_0_T_3 @[DataMem.scala 193:20]
    node _T_29 = bits(io.slave.w.bits.strb, 1, 1) @[DataMem.scala 190:30]
    node _T_30 = eq(_T_29, UInt<1>("h1")) @[DataMem.scala 190:34]
    when _T_30 : @[DataMem.scala 190:43]
      node _writeData_1_T = bits(io.slave.w.bits.data, 15, 8) @[DataMem.scala 191:43]
      writeData[1] <= _writeData_1_T @[DataMem.scala 191:20]
    else :
      node _writeData_1_T_1 = or(wAddrOffset, UInt<6>("h0")) @[DataMem.scala 193:29]
      node _writeData_1_T_2 = bits(_writeData_1_T_1, 5, 0) @[DataMem.scala 193:29]
      infer mport writeData_1_MPORT = memory[_writeData_1_T_2], clock @[DataMem.scala 193:29]
      node _writeData_1_T_3 = bits(writeData_1_MPORT, 15, 8) @[DataMem.scala 193:42]
      writeData[1] <= _writeData_1_T_3 @[DataMem.scala 193:20]
    node _T_31 = bits(io.slave.w.bits.strb, 2, 2) @[DataMem.scala 190:30]
    node _T_32 = eq(_T_31, UInt<1>("h1")) @[DataMem.scala 190:34]
    when _T_32 : @[DataMem.scala 190:43]
      node _writeData_2_T = bits(io.slave.w.bits.data, 23, 16) @[DataMem.scala 191:43]
      writeData[2] <= _writeData_2_T @[DataMem.scala 191:20]
    else :
      node _writeData_2_T_1 = or(wAddrOffset, UInt<6>("h0")) @[DataMem.scala 193:29]
      node _writeData_2_T_2 = bits(_writeData_2_T_1, 5, 0) @[DataMem.scala 193:29]
      infer mport writeData_2_MPORT = memory[_writeData_2_T_2], clock @[DataMem.scala 193:29]
      node _writeData_2_T_3 = bits(writeData_2_MPORT, 23, 16) @[DataMem.scala 193:42]
      writeData[2] <= _writeData_2_T_3 @[DataMem.scala 193:20]
    node _T_33 = bits(io.slave.w.bits.strb, 3, 3) @[DataMem.scala 190:30]
    node _T_34 = eq(_T_33, UInt<1>("h1")) @[DataMem.scala 190:34]
    when _T_34 : @[DataMem.scala 190:43]
      node _writeData_3_T = bits(io.slave.w.bits.data, 31, 24) @[DataMem.scala 191:43]
      writeData[3] <= _writeData_3_T @[DataMem.scala 191:20]
    else :
      node _writeData_3_T_1 = or(wAddrOffset, UInt<6>("h0")) @[DataMem.scala 193:29]
      node _writeData_3_T_2 = bits(_writeData_3_T_1, 5, 0) @[DataMem.scala 193:29]
      infer mport writeData_3_MPORT = memory[_writeData_3_T_2], clock @[DataMem.scala 193:29]
      node _writeData_3_T_3 = bits(writeData_3_MPORT, 31, 24) @[DataMem.scala 193:42]
      writeData[3] <= _writeData_3_T_3 @[DataMem.scala 193:20]
    node _T_35 = eq(writeState, UInt<3>("h0")) @[DataMem.scala 197:19]
    when _T_35 : @[DataMem.scala 197:30]
      io.slave.aw.ready <= UInt<1>("h0") @[DataMem.scala 198:23]
      io.slave.w.ready <= UInt<1>("h0") @[DataMem.scala 199:22]
      io.slave.b.bits.resp <= UInt<1>("h0") @[DataMem.scala 200:26]
      io.slave.b.valid <= UInt<1>("h0") @[DataMem.scala 201:22]
    else :
      node _T_36 = eq(writeState, UInt<3>("h1")) @[DataMem.scala 203:24]
      when _T_36 : @[DataMem.scala 203:36]
        io.slave.aw.ready <= UInt<1>("h1") @[DataMem.scala 204:23]
        io.slave.w.ready <= UInt<1>("h1") @[DataMem.scala 205:22]
        when io.slave.w.valid : @[DataMem.scala 206:28]
          node _T_37 = or(wAddrOffset, UInt<6>("h0")) @[DataMem.scala 207:13]
          node _T_38 = bits(_T_37, 5, 0) @[DataMem.scala 207:13]
          infer mport MPORT = memory[_T_38], clock @[DataMem.scala 207:13]
          node lo = cat(writeData[1], writeData[0]) @[DataMem.scala 207:46]
          node hi = cat(writeData[3], writeData[2]) @[DataMem.scala 207:46]
          node _T_39 = cat(hi, lo) @[DataMem.scala 207:46]
          MPORT <= _T_39 @[DataMem.scala 207:27]
          writeAddressReg <= wAddrOffset @[DataMem.scala 208:23]
          writeID <= io.slave.aw.bits.id @[DataMem.scala 209:15]
        else :
          when io.slave.aw.valid : @[DataMem.scala 211:34]
            writeAddressReg <= wAddrOffset @[DataMem.scala 212:23]
            writeID <= io.slave.aw.bits.id @[DataMem.scala 213:15]
        io.slave.b.bits.resp <= UInt<1>("h0") @[DataMem.scala 215:26]
        io.slave.b.valid <= UInt<1>("h0") @[DataMem.scala 216:22]
        node _wburst_counter_T = add(wburst_counter, UInt<1>("h1")) @[DataMem.scala 222:24]
        node _wburst_counter_T_1 = tail(_wburst_counter_T, 1) @[DataMem.scala 222:24]
        node _wburst_counter_T_2 = mux(io.slave.w.valid, _wburst_counter_T_1, wburst_counter) @[DataMem.scala 220:26]
        wburst_counter <= _wburst_counter_T_2 @[DataMem.scala 220:20]
      else :
        node _T_40 = eq(writeState, UInt<3>("h4")) @[DataMem.scala 229:24]
        when _T_40 : @[DataMem.scala 229:39]
          io.slave.aw.ready <= UInt<1>("h0") @[DataMem.scala 230:23]
          io.slave.w.ready <= UInt<1>("h1") @[DataMem.scala 231:22]
          io.slave.b.bits.resp <= UInt<1>("h0") @[DataMem.scala 232:26]
          io.slave.b.valid <= UInt<1>("h0") @[DataMem.scala 233:22]
          when io.slave.w.valid : @[DataMem.scala 234:28]
            node _T_41 = bits(writeAddressReg, 5, 0) @[DataMem.scala 235:13]
            infer mport MPORT_1 = memory[_T_41], clock @[DataMem.scala 235:13]
            node lo_1 = cat(writeData[1], writeData[0]) @[DataMem.scala 235:50]
            node hi_1 = cat(writeData[3], writeData[2]) @[DataMem.scala 235:50]
            node _T_42 = cat(hi_1, lo_1) @[DataMem.scala 235:50]
            MPORT_1 <= _T_42 @[DataMem.scala 235:31]
        else :
          node _T_43 = eq(writeState, UInt<3>("h2")) @[DataMem.scala 240:24]
          when _T_43 : @[DataMem.scala 240:39]
            node _wLatencyCounter_T = add(wLatencyCounter, UInt<1>("h1")) @[DataMem.scala 241:40]
            node _wLatencyCounter_T_1 = tail(_wLatencyCounter_T, 1) @[DataMem.scala 241:40]
            wLatencyCounter <= _wLatencyCounter_T_1 @[DataMem.scala 241:21]
          else :
            node _T_44 = eq(writeState, UInt<3>("h5")) @[DataMem.scala 243:24]
            when _T_44 : @[DataMem.scala 243:38]
              wLatencyCounter <= UInt<1>("h0") @[DataMem.scala 244:21]
              io.slave.aw.ready <= UInt<1>("h0") @[DataMem.scala 245:23]
              io.slave.w.ready <= UInt<1>("h0") @[DataMem.scala 246:22]
              io.slave.b.bits.resp <= UInt<1>("h0") @[DataMem.scala 247:26]
              io.slave.b.bits.id <= writeID @[DataMem.scala 248:24]
              node _wAddrOffset_T_5 = add(wAddrOffset, UInt<3>("h4")) @[DataMem.scala 249:32]
              node _wAddrOffset_T_6 = tail(_wAddrOffset_T_5, 1) @[DataMem.scala 249:32]
              wAddrOffset <= _wAddrOffset_T_6 @[DataMem.scala 249:17]
            else :
              node _T_45 = eq(writeState, UInt<3>("h3")) @[DataMem.scala 252:24]
              when _T_45 : @[DataMem.scala 252:37]
                wLatencyCounter <= UInt<1>("h0") @[DataMem.scala 253:21]
                io.slave.aw.ready <= UInt<1>("h0") @[DataMem.scala 254:23]
                io.slave.w.ready <= UInt<1>("h0") @[DataMem.scala 255:22]
                io.slave.b.bits.resp <= UInt<1>("h0") @[DataMem.scala 256:26]
                io.slave.b.bits.id <= writeID @[DataMem.scala 257:24]
                io.slave.b.valid <= UInt<1>("h1") @[DataMem.scala 258:22]
                wburst_counter <= UInt<1>("h0") @[DataMem.scala 260:20]
    when io.dump : @[DataMem.scala 263:17]
      node _T_46 = asUInt(reset) @[DataMem.scala 265:11]
      node _T_47 = eq(_T_46, UInt<1>("h0")) @[DataMem.scala 265:11]
      when _T_47 : @[DataMem.scala 265:11]
        printf(clock, UInt<1>("h1"), "\t\t======== Data Memory Dump ========\n") : printf @[DataMem.scala 265:11]
      node _T_48 = asUInt(reset) @[DataMem.scala 266:11]
      node _T_49 = eq(_T_48, UInt<1>("h0")) @[DataMem.scala 266:11]
      when _T_49 : @[DataMem.scala 266:11]
        printf(clock, UInt<1>("h1"), "\t\tFrom base address 32768\n") : printf_1 @[DataMem.scala 266:11]
      infer mport data_MPORT = memory[UInt<1>("h0")], clock @[DataMem.scala 269:24]
      node data = asSInt(data_MPORT) @[DataMem.scala 269:30]
      node _T_50 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_51 = eq(_T_50, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_51 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[0] (address = %x) = 0x%x (%d)\n", UInt<16>("h8000"), data, data) : printf_2 @[DataMem.scala 270:13]
      infer mport data_MPORT_1 = memory[UInt<1>("h1")], clock @[DataMem.scala 269:24]
      node data_1 = asSInt(data_MPORT_1) @[DataMem.scala 269:30]
      node _T_52 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_53 = eq(_T_52, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_53 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[1] (address = %x) = 0x%x (%d)\n", UInt<16>("h8004"), data_1, data_1) : printf_3 @[DataMem.scala 270:13]
      infer mport data_MPORT_2 = memory[UInt<2>("h2")], clock @[DataMem.scala 269:24]
      node data_2 = asSInt(data_MPORT_2) @[DataMem.scala 269:30]
      node _T_54 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_55 = eq(_T_54, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_55 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[2] (address = %x) = 0x%x (%d)\n", UInt<16>("h8008"), data_2, data_2) : printf_4 @[DataMem.scala 270:13]
      infer mport data_MPORT_3 = memory[UInt<2>("h3")], clock @[DataMem.scala 269:24]
      node data_3 = asSInt(data_MPORT_3) @[DataMem.scala 269:30]
      node _T_56 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_57 = eq(_T_56, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_57 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[3] (address = %x) = 0x%x (%d)\n", UInt<16>("h800c"), data_3, data_3) : printf_5 @[DataMem.scala 270:13]
      infer mport data_MPORT_4 = memory[UInt<3>("h4")], clock @[DataMem.scala 269:24]
      node data_4 = asSInt(data_MPORT_4) @[DataMem.scala 269:30]
      node _T_58 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_59 = eq(_T_58, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_59 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[4] (address = %x) = 0x%x (%d)\n", UInt<16>("h8010"), data_4, data_4) : printf_6 @[DataMem.scala 270:13]
      infer mport data_MPORT_5 = memory[UInt<3>("h5")], clock @[DataMem.scala 269:24]
      node data_5 = asSInt(data_MPORT_5) @[DataMem.scala 269:30]
      node _T_60 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_61 = eq(_T_60, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_61 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[5] (address = %x) = 0x%x (%d)\n", UInt<16>("h8014"), data_5, data_5) : printf_7 @[DataMem.scala 270:13]
      infer mport data_MPORT_6 = memory[UInt<3>("h6")], clock @[DataMem.scala 269:24]
      node data_6 = asSInt(data_MPORT_6) @[DataMem.scala 269:30]
      node _T_62 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_63 = eq(_T_62, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_63 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[6] (address = %x) = 0x%x (%d)\n", UInt<16>("h8018"), data_6, data_6) : printf_8 @[DataMem.scala 270:13]
      infer mport data_MPORT_7 = memory[UInt<3>("h7")], clock @[DataMem.scala 269:24]
      node data_7 = asSInt(data_MPORT_7) @[DataMem.scala 269:30]
      node _T_64 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_65 = eq(_T_64, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_65 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[7] (address = %x) = 0x%x (%d)\n", UInt<16>("h801c"), data_7, data_7) : printf_9 @[DataMem.scala 270:13]
      infer mport data_MPORT_8 = memory[UInt<4>("h8")], clock @[DataMem.scala 269:24]
      node data_8 = asSInt(data_MPORT_8) @[DataMem.scala 269:30]
      node _T_66 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_67 = eq(_T_66, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_67 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[8] (address = %x) = 0x%x (%d)\n", UInt<16>("h8020"), data_8, data_8) : printf_10 @[DataMem.scala 270:13]
      infer mport data_MPORT_9 = memory[UInt<4>("h9")], clock @[DataMem.scala 269:24]
      node data_9 = asSInt(data_MPORT_9) @[DataMem.scala 269:30]
      node _T_68 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_69 = eq(_T_68, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_69 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[9] (address = %x) = 0x%x (%d)\n", UInt<16>("h8024"), data_9, data_9) : printf_11 @[DataMem.scala 270:13]
      infer mport data_MPORT_10 = memory[UInt<4>("ha")], clock @[DataMem.scala 269:24]
      node data_10 = asSInt(data_MPORT_10) @[DataMem.scala 269:30]
      node _T_70 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_71 = eq(_T_70, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_71 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[10] (address = %x) = 0x%x (%d)\n", UInt<16>("h8028"), data_10, data_10) : printf_12 @[DataMem.scala 270:13]
      infer mport data_MPORT_11 = memory[UInt<4>("hb")], clock @[DataMem.scala 269:24]
      node data_11 = asSInt(data_MPORT_11) @[DataMem.scala 269:30]
      node _T_72 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_73 = eq(_T_72, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_73 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[11] (address = %x) = 0x%x (%d)\n", UInt<16>("h802c"), data_11, data_11) : printf_13 @[DataMem.scala 270:13]
      infer mport data_MPORT_12 = memory[UInt<4>("hc")], clock @[DataMem.scala 269:24]
      node data_12 = asSInt(data_MPORT_12) @[DataMem.scala 269:30]
      node _T_74 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_75 = eq(_T_74, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_75 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[12] (address = %x) = 0x%x (%d)\n", UInt<16>("h8030"), data_12, data_12) : printf_14 @[DataMem.scala 270:13]
      infer mport data_MPORT_13 = memory[UInt<4>("hd")], clock @[DataMem.scala 269:24]
      node data_13 = asSInt(data_MPORT_13) @[DataMem.scala 269:30]
      node _T_76 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_77 = eq(_T_76, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_77 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[13] (address = %x) = 0x%x (%d)\n", UInt<16>("h8034"), data_13, data_13) : printf_15 @[DataMem.scala 270:13]
      infer mport data_MPORT_14 = memory[UInt<4>("he")], clock @[DataMem.scala 269:24]
      node data_14 = asSInt(data_MPORT_14) @[DataMem.scala 269:30]
      node _T_78 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_79 = eq(_T_78, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_79 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[14] (address = %x) = 0x%x (%d)\n", UInt<16>("h8038"), data_14, data_14) : printf_16 @[DataMem.scala 270:13]
      infer mport data_MPORT_15 = memory[UInt<4>("hf")], clock @[DataMem.scala 269:24]
      node data_15 = asSInt(data_MPORT_15) @[DataMem.scala 269:30]
      node _T_80 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_81 = eq(_T_80, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_81 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[15] (address = %x) = 0x%x (%d)\n", UInt<16>("h803c"), data_15, data_15) : printf_17 @[DataMem.scala 270:13]
      infer mport data_MPORT_16 = memory[UInt<5>("h10")], clock @[DataMem.scala 269:24]
      node data_16 = asSInt(data_MPORT_16) @[DataMem.scala 269:30]
      node _T_82 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_83 = eq(_T_82, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_83 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[16] (address = %x) = 0x%x (%d)\n", UInt<16>("h8040"), data_16, data_16) : printf_18 @[DataMem.scala 270:13]
      infer mport data_MPORT_17 = memory[UInt<5>("h11")], clock @[DataMem.scala 269:24]
      node data_17 = asSInt(data_MPORT_17) @[DataMem.scala 269:30]
      node _T_84 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_85 = eq(_T_84, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_85 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[17] (address = %x) = 0x%x (%d)\n", UInt<16>("h8044"), data_17, data_17) : printf_19 @[DataMem.scala 270:13]
      infer mport data_MPORT_18 = memory[UInt<5>("h12")], clock @[DataMem.scala 269:24]
      node data_18 = asSInt(data_MPORT_18) @[DataMem.scala 269:30]
      node _T_86 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_87 = eq(_T_86, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_87 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[18] (address = %x) = 0x%x (%d)\n", UInt<16>("h8048"), data_18, data_18) : printf_20 @[DataMem.scala 270:13]
      infer mport data_MPORT_19 = memory[UInt<5>("h13")], clock @[DataMem.scala 269:24]
      node data_19 = asSInt(data_MPORT_19) @[DataMem.scala 269:30]
      node _T_88 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_89 = eq(_T_88, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_89 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[19] (address = %x) = 0x%x (%d)\n", UInt<16>("h804c"), data_19, data_19) : printf_21 @[DataMem.scala 270:13]
      infer mport data_MPORT_20 = memory[UInt<5>("h14")], clock @[DataMem.scala 269:24]
      node data_20 = asSInt(data_MPORT_20) @[DataMem.scala 269:30]
      node _T_90 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_91 = eq(_T_90, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_91 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[20] (address = %x) = 0x%x (%d)\n", UInt<16>("h8050"), data_20, data_20) : printf_22 @[DataMem.scala 270:13]
      infer mport data_MPORT_21 = memory[UInt<5>("h15")], clock @[DataMem.scala 269:24]
      node data_21 = asSInt(data_MPORT_21) @[DataMem.scala 269:30]
      node _T_92 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_93 = eq(_T_92, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_93 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[21] (address = %x) = 0x%x (%d)\n", UInt<16>("h8054"), data_21, data_21) : printf_23 @[DataMem.scala 270:13]
      infer mport data_MPORT_22 = memory[UInt<5>("h16")], clock @[DataMem.scala 269:24]
      node data_22 = asSInt(data_MPORT_22) @[DataMem.scala 269:30]
      node _T_94 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_95 = eq(_T_94, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_95 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[22] (address = %x) = 0x%x (%d)\n", UInt<16>("h8058"), data_22, data_22) : printf_24 @[DataMem.scala 270:13]
      infer mport data_MPORT_23 = memory[UInt<5>("h17")], clock @[DataMem.scala 269:24]
      node data_23 = asSInt(data_MPORT_23) @[DataMem.scala 269:30]
      node _T_96 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_97 = eq(_T_96, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_97 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[23] (address = %x) = 0x%x (%d)\n", UInt<16>("h805c"), data_23, data_23) : printf_25 @[DataMem.scala 270:13]
      infer mport data_MPORT_24 = memory[UInt<5>("h18")], clock @[DataMem.scala 269:24]
      node data_24 = asSInt(data_MPORT_24) @[DataMem.scala 269:30]
      node _T_98 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_99 = eq(_T_98, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_99 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[24] (address = %x) = 0x%x (%d)\n", UInt<16>("h8060"), data_24, data_24) : printf_26 @[DataMem.scala 270:13]
      infer mport data_MPORT_25 = memory[UInt<5>("h19")], clock @[DataMem.scala 269:24]
      node data_25 = asSInt(data_MPORT_25) @[DataMem.scala 269:30]
      node _T_100 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_101 = eq(_T_100, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_101 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[25] (address = %x) = 0x%x (%d)\n", UInt<16>("h8064"), data_25, data_25) : printf_27 @[DataMem.scala 270:13]
      infer mport data_MPORT_26 = memory[UInt<5>("h1a")], clock @[DataMem.scala 269:24]
      node data_26 = asSInt(data_MPORT_26) @[DataMem.scala 269:30]
      node _T_102 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_103 = eq(_T_102, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_103 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[26] (address = %x) = 0x%x (%d)\n", UInt<16>("h8068"), data_26, data_26) : printf_28 @[DataMem.scala 270:13]
      infer mport data_MPORT_27 = memory[UInt<5>("h1b")], clock @[DataMem.scala 269:24]
      node data_27 = asSInt(data_MPORT_27) @[DataMem.scala 269:30]
      node _T_104 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_105 = eq(_T_104, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_105 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[27] (address = %x) = 0x%x (%d)\n", UInt<16>("h806c"), data_27, data_27) : printf_29 @[DataMem.scala 270:13]
      infer mport data_MPORT_28 = memory[UInt<5>("h1c")], clock @[DataMem.scala 269:24]
      node data_28 = asSInt(data_MPORT_28) @[DataMem.scala 269:30]
      node _T_106 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_107 = eq(_T_106, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_107 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[28] (address = %x) = 0x%x (%d)\n", UInt<16>("h8070"), data_28, data_28) : printf_30 @[DataMem.scala 270:13]
      infer mport data_MPORT_29 = memory[UInt<5>("h1d")], clock @[DataMem.scala 269:24]
      node data_29 = asSInt(data_MPORT_29) @[DataMem.scala 269:30]
      node _T_108 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_109 = eq(_T_108, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_109 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[29] (address = %x) = 0x%x (%d)\n", UInt<16>("h8074"), data_29, data_29) : printf_31 @[DataMem.scala 270:13]
      infer mport data_MPORT_30 = memory[UInt<5>("h1e")], clock @[DataMem.scala 269:24]
      node data_30 = asSInt(data_MPORT_30) @[DataMem.scala 269:30]
      node _T_110 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_111 = eq(_T_110, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_111 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[30] (address = %x) = 0x%x (%d)\n", UInt<16>("h8078"), data_30, data_30) : printf_32 @[DataMem.scala 270:13]
      infer mport data_MPORT_31 = memory[UInt<5>("h1f")], clock @[DataMem.scala 269:24]
      node data_31 = asSInt(data_MPORT_31) @[DataMem.scala 269:30]
      node _T_112 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_113 = eq(_T_112, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_113 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[31] (address = %x) = 0x%x (%d)\n", UInt<16>("h807c"), data_31, data_31) : printf_33 @[DataMem.scala 270:13]
      infer mport data_MPORT_32 = memory[UInt<6>("h20")], clock @[DataMem.scala 269:24]
      node data_32 = asSInt(data_MPORT_32) @[DataMem.scala 269:30]
      node _T_114 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_115 = eq(_T_114, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_115 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[32] (address = %x) = 0x%x (%d)\n", UInt<16>("h8080"), data_32, data_32) : printf_34 @[DataMem.scala 270:13]
      infer mport data_MPORT_33 = memory[UInt<6>("h21")], clock @[DataMem.scala 269:24]
      node data_33 = asSInt(data_MPORT_33) @[DataMem.scala 269:30]
      node _T_116 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_117 = eq(_T_116, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_117 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[33] (address = %x) = 0x%x (%d)\n", UInt<16>("h8084"), data_33, data_33) : printf_35 @[DataMem.scala 270:13]
      infer mport data_MPORT_34 = memory[UInt<6>("h22")], clock @[DataMem.scala 269:24]
      node data_34 = asSInt(data_MPORT_34) @[DataMem.scala 269:30]
      node _T_118 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_119 = eq(_T_118, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_119 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[34] (address = %x) = 0x%x (%d)\n", UInt<16>("h8088"), data_34, data_34) : printf_36 @[DataMem.scala 270:13]
      infer mport data_MPORT_35 = memory[UInt<6>("h23")], clock @[DataMem.scala 269:24]
      node data_35 = asSInt(data_MPORT_35) @[DataMem.scala 269:30]
      node _T_120 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_121 = eq(_T_120, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_121 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[35] (address = %x) = 0x%x (%d)\n", UInt<16>("h808c"), data_35, data_35) : printf_37 @[DataMem.scala 270:13]
      infer mport data_MPORT_36 = memory[UInt<6>("h24")], clock @[DataMem.scala 269:24]
      node data_36 = asSInt(data_MPORT_36) @[DataMem.scala 269:30]
      node _T_122 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_123 = eq(_T_122, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_123 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[36] (address = %x) = 0x%x (%d)\n", UInt<16>("h8090"), data_36, data_36) : printf_38 @[DataMem.scala 270:13]
      infer mport data_MPORT_37 = memory[UInt<6>("h25")], clock @[DataMem.scala 269:24]
      node data_37 = asSInt(data_MPORT_37) @[DataMem.scala 269:30]
      node _T_124 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_125 = eq(_T_124, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_125 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[37] (address = %x) = 0x%x (%d)\n", UInt<16>("h8094"), data_37, data_37) : printf_39 @[DataMem.scala 270:13]
      infer mport data_MPORT_38 = memory[UInt<6>("h26")], clock @[DataMem.scala 269:24]
      node data_38 = asSInt(data_MPORT_38) @[DataMem.scala 269:30]
      node _T_126 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_127 = eq(_T_126, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_127 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[38] (address = %x) = 0x%x (%d)\n", UInt<16>("h8098"), data_38, data_38) : printf_40 @[DataMem.scala 270:13]
      infer mport data_MPORT_39 = memory[UInt<6>("h27")], clock @[DataMem.scala 269:24]
      node data_39 = asSInt(data_MPORT_39) @[DataMem.scala 269:30]
      node _T_128 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_129 = eq(_T_128, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_129 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[39] (address = %x) = 0x%x (%d)\n", UInt<16>("h809c"), data_39, data_39) : printf_41 @[DataMem.scala 270:13]
      infer mport data_MPORT_40 = memory[UInt<6>("h28")], clock @[DataMem.scala 269:24]
      node data_40 = asSInt(data_MPORT_40) @[DataMem.scala 269:30]
      node _T_130 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_131 = eq(_T_130, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_131 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[40] (address = %x) = 0x%x (%d)\n", UInt<16>("h80a0"), data_40, data_40) : printf_42 @[DataMem.scala 270:13]
      infer mport data_MPORT_41 = memory[UInt<6>("h29")], clock @[DataMem.scala 269:24]
      node data_41 = asSInt(data_MPORT_41) @[DataMem.scala 269:30]
      node _T_132 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_133 = eq(_T_132, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_133 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[41] (address = %x) = 0x%x (%d)\n", UInt<16>("h80a4"), data_41, data_41) : printf_43 @[DataMem.scala 270:13]
      infer mport data_MPORT_42 = memory[UInt<6>("h2a")], clock @[DataMem.scala 269:24]
      node data_42 = asSInt(data_MPORT_42) @[DataMem.scala 269:30]
      node _T_134 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_135 = eq(_T_134, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_135 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[42] (address = %x) = 0x%x (%d)\n", UInt<16>("h80a8"), data_42, data_42) : printf_44 @[DataMem.scala 270:13]
      infer mport data_MPORT_43 = memory[UInt<6>("h2b")], clock @[DataMem.scala 269:24]
      node data_43 = asSInt(data_MPORT_43) @[DataMem.scala 269:30]
      node _T_136 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_137 = eq(_T_136, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_137 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[43] (address = %x) = 0x%x (%d)\n", UInt<16>("h80ac"), data_43, data_43) : printf_45 @[DataMem.scala 270:13]
      infer mport data_MPORT_44 = memory[UInt<6>("h2c")], clock @[DataMem.scala 269:24]
      node data_44 = asSInt(data_MPORT_44) @[DataMem.scala 269:30]
      node _T_138 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_139 = eq(_T_138, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_139 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[44] (address = %x) = 0x%x (%d)\n", UInt<16>("h80b0"), data_44, data_44) : printf_46 @[DataMem.scala 270:13]
      infer mport data_MPORT_45 = memory[UInt<6>("h2d")], clock @[DataMem.scala 269:24]
      node data_45 = asSInt(data_MPORT_45) @[DataMem.scala 269:30]
      node _T_140 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_141 = eq(_T_140, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_141 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[45] (address = %x) = 0x%x (%d)\n", UInt<16>("h80b4"), data_45, data_45) : printf_47 @[DataMem.scala 270:13]
      infer mport data_MPORT_46 = memory[UInt<6>("h2e")], clock @[DataMem.scala 269:24]
      node data_46 = asSInt(data_MPORT_46) @[DataMem.scala 269:30]
      node _T_142 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_143 = eq(_T_142, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_143 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[46] (address = %x) = 0x%x (%d)\n", UInt<16>("h80b8"), data_46, data_46) : printf_48 @[DataMem.scala 270:13]
      infer mport data_MPORT_47 = memory[UInt<6>("h2f")], clock @[DataMem.scala 269:24]
      node data_47 = asSInt(data_MPORT_47) @[DataMem.scala 269:30]
      node _T_144 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_145 = eq(_T_144, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_145 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[47] (address = %x) = 0x%x (%d)\n", UInt<16>("h80bc"), data_47, data_47) : printf_49 @[DataMem.scala 270:13]
      infer mport data_MPORT_48 = memory[UInt<6>("h30")], clock @[DataMem.scala 269:24]
      node data_48 = asSInt(data_MPORT_48) @[DataMem.scala 269:30]
      node _T_146 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_147 = eq(_T_146, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_147 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[48] (address = %x) = 0x%x (%d)\n", UInt<16>("h80c0"), data_48, data_48) : printf_50 @[DataMem.scala 270:13]
      infer mport data_MPORT_49 = memory[UInt<6>("h31")], clock @[DataMem.scala 269:24]
      node data_49 = asSInt(data_MPORT_49) @[DataMem.scala 269:30]
      node _T_148 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_149 = eq(_T_148, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_149 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[49] (address = %x) = 0x%x (%d)\n", UInt<16>("h80c4"), data_49, data_49) : printf_51 @[DataMem.scala 270:13]
      infer mport data_MPORT_50 = memory[UInt<6>("h32")], clock @[DataMem.scala 269:24]
      node data_50 = asSInt(data_MPORT_50) @[DataMem.scala 269:30]
      node _T_150 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_151 = eq(_T_150, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_151 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[50] (address = %x) = 0x%x (%d)\n", UInt<16>("h80c8"), data_50, data_50) : printf_52 @[DataMem.scala 270:13]
      infer mport data_MPORT_51 = memory[UInt<6>("h33")], clock @[DataMem.scala 269:24]
      node data_51 = asSInt(data_MPORT_51) @[DataMem.scala 269:30]
      node _T_152 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_153 = eq(_T_152, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_153 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[51] (address = %x) = 0x%x (%d)\n", UInt<16>("h80cc"), data_51, data_51) : printf_53 @[DataMem.scala 270:13]
      infer mport data_MPORT_52 = memory[UInt<6>("h34")], clock @[DataMem.scala 269:24]
      node data_52 = asSInt(data_MPORT_52) @[DataMem.scala 269:30]
      node _T_154 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_155 = eq(_T_154, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_155 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[52] (address = %x) = 0x%x (%d)\n", UInt<16>("h80d0"), data_52, data_52) : printf_54 @[DataMem.scala 270:13]
      infer mport data_MPORT_53 = memory[UInt<6>("h35")], clock @[DataMem.scala 269:24]
      node data_53 = asSInt(data_MPORT_53) @[DataMem.scala 269:30]
      node _T_156 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_157 = eq(_T_156, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_157 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[53] (address = %x) = 0x%x (%d)\n", UInt<16>("h80d4"), data_53, data_53) : printf_55 @[DataMem.scala 270:13]
      infer mport data_MPORT_54 = memory[UInt<6>("h36")], clock @[DataMem.scala 269:24]
      node data_54 = asSInt(data_MPORT_54) @[DataMem.scala 269:30]
      node _T_158 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_159 = eq(_T_158, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_159 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[54] (address = %x) = 0x%x (%d)\n", UInt<16>("h80d8"), data_54, data_54) : printf_56 @[DataMem.scala 270:13]
      infer mport data_MPORT_55 = memory[UInt<6>("h37")], clock @[DataMem.scala 269:24]
      node data_55 = asSInt(data_MPORT_55) @[DataMem.scala 269:30]
      node _T_160 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_161 = eq(_T_160, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_161 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[55] (address = %x) = 0x%x (%d)\n", UInt<16>("h80dc"), data_55, data_55) : printf_57 @[DataMem.scala 270:13]
      infer mport data_MPORT_56 = memory[UInt<6>("h38")], clock @[DataMem.scala 269:24]
      node data_56 = asSInt(data_MPORT_56) @[DataMem.scala 269:30]
      node _T_162 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_163 = eq(_T_162, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_163 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[56] (address = %x) = 0x%x (%d)\n", UInt<16>("h80e0"), data_56, data_56) : printf_58 @[DataMem.scala 270:13]
      infer mport data_MPORT_57 = memory[UInt<6>("h39")], clock @[DataMem.scala 269:24]
      node data_57 = asSInt(data_MPORT_57) @[DataMem.scala 269:30]
      node _T_164 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_165 = eq(_T_164, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_165 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[57] (address = %x) = 0x%x (%d)\n", UInt<16>("h80e4"), data_57, data_57) : printf_59 @[DataMem.scala 270:13]
      infer mport data_MPORT_58 = memory[UInt<6>("h3a")], clock @[DataMem.scala 269:24]
      node data_58 = asSInt(data_MPORT_58) @[DataMem.scala 269:30]
      node _T_166 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_167 = eq(_T_166, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_167 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[58] (address = %x) = 0x%x (%d)\n", UInt<16>("h80e8"), data_58, data_58) : printf_60 @[DataMem.scala 270:13]
      infer mport data_MPORT_59 = memory[UInt<6>("h3b")], clock @[DataMem.scala 269:24]
      node data_59 = asSInt(data_MPORT_59) @[DataMem.scala 269:30]
      node _T_168 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_169 = eq(_T_168, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_169 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[59] (address = %x) = 0x%x (%d)\n", UInt<16>("h80ec"), data_59, data_59) : printf_61 @[DataMem.scala 270:13]
      infer mport data_MPORT_60 = memory[UInt<6>("h3c")], clock @[DataMem.scala 269:24]
      node data_60 = asSInt(data_MPORT_60) @[DataMem.scala 269:30]
      node _T_170 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_171 = eq(_T_170, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_171 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[60] (address = %x) = 0x%x (%d)\n", UInt<16>("h80f0"), data_60, data_60) : printf_62 @[DataMem.scala 270:13]
      infer mport data_MPORT_61 = memory[UInt<6>("h3d")], clock @[DataMem.scala 269:24]
      node data_61 = asSInt(data_MPORT_61) @[DataMem.scala 269:30]
      node _T_172 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_173 = eq(_T_172, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_173 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[61] (address = %x) = 0x%x (%d)\n", UInt<16>("h80f4"), data_61, data_61) : printf_63 @[DataMem.scala 270:13]
      infer mport data_MPORT_62 = memory[UInt<6>("h3e")], clock @[DataMem.scala 269:24]
      node data_62 = asSInt(data_MPORT_62) @[DataMem.scala 269:30]
      node _T_174 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_175 = eq(_T_174, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_175 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[62] (address = %x) = 0x%x (%d)\n", UInt<16>("h80f8"), data_62, data_62) : printf_64 @[DataMem.scala 270:13]
      infer mport data_MPORT_63 = memory[UInt<6>("h3f")], clock @[DataMem.scala 269:24]
      node data_63 = asSInt(data_MPORT_63) @[DataMem.scala 269:30]
      node _T_176 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_177 = eq(_T_176, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_177 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[63] (address = %x) = 0x%x (%d)\n", UInt<16>("h80fc"), data_63, data_63) : printf_65 @[DataMem.scala 270:13]
      node _T_178 = asUInt(reset) @[DataMem.scala 274:11]
      node _T_179 = eq(_T_178, UInt<1>("h0")) @[DataMem.scala 274:11]
      when _T_179 : @[DataMem.scala 274:11]
        printf(clock, UInt<1>("h1"), "\n") : printf_66 @[DataMem.scala 274:11]

  module DataMem_1 :
    input clock : Clock
    input reset : Reset
    output io : { slave : { flip aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}, flip ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, flip dump : UInt<1>}

    cmem memory : UInt<32> [64] @[DataMem.scala 23:19]
    reg readID : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[DataMem.scala 28:23]
    reg rAddrOffset : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DataMem.scala 29:28]
    node _wAddrOffset_T = sub(io.slave.aw.bits.addr, UInt<17>("h10000")) @[DataMem.scala 31:29]
    node _wAddrOffset_T_1 = tail(_wAddrOffset_T, 1) @[DataMem.scala 31:29]
    node _wAddrOffset_T_2 = not(UInt<32>("h3")) @[DataMem.scala 31:45]
    node _wAddrOffset_T_3 = and(_wAddrOffset_T_1, _wAddrOffset_T_2) @[DataMem.scala 31:43]
    node _wAddrOffset_T_4 = dshr(_wAddrOffset_T_3, UInt<2>("h2")) @[DataMem.scala 31:62]
    wire wAddrOffset : UInt
    wAddrOffset <= _wAddrOffset_T_4
    reg writeAddressReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DataMem.scala 33:32]
    reg writeID : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[DataMem.scala 34:24]
    reg writeState : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[DataMem.scala 37:27]
    reg readState : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[DataMem.scala 38:26]
    reg rLatencyCounter : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[DataMem.scala 39:32]
    reg wLatencyCounter : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[DataMem.scala 40:32]
    reg rlength : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[DataMem.scala 43:31]
    reg rburst_counter : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[DataMem.scala 44:31]
    reg wburst_counter : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[DataMem.scala 45:31]
    node _readLast_T = eq(rburst_counter, rlength) @[DataMem.scala 47:50]
    wire readLast : UInt<1>
    readLast <= _readLast_T
    io.slave.aw.ready <= UInt<1>("h0") @[DataMem.scala 52:21]
    io.slave.w.ready <= UInt<1>("h0") @[DataMem.scala 55:20]
    io.slave.b.bits.id <= UInt<1>("h0") @[DataMem.scala 58:22]
    io.slave.b.bits.resp <= UInt<1>("h0") @[DataMem.scala 59:24]
    io.slave.b.valid <= UInt<1>("h0") @[DataMem.scala 60:20]
    io.slave.ar.ready <= UInt<1>("h0") @[DataMem.scala 63:21]
    io.slave.r.bits.id <= UInt<1>("h0") @[DataMem.scala 66:22]
    io.slave.r.bits.data <= UInt<1>("h0") @[DataMem.scala 67:24]
    io.slave.r.bits.resp <= UInt<1>("h0") @[DataMem.scala 68:24]
    io.slave.r.bits.last <= readLast @[DataMem.scala 69:24]
    io.slave.r.valid <= UInt<1>("h0") @[DataMem.scala 70:20]
    node _T = eq(UInt<2>("h0"), readState) @[DataMem.scala 74:21]
    when _T : @[DataMem.scala 74:21]
      when io.slave.ar.valid : @[DataMem.scala 76:31]
        node _T_1 = eq(UInt<7>("h50"), UInt<1>("h1")) @[DataMem.scala 77:24]
        when _T_1 : @[DataMem.scala 77:33]
          readState <= UInt<2>("h2") @[DataMem.scala 78:21]
        else :
          readState <= UInt<2>("h1") @[DataMem.scala 81:21]
    else :
      node _T_2 = eq(UInt<2>("h1"), readState) @[DataMem.scala 74:21]
      when _T_2 : @[DataMem.scala 74:21]
        node _T_3 = eq(rLatencyCounter, UInt<7>("h4f")) @[DataMem.scala 86:28]
        when _T_3 : @[DataMem.scala 86:49]
          readState <= UInt<2>("h2") @[DataMem.scala 87:19]
      else :
        node _T_4 = eq(UInt<2>("h2"), readState) @[DataMem.scala 74:21]
        when _T_4 : @[DataMem.scala 74:21]
          when io.slave.r.ready : @[DataMem.scala 91:29]
            readState <= UInt<2>("h3") @[DataMem.scala 92:19]
        else :
          node _T_5 = eq(UInt<2>("h3"), readState) @[DataMem.scala 74:21]
          when _T_5 : @[DataMem.scala 74:21]
            when readLast : @[DataMem.scala 96:21]
              readState <= UInt<2>("h0") @[DataMem.scala 97:19]
            else :
              readState <= UInt<2>("h2") @[DataMem.scala 99:19]
    node _T_6 = eq(readState, UInt<2>("h0")) @[DataMem.scala 104:18]
    when _T_6 : @[DataMem.scala 104:29]
      io.slave.ar.ready <= UInt<1>("h1") @[DataMem.scala 105:23]
      io.slave.r.valid <= UInt<1>("h0") @[DataMem.scala 106:22]
      node _rAddrOffset_T = sub(io.slave.ar.bits.addr, UInt<17>("h10000")) @[DataMem.scala 107:44]
      node _rAddrOffset_T_1 = tail(_rAddrOffset_T, 1) @[DataMem.scala 107:44]
      node _rAddrOffset_T_2 = not(UInt<32>("h3")) @[DataMem.scala 107:60]
      node _rAddrOffset_T_3 = and(_rAddrOffset_T_1, _rAddrOffset_T_2) @[DataMem.scala 107:58]
      node _rAddrOffset_T_4 = dshr(_rAddrOffset_T_3, UInt<2>("h2")) @[DataMem.scala 107:77]
      rAddrOffset <= _rAddrOffset_T_4 @[DataMem.scala 107:17]
      readID <= io.slave.ar.bits.id @[DataMem.scala 108:12]
      node _rlength_T = mux(io.slave.ar.valid, io.slave.ar.bits.len, rlength) @[DataMem.scala 111:19]
      rlength <= _rlength_T @[DataMem.scala 111:13]
    else :
      node _T_7 = eq(readState, UInt<2>("h1")) @[DataMem.scala 115:23]
      when _T_7 : @[DataMem.scala 115:38]
        node _rLatencyCounter_T = add(rLatencyCounter, UInt<1>("h1")) @[DataMem.scala 116:40]
        node _rLatencyCounter_T_1 = tail(_rLatencyCounter_T, 1) @[DataMem.scala 116:40]
        rLatencyCounter <= _rLatencyCounter_T_1 @[DataMem.scala 116:21]
      else :
        node _T_8 = eq(readState, UInt<2>("h2")) @[DataMem.scala 118:23]
        when _T_8 : @[DataMem.scala 118:38]
          skip
        else :
          node _T_9 = eq(readState, UInt<2>("h3")) @[DataMem.scala 121:23]
          when _T_9 : @[DataMem.scala 121:34]
            rLatencyCounter <= UInt<1>("h0") @[DataMem.scala 122:21]
            io.slave.ar.ready <= UInt<1>("h0") @[DataMem.scala 123:23]
            io.slave.r.valid <= UInt<1>("h1") @[DataMem.scala 124:22]
            node _io_slave_r_bits_data_T = bits(rAddrOffset, 5, 0) @[DataMem.scala 125:35]
            infer mport io_slave_r_bits_data_MPORT = memory[_io_slave_r_bits_data_T], clock @[DataMem.scala 125:35]
            io.slave.r.bits.data <= io_slave_r_bits_data_MPORT @[DataMem.scala 125:26]
            io.slave.r.bits.id <= readID @[DataMem.scala 126:24]
            io.slave.r.bits.resp <= UInt<1>("h0") @[DataMem.scala 127:26]
            node _rburst_counter_T = not(readLast) @[DataMem.scala 129:47]
            node _rburst_counter_T_1 = and(io.slave.r.ready, _rburst_counter_T) @[DataMem.scala 129:44]
            node _rburst_counter_T_2 = add(rburst_counter, UInt<1>("h1")) @[DataMem.scala 130:22]
            node _rburst_counter_T_3 = tail(_rburst_counter_T_2, 1) @[DataMem.scala 130:22]
            node _rburst_counter_T_4 = and(io.slave.r.ready, readLast) @[DataMem.scala 131:28]
            node _rburst_counter_T_5 = mux(_rburst_counter_T_4, UInt<1>("h0"), rburst_counter) @[DataMem.scala 131:10]
            node _rburst_counter_T_6 = mux(_rburst_counter_T_1, _rburst_counter_T_3, _rburst_counter_T_5) @[DataMem.scala 129:26]
            rburst_counter <= _rburst_counter_T_6 @[DataMem.scala 129:20]
            node _rAddrOffset_T_5 = add(rAddrOffset, UInt<3>("h4")) @[DataMem.scala 136:54]
            node _rAddrOffset_T_6 = tail(_rAddrOffset_T_5, 1) @[DataMem.scala 136:54]
            node _rAddrOffset_T_7 = mux(io.slave.r.ready, _rAddrOffset_T_6, rAddrOffset) @[DataMem.scala 136:23]
            rAddrOffset <= _rAddrOffset_T_7 @[DataMem.scala 136:17]
    node _T_10 = eq(UInt<3>("h0"), writeState) @[DataMem.scala 140:22]
    when _T_10 : @[DataMem.scala 140:22]
      writeState <= UInt<3>("h1") @[DataMem.scala 142:18]
    else :
      node _T_11 = eq(UInt<3>("h1"), writeState) @[DataMem.scala 140:22]
      when _T_11 : @[DataMem.scala 140:22]
        node _T_12 = and(io.slave.aw.valid, io.slave.w.valid) @[DataMem.scala 146:51]
        node _T_13 = or(io.slave.w.valid, _T_12) @[DataMem.scala 146:29]
        when _T_13 : @[DataMem.scala 146:73]
          node _T_14 = eq(UInt<7>("h50"), UInt<1>("h1")) @[DataMem.scala 147:24]
          node _T_15 = and(_T_14, io.slave.w.bits.last) @[DataMem.scala 147:32]
          when _T_15 : @[DataMem.scala 147:56]
            writeState <= UInt<3>("h3") @[DataMem.scala 148:22]
          else :
            node _T_16 = eq(UInt<7>("h50"), UInt<1>("h1")) @[DataMem.scala 149:30]
            when _T_16 : @[DataMem.scala 149:38]
              writeState <= UInt<3>("h5") @[DataMem.scala 150:22]
            else :
              writeState <= UInt<3>("h2") @[DataMem.scala 153:22]
        else :
          when io.slave.aw.valid : @[DataMem.scala 156:36]
            writeState <= UInt<3>("h4") @[DataMem.scala 157:20]
      else :
        node _T_17 = eq(UInt<3>("h4"), writeState) @[DataMem.scala 140:22]
        when _T_17 : @[DataMem.scala 140:22]
          when io.slave.w.valid : @[DataMem.scala 161:30]
            node _T_18 = eq(UInt<7>("h50"), UInt<1>("h1")) @[DataMem.scala 162:24]
            node _T_19 = and(_T_18, io.slave.w.bits.last) @[DataMem.scala 162:32]
            when _T_19 : @[DataMem.scala 162:56]
              writeState <= UInt<3>("h3") @[DataMem.scala 163:22]
            else :
              node _T_20 = eq(UInt<7>("h50"), UInt<1>("h1")) @[DataMem.scala 164:30]
              when _T_20 : @[DataMem.scala 164:38]
                writeState <= UInt<3>("h5") @[DataMem.scala 165:22]
              else :
                writeState <= UInt<3>("h2") @[DataMem.scala 167:22]
        else :
          node _T_21 = eq(UInt<3>("h2"), writeState) @[DataMem.scala 140:22]
          when _T_21 : @[DataMem.scala 140:22]
            node _T_22 = eq(wLatencyCounter, UInt<7>("h4f")) @[DataMem.scala 172:28]
            node _T_23 = and(_T_22, io.slave.w.bits.last) @[DataMem.scala 172:48]
            when _T_23 : @[DataMem.scala 172:71]
              writeState <= UInt<3>("h3") @[DataMem.scala 173:20]
            else :
              node _T_24 = eq(wLatencyCounter, UInt<7>("h4f")) @[DataMem.scala 174:34]
              when _T_24 : @[DataMem.scala 174:54]
                writeState <= UInt<3>("h5") @[DataMem.scala 175:20]
          else :
            node _T_25 = eq(UInt<3>("h5"), writeState) @[DataMem.scala 140:22]
            when _T_25 : @[DataMem.scala 140:22]
              writeState <= UInt<3>("h1") @[DataMem.scala 179:18]
            else :
              node _T_26 = eq(UInt<3>("h3"), writeState) @[DataMem.scala 140:22]
              when _T_26 : @[DataMem.scala 140:22]
                when io.slave.b.ready : @[DataMem.scala 182:30]
                  writeState <= UInt<3>("h1") @[DataMem.scala 183:20]
    wire _writeData_WIRE : UInt<8>[4] @[DataMem.scala 188:38]
    _writeData_WIRE[0] <= UInt<8>("h0") @[DataMem.scala 188:38]
    _writeData_WIRE[1] <= UInt<8>("h0") @[DataMem.scala 188:38]
    _writeData_WIRE[2] <= UInt<8>("h0") @[DataMem.scala 188:38]
    _writeData_WIRE[3] <= UInt<8>("h0") @[DataMem.scala 188:38]
    wire writeData : UInt<8>[4]
    writeData <= _writeData_WIRE
    node _T_27 = bits(io.slave.w.bits.strb, 0, 0) @[DataMem.scala 190:30]
    node _T_28 = eq(_T_27, UInt<1>("h1")) @[DataMem.scala 190:34]
    when _T_28 : @[DataMem.scala 190:43]
      node _writeData_0_T = bits(io.slave.w.bits.data, 7, 0) @[DataMem.scala 191:43]
      writeData[0] <= _writeData_0_T @[DataMem.scala 191:20]
    else :
      node _writeData_0_T_1 = or(wAddrOffset, UInt<6>("h0")) @[DataMem.scala 193:29]
      node _writeData_0_T_2 = bits(_writeData_0_T_1, 5, 0) @[DataMem.scala 193:29]
      infer mport writeData_0_MPORT = memory[_writeData_0_T_2], clock @[DataMem.scala 193:29]
      node _writeData_0_T_3 = bits(writeData_0_MPORT, 7, 0) @[DataMem.scala 193:42]
      writeData[0] <= _writeData_0_T_3 @[DataMem.scala 193:20]
    node _T_29 = bits(io.slave.w.bits.strb, 1, 1) @[DataMem.scala 190:30]
    node _T_30 = eq(_T_29, UInt<1>("h1")) @[DataMem.scala 190:34]
    when _T_30 : @[DataMem.scala 190:43]
      node _writeData_1_T = bits(io.slave.w.bits.data, 15, 8) @[DataMem.scala 191:43]
      writeData[1] <= _writeData_1_T @[DataMem.scala 191:20]
    else :
      node _writeData_1_T_1 = or(wAddrOffset, UInt<6>("h0")) @[DataMem.scala 193:29]
      node _writeData_1_T_2 = bits(_writeData_1_T_1, 5, 0) @[DataMem.scala 193:29]
      infer mport writeData_1_MPORT = memory[_writeData_1_T_2], clock @[DataMem.scala 193:29]
      node _writeData_1_T_3 = bits(writeData_1_MPORT, 15, 8) @[DataMem.scala 193:42]
      writeData[1] <= _writeData_1_T_3 @[DataMem.scala 193:20]
    node _T_31 = bits(io.slave.w.bits.strb, 2, 2) @[DataMem.scala 190:30]
    node _T_32 = eq(_T_31, UInt<1>("h1")) @[DataMem.scala 190:34]
    when _T_32 : @[DataMem.scala 190:43]
      node _writeData_2_T = bits(io.slave.w.bits.data, 23, 16) @[DataMem.scala 191:43]
      writeData[2] <= _writeData_2_T @[DataMem.scala 191:20]
    else :
      node _writeData_2_T_1 = or(wAddrOffset, UInt<6>("h0")) @[DataMem.scala 193:29]
      node _writeData_2_T_2 = bits(_writeData_2_T_1, 5, 0) @[DataMem.scala 193:29]
      infer mport writeData_2_MPORT = memory[_writeData_2_T_2], clock @[DataMem.scala 193:29]
      node _writeData_2_T_3 = bits(writeData_2_MPORT, 23, 16) @[DataMem.scala 193:42]
      writeData[2] <= _writeData_2_T_3 @[DataMem.scala 193:20]
    node _T_33 = bits(io.slave.w.bits.strb, 3, 3) @[DataMem.scala 190:30]
    node _T_34 = eq(_T_33, UInt<1>("h1")) @[DataMem.scala 190:34]
    when _T_34 : @[DataMem.scala 190:43]
      node _writeData_3_T = bits(io.slave.w.bits.data, 31, 24) @[DataMem.scala 191:43]
      writeData[3] <= _writeData_3_T @[DataMem.scala 191:20]
    else :
      node _writeData_3_T_1 = or(wAddrOffset, UInt<6>("h0")) @[DataMem.scala 193:29]
      node _writeData_3_T_2 = bits(_writeData_3_T_1, 5, 0) @[DataMem.scala 193:29]
      infer mport writeData_3_MPORT = memory[_writeData_3_T_2], clock @[DataMem.scala 193:29]
      node _writeData_3_T_3 = bits(writeData_3_MPORT, 31, 24) @[DataMem.scala 193:42]
      writeData[3] <= _writeData_3_T_3 @[DataMem.scala 193:20]
    node _T_35 = eq(writeState, UInt<3>("h0")) @[DataMem.scala 197:19]
    when _T_35 : @[DataMem.scala 197:30]
      io.slave.aw.ready <= UInt<1>("h0") @[DataMem.scala 198:23]
      io.slave.w.ready <= UInt<1>("h0") @[DataMem.scala 199:22]
      io.slave.b.bits.resp <= UInt<1>("h0") @[DataMem.scala 200:26]
      io.slave.b.valid <= UInt<1>("h0") @[DataMem.scala 201:22]
    else :
      node _T_36 = eq(writeState, UInt<3>("h1")) @[DataMem.scala 203:24]
      when _T_36 : @[DataMem.scala 203:36]
        io.slave.aw.ready <= UInt<1>("h1") @[DataMem.scala 204:23]
        io.slave.w.ready <= UInt<1>("h1") @[DataMem.scala 205:22]
        when io.slave.w.valid : @[DataMem.scala 206:28]
          node _T_37 = or(wAddrOffset, UInt<6>("h0")) @[DataMem.scala 207:13]
          node _T_38 = bits(_T_37, 5, 0) @[DataMem.scala 207:13]
          infer mport MPORT = memory[_T_38], clock @[DataMem.scala 207:13]
          node lo = cat(writeData[1], writeData[0]) @[DataMem.scala 207:46]
          node hi = cat(writeData[3], writeData[2]) @[DataMem.scala 207:46]
          node _T_39 = cat(hi, lo) @[DataMem.scala 207:46]
          MPORT <= _T_39 @[DataMem.scala 207:27]
          writeAddressReg <= wAddrOffset @[DataMem.scala 208:23]
          writeID <= io.slave.aw.bits.id @[DataMem.scala 209:15]
        else :
          when io.slave.aw.valid : @[DataMem.scala 211:34]
            writeAddressReg <= wAddrOffset @[DataMem.scala 212:23]
            writeID <= io.slave.aw.bits.id @[DataMem.scala 213:15]
        io.slave.b.bits.resp <= UInt<1>("h0") @[DataMem.scala 215:26]
        io.slave.b.valid <= UInt<1>("h0") @[DataMem.scala 216:22]
        node _wburst_counter_T = add(wburst_counter, UInt<1>("h1")) @[DataMem.scala 222:24]
        node _wburst_counter_T_1 = tail(_wburst_counter_T, 1) @[DataMem.scala 222:24]
        node _wburst_counter_T_2 = mux(io.slave.w.valid, _wburst_counter_T_1, wburst_counter) @[DataMem.scala 220:26]
        wburst_counter <= _wburst_counter_T_2 @[DataMem.scala 220:20]
      else :
        node _T_40 = eq(writeState, UInt<3>("h4")) @[DataMem.scala 229:24]
        when _T_40 : @[DataMem.scala 229:39]
          io.slave.aw.ready <= UInt<1>("h0") @[DataMem.scala 230:23]
          io.slave.w.ready <= UInt<1>("h1") @[DataMem.scala 231:22]
          io.slave.b.bits.resp <= UInt<1>("h0") @[DataMem.scala 232:26]
          io.slave.b.valid <= UInt<1>("h0") @[DataMem.scala 233:22]
          when io.slave.w.valid : @[DataMem.scala 234:28]
            node _T_41 = bits(writeAddressReg, 5, 0) @[DataMem.scala 235:13]
            infer mport MPORT_1 = memory[_T_41], clock @[DataMem.scala 235:13]
            node lo_1 = cat(writeData[1], writeData[0]) @[DataMem.scala 235:50]
            node hi_1 = cat(writeData[3], writeData[2]) @[DataMem.scala 235:50]
            node _T_42 = cat(hi_1, lo_1) @[DataMem.scala 235:50]
            MPORT_1 <= _T_42 @[DataMem.scala 235:31]
        else :
          node _T_43 = eq(writeState, UInt<3>("h2")) @[DataMem.scala 240:24]
          when _T_43 : @[DataMem.scala 240:39]
            node _wLatencyCounter_T = add(wLatencyCounter, UInt<1>("h1")) @[DataMem.scala 241:40]
            node _wLatencyCounter_T_1 = tail(_wLatencyCounter_T, 1) @[DataMem.scala 241:40]
            wLatencyCounter <= _wLatencyCounter_T_1 @[DataMem.scala 241:21]
          else :
            node _T_44 = eq(writeState, UInt<3>("h5")) @[DataMem.scala 243:24]
            when _T_44 : @[DataMem.scala 243:38]
              wLatencyCounter <= UInt<1>("h0") @[DataMem.scala 244:21]
              io.slave.aw.ready <= UInt<1>("h0") @[DataMem.scala 245:23]
              io.slave.w.ready <= UInt<1>("h0") @[DataMem.scala 246:22]
              io.slave.b.bits.resp <= UInt<1>("h0") @[DataMem.scala 247:26]
              io.slave.b.bits.id <= writeID @[DataMem.scala 248:24]
              node _wAddrOffset_T_5 = add(wAddrOffset, UInt<3>("h4")) @[DataMem.scala 249:32]
              node _wAddrOffset_T_6 = tail(_wAddrOffset_T_5, 1) @[DataMem.scala 249:32]
              wAddrOffset <= _wAddrOffset_T_6 @[DataMem.scala 249:17]
            else :
              node _T_45 = eq(writeState, UInt<3>("h3")) @[DataMem.scala 252:24]
              when _T_45 : @[DataMem.scala 252:37]
                wLatencyCounter <= UInt<1>("h0") @[DataMem.scala 253:21]
                io.slave.aw.ready <= UInt<1>("h0") @[DataMem.scala 254:23]
                io.slave.w.ready <= UInt<1>("h0") @[DataMem.scala 255:22]
                io.slave.b.bits.resp <= UInt<1>("h0") @[DataMem.scala 256:26]
                io.slave.b.bits.id <= writeID @[DataMem.scala 257:24]
                io.slave.b.valid <= UInt<1>("h1") @[DataMem.scala 258:22]
                wburst_counter <= UInt<1>("h0") @[DataMem.scala 260:20]
    when io.dump : @[DataMem.scala 263:17]
      node _T_46 = asUInt(reset) @[DataMem.scala 265:11]
      node _T_47 = eq(_T_46, UInt<1>("h0")) @[DataMem.scala 265:11]
      when _T_47 : @[DataMem.scala 265:11]
        printf(clock, UInt<1>("h1"), "\t\t======== Data Memory Dump ========\n") : printf @[DataMem.scala 265:11]
      node _T_48 = asUInt(reset) @[DataMem.scala 266:11]
      node _T_49 = eq(_T_48, UInt<1>("h0")) @[DataMem.scala 266:11]
      when _T_49 : @[DataMem.scala 266:11]
        printf(clock, UInt<1>("h1"), "\t\tFrom base address 65536\n") : printf_1 @[DataMem.scala 266:11]
      infer mport data_MPORT = memory[UInt<1>("h0")], clock @[DataMem.scala 269:24]
      node data = asSInt(data_MPORT) @[DataMem.scala 269:30]
      node _T_50 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_51 = eq(_T_50, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_51 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[0] (address = %x) = 0x%x (%d)\n", UInt<17>("h10000"), data, data) : printf_2 @[DataMem.scala 270:13]
      infer mport data_MPORT_1 = memory[UInt<1>("h1")], clock @[DataMem.scala 269:24]
      node data_1 = asSInt(data_MPORT_1) @[DataMem.scala 269:30]
      node _T_52 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_53 = eq(_T_52, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_53 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[1] (address = %x) = 0x%x (%d)\n", UInt<17>("h10004"), data_1, data_1) : printf_3 @[DataMem.scala 270:13]
      infer mport data_MPORT_2 = memory[UInt<2>("h2")], clock @[DataMem.scala 269:24]
      node data_2 = asSInt(data_MPORT_2) @[DataMem.scala 269:30]
      node _T_54 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_55 = eq(_T_54, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_55 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[2] (address = %x) = 0x%x (%d)\n", UInt<17>("h10008"), data_2, data_2) : printf_4 @[DataMem.scala 270:13]
      infer mport data_MPORT_3 = memory[UInt<2>("h3")], clock @[DataMem.scala 269:24]
      node data_3 = asSInt(data_MPORT_3) @[DataMem.scala 269:30]
      node _T_56 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_57 = eq(_T_56, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_57 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[3] (address = %x) = 0x%x (%d)\n", UInt<17>("h1000c"), data_3, data_3) : printf_5 @[DataMem.scala 270:13]
      infer mport data_MPORT_4 = memory[UInt<3>("h4")], clock @[DataMem.scala 269:24]
      node data_4 = asSInt(data_MPORT_4) @[DataMem.scala 269:30]
      node _T_58 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_59 = eq(_T_58, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_59 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[4] (address = %x) = 0x%x (%d)\n", UInt<17>("h10010"), data_4, data_4) : printf_6 @[DataMem.scala 270:13]
      infer mport data_MPORT_5 = memory[UInt<3>("h5")], clock @[DataMem.scala 269:24]
      node data_5 = asSInt(data_MPORT_5) @[DataMem.scala 269:30]
      node _T_60 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_61 = eq(_T_60, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_61 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[5] (address = %x) = 0x%x (%d)\n", UInt<17>("h10014"), data_5, data_5) : printf_7 @[DataMem.scala 270:13]
      infer mport data_MPORT_6 = memory[UInt<3>("h6")], clock @[DataMem.scala 269:24]
      node data_6 = asSInt(data_MPORT_6) @[DataMem.scala 269:30]
      node _T_62 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_63 = eq(_T_62, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_63 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[6] (address = %x) = 0x%x (%d)\n", UInt<17>("h10018"), data_6, data_6) : printf_8 @[DataMem.scala 270:13]
      infer mport data_MPORT_7 = memory[UInt<3>("h7")], clock @[DataMem.scala 269:24]
      node data_7 = asSInt(data_MPORT_7) @[DataMem.scala 269:30]
      node _T_64 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_65 = eq(_T_64, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_65 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[7] (address = %x) = 0x%x (%d)\n", UInt<17>("h1001c"), data_7, data_7) : printf_9 @[DataMem.scala 270:13]
      infer mport data_MPORT_8 = memory[UInt<4>("h8")], clock @[DataMem.scala 269:24]
      node data_8 = asSInt(data_MPORT_8) @[DataMem.scala 269:30]
      node _T_66 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_67 = eq(_T_66, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_67 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[8] (address = %x) = 0x%x (%d)\n", UInt<17>("h10020"), data_8, data_8) : printf_10 @[DataMem.scala 270:13]
      infer mport data_MPORT_9 = memory[UInt<4>("h9")], clock @[DataMem.scala 269:24]
      node data_9 = asSInt(data_MPORT_9) @[DataMem.scala 269:30]
      node _T_68 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_69 = eq(_T_68, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_69 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[9] (address = %x) = 0x%x (%d)\n", UInt<17>("h10024"), data_9, data_9) : printf_11 @[DataMem.scala 270:13]
      infer mport data_MPORT_10 = memory[UInt<4>("ha")], clock @[DataMem.scala 269:24]
      node data_10 = asSInt(data_MPORT_10) @[DataMem.scala 269:30]
      node _T_70 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_71 = eq(_T_70, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_71 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[10] (address = %x) = 0x%x (%d)\n", UInt<17>("h10028"), data_10, data_10) : printf_12 @[DataMem.scala 270:13]
      infer mport data_MPORT_11 = memory[UInt<4>("hb")], clock @[DataMem.scala 269:24]
      node data_11 = asSInt(data_MPORT_11) @[DataMem.scala 269:30]
      node _T_72 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_73 = eq(_T_72, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_73 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[11] (address = %x) = 0x%x (%d)\n", UInt<17>("h1002c"), data_11, data_11) : printf_13 @[DataMem.scala 270:13]
      infer mport data_MPORT_12 = memory[UInt<4>("hc")], clock @[DataMem.scala 269:24]
      node data_12 = asSInt(data_MPORT_12) @[DataMem.scala 269:30]
      node _T_74 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_75 = eq(_T_74, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_75 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[12] (address = %x) = 0x%x (%d)\n", UInt<17>("h10030"), data_12, data_12) : printf_14 @[DataMem.scala 270:13]
      infer mport data_MPORT_13 = memory[UInt<4>("hd")], clock @[DataMem.scala 269:24]
      node data_13 = asSInt(data_MPORT_13) @[DataMem.scala 269:30]
      node _T_76 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_77 = eq(_T_76, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_77 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[13] (address = %x) = 0x%x (%d)\n", UInt<17>("h10034"), data_13, data_13) : printf_15 @[DataMem.scala 270:13]
      infer mport data_MPORT_14 = memory[UInt<4>("he")], clock @[DataMem.scala 269:24]
      node data_14 = asSInt(data_MPORT_14) @[DataMem.scala 269:30]
      node _T_78 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_79 = eq(_T_78, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_79 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[14] (address = %x) = 0x%x (%d)\n", UInt<17>("h10038"), data_14, data_14) : printf_16 @[DataMem.scala 270:13]
      infer mport data_MPORT_15 = memory[UInt<4>("hf")], clock @[DataMem.scala 269:24]
      node data_15 = asSInt(data_MPORT_15) @[DataMem.scala 269:30]
      node _T_80 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_81 = eq(_T_80, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_81 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[15] (address = %x) = 0x%x (%d)\n", UInt<17>("h1003c"), data_15, data_15) : printf_17 @[DataMem.scala 270:13]
      infer mport data_MPORT_16 = memory[UInt<5>("h10")], clock @[DataMem.scala 269:24]
      node data_16 = asSInt(data_MPORT_16) @[DataMem.scala 269:30]
      node _T_82 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_83 = eq(_T_82, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_83 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[16] (address = %x) = 0x%x (%d)\n", UInt<17>("h10040"), data_16, data_16) : printf_18 @[DataMem.scala 270:13]
      infer mport data_MPORT_17 = memory[UInt<5>("h11")], clock @[DataMem.scala 269:24]
      node data_17 = asSInt(data_MPORT_17) @[DataMem.scala 269:30]
      node _T_84 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_85 = eq(_T_84, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_85 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[17] (address = %x) = 0x%x (%d)\n", UInt<17>("h10044"), data_17, data_17) : printf_19 @[DataMem.scala 270:13]
      infer mport data_MPORT_18 = memory[UInt<5>("h12")], clock @[DataMem.scala 269:24]
      node data_18 = asSInt(data_MPORT_18) @[DataMem.scala 269:30]
      node _T_86 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_87 = eq(_T_86, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_87 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[18] (address = %x) = 0x%x (%d)\n", UInt<17>("h10048"), data_18, data_18) : printf_20 @[DataMem.scala 270:13]
      infer mport data_MPORT_19 = memory[UInt<5>("h13")], clock @[DataMem.scala 269:24]
      node data_19 = asSInt(data_MPORT_19) @[DataMem.scala 269:30]
      node _T_88 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_89 = eq(_T_88, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_89 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[19] (address = %x) = 0x%x (%d)\n", UInt<17>("h1004c"), data_19, data_19) : printf_21 @[DataMem.scala 270:13]
      infer mport data_MPORT_20 = memory[UInt<5>("h14")], clock @[DataMem.scala 269:24]
      node data_20 = asSInt(data_MPORT_20) @[DataMem.scala 269:30]
      node _T_90 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_91 = eq(_T_90, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_91 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[20] (address = %x) = 0x%x (%d)\n", UInt<17>("h10050"), data_20, data_20) : printf_22 @[DataMem.scala 270:13]
      infer mport data_MPORT_21 = memory[UInt<5>("h15")], clock @[DataMem.scala 269:24]
      node data_21 = asSInt(data_MPORT_21) @[DataMem.scala 269:30]
      node _T_92 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_93 = eq(_T_92, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_93 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[21] (address = %x) = 0x%x (%d)\n", UInt<17>("h10054"), data_21, data_21) : printf_23 @[DataMem.scala 270:13]
      infer mport data_MPORT_22 = memory[UInt<5>("h16")], clock @[DataMem.scala 269:24]
      node data_22 = asSInt(data_MPORT_22) @[DataMem.scala 269:30]
      node _T_94 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_95 = eq(_T_94, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_95 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[22] (address = %x) = 0x%x (%d)\n", UInt<17>("h10058"), data_22, data_22) : printf_24 @[DataMem.scala 270:13]
      infer mport data_MPORT_23 = memory[UInt<5>("h17")], clock @[DataMem.scala 269:24]
      node data_23 = asSInt(data_MPORT_23) @[DataMem.scala 269:30]
      node _T_96 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_97 = eq(_T_96, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_97 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[23] (address = %x) = 0x%x (%d)\n", UInt<17>("h1005c"), data_23, data_23) : printf_25 @[DataMem.scala 270:13]
      infer mport data_MPORT_24 = memory[UInt<5>("h18")], clock @[DataMem.scala 269:24]
      node data_24 = asSInt(data_MPORT_24) @[DataMem.scala 269:30]
      node _T_98 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_99 = eq(_T_98, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_99 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[24] (address = %x) = 0x%x (%d)\n", UInt<17>("h10060"), data_24, data_24) : printf_26 @[DataMem.scala 270:13]
      infer mport data_MPORT_25 = memory[UInt<5>("h19")], clock @[DataMem.scala 269:24]
      node data_25 = asSInt(data_MPORT_25) @[DataMem.scala 269:30]
      node _T_100 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_101 = eq(_T_100, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_101 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[25] (address = %x) = 0x%x (%d)\n", UInt<17>("h10064"), data_25, data_25) : printf_27 @[DataMem.scala 270:13]
      infer mport data_MPORT_26 = memory[UInt<5>("h1a")], clock @[DataMem.scala 269:24]
      node data_26 = asSInt(data_MPORT_26) @[DataMem.scala 269:30]
      node _T_102 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_103 = eq(_T_102, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_103 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[26] (address = %x) = 0x%x (%d)\n", UInt<17>("h10068"), data_26, data_26) : printf_28 @[DataMem.scala 270:13]
      infer mport data_MPORT_27 = memory[UInt<5>("h1b")], clock @[DataMem.scala 269:24]
      node data_27 = asSInt(data_MPORT_27) @[DataMem.scala 269:30]
      node _T_104 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_105 = eq(_T_104, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_105 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[27] (address = %x) = 0x%x (%d)\n", UInt<17>("h1006c"), data_27, data_27) : printf_29 @[DataMem.scala 270:13]
      infer mport data_MPORT_28 = memory[UInt<5>("h1c")], clock @[DataMem.scala 269:24]
      node data_28 = asSInt(data_MPORT_28) @[DataMem.scala 269:30]
      node _T_106 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_107 = eq(_T_106, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_107 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[28] (address = %x) = 0x%x (%d)\n", UInt<17>("h10070"), data_28, data_28) : printf_30 @[DataMem.scala 270:13]
      infer mport data_MPORT_29 = memory[UInt<5>("h1d")], clock @[DataMem.scala 269:24]
      node data_29 = asSInt(data_MPORT_29) @[DataMem.scala 269:30]
      node _T_108 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_109 = eq(_T_108, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_109 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[29] (address = %x) = 0x%x (%d)\n", UInt<17>("h10074"), data_29, data_29) : printf_31 @[DataMem.scala 270:13]
      infer mport data_MPORT_30 = memory[UInt<5>("h1e")], clock @[DataMem.scala 269:24]
      node data_30 = asSInt(data_MPORT_30) @[DataMem.scala 269:30]
      node _T_110 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_111 = eq(_T_110, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_111 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[30] (address = %x) = 0x%x (%d)\n", UInt<17>("h10078"), data_30, data_30) : printf_32 @[DataMem.scala 270:13]
      infer mport data_MPORT_31 = memory[UInt<5>("h1f")], clock @[DataMem.scala 269:24]
      node data_31 = asSInt(data_MPORT_31) @[DataMem.scala 269:30]
      node _T_112 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_113 = eq(_T_112, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_113 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[31] (address = %x) = 0x%x (%d)\n", UInt<17>("h1007c"), data_31, data_31) : printf_33 @[DataMem.scala 270:13]
      infer mport data_MPORT_32 = memory[UInt<6>("h20")], clock @[DataMem.scala 269:24]
      node data_32 = asSInt(data_MPORT_32) @[DataMem.scala 269:30]
      node _T_114 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_115 = eq(_T_114, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_115 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[32] (address = %x) = 0x%x (%d)\n", UInt<17>("h10080"), data_32, data_32) : printf_34 @[DataMem.scala 270:13]
      infer mport data_MPORT_33 = memory[UInt<6>("h21")], clock @[DataMem.scala 269:24]
      node data_33 = asSInt(data_MPORT_33) @[DataMem.scala 269:30]
      node _T_116 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_117 = eq(_T_116, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_117 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[33] (address = %x) = 0x%x (%d)\n", UInt<17>("h10084"), data_33, data_33) : printf_35 @[DataMem.scala 270:13]
      infer mport data_MPORT_34 = memory[UInt<6>("h22")], clock @[DataMem.scala 269:24]
      node data_34 = asSInt(data_MPORT_34) @[DataMem.scala 269:30]
      node _T_118 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_119 = eq(_T_118, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_119 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[34] (address = %x) = 0x%x (%d)\n", UInt<17>("h10088"), data_34, data_34) : printf_36 @[DataMem.scala 270:13]
      infer mport data_MPORT_35 = memory[UInt<6>("h23")], clock @[DataMem.scala 269:24]
      node data_35 = asSInt(data_MPORT_35) @[DataMem.scala 269:30]
      node _T_120 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_121 = eq(_T_120, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_121 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[35] (address = %x) = 0x%x (%d)\n", UInt<17>("h1008c"), data_35, data_35) : printf_37 @[DataMem.scala 270:13]
      infer mport data_MPORT_36 = memory[UInt<6>("h24")], clock @[DataMem.scala 269:24]
      node data_36 = asSInt(data_MPORT_36) @[DataMem.scala 269:30]
      node _T_122 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_123 = eq(_T_122, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_123 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[36] (address = %x) = 0x%x (%d)\n", UInt<17>("h10090"), data_36, data_36) : printf_38 @[DataMem.scala 270:13]
      infer mport data_MPORT_37 = memory[UInt<6>("h25")], clock @[DataMem.scala 269:24]
      node data_37 = asSInt(data_MPORT_37) @[DataMem.scala 269:30]
      node _T_124 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_125 = eq(_T_124, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_125 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[37] (address = %x) = 0x%x (%d)\n", UInt<17>("h10094"), data_37, data_37) : printf_39 @[DataMem.scala 270:13]
      infer mport data_MPORT_38 = memory[UInt<6>("h26")], clock @[DataMem.scala 269:24]
      node data_38 = asSInt(data_MPORT_38) @[DataMem.scala 269:30]
      node _T_126 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_127 = eq(_T_126, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_127 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[38] (address = %x) = 0x%x (%d)\n", UInt<17>("h10098"), data_38, data_38) : printf_40 @[DataMem.scala 270:13]
      infer mport data_MPORT_39 = memory[UInt<6>("h27")], clock @[DataMem.scala 269:24]
      node data_39 = asSInt(data_MPORT_39) @[DataMem.scala 269:30]
      node _T_128 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_129 = eq(_T_128, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_129 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[39] (address = %x) = 0x%x (%d)\n", UInt<17>("h1009c"), data_39, data_39) : printf_41 @[DataMem.scala 270:13]
      infer mport data_MPORT_40 = memory[UInt<6>("h28")], clock @[DataMem.scala 269:24]
      node data_40 = asSInt(data_MPORT_40) @[DataMem.scala 269:30]
      node _T_130 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_131 = eq(_T_130, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_131 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[40] (address = %x) = 0x%x (%d)\n", UInt<17>("h100a0"), data_40, data_40) : printf_42 @[DataMem.scala 270:13]
      infer mport data_MPORT_41 = memory[UInt<6>("h29")], clock @[DataMem.scala 269:24]
      node data_41 = asSInt(data_MPORT_41) @[DataMem.scala 269:30]
      node _T_132 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_133 = eq(_T_132, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_133 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[41] (address = %x) = 0x%x (%d)\n", UInt<17>("h100a4"), data_41, data_41) : printf_43 @[DataMem.scala 270:13]
      infer mport data_MPORT_42 = memory[UInt<6>("h2a")], clock @[DataMem.scala 269:24]
      node data_42 = asSInt(data_MPORT_42) @[DataMem.scala 269:30]
      node _T_134 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_135 = eq(_T_134, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_135 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[42] (address = %x) = 0x%x (%d)\n", UInt<17>("h100a8"), data_42, data_42) : printf_44 @[DataMem.scala 270:13]
      infer mport data_MPORT_43 = memory[UInt<6>("h2b")], clock @[DataMem.scala 269:24]
      node data_43 = asSInt(data_MPORT_43) @[DataMem.scala 269:30]
      node _T_136 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_137 = eq(_T_136, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_137 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[43] (address = %x) = 0x%x (%d)\n", UInt<17>("h100ac"), data_43, data_43) : printf_45 @[DataMem.scala 270:13]
      infer mport data_MPORT_44 = memory[UInt<6>("h2c")], clock @[DataMem.scala 269:24]
      node data_44 = asSInt(data_MPORT_44) @[DataMem.scala 269:30]
      node _T_138 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_139 = eq(_T_138, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_139 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[44] (address = %x) = 0x%x (%d)\n", UInt<17>("h100b0"), data_44, data_44) : printf_46 @[DataMem.scala 270:13]
      infer mport data_MPORT_45 = memory[UInt<6>("h2d")], clock @[DataMem.scala 269:24]
      node data_45 = asSInt(data_MPORT_45) @[DataMem.scala 269:30]
      node _T_140 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_141 = eq(_T_140, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_141 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[45] (address = %x) = 0x%x (%d)\n", UInt<17>("h100b4"), data_45, data_45) : printf_47 @[DataMem.scala 270:13]
      infer mport data_MPORT_46 = memory[UInt<6>("h2e")], clock @[DataMem.scala 269:24]
      node data_46 = asSInt(data_MPORT_46) @[DataMem.scala 269:30]
      node _T_142 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_143 = eq(_T_142, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_143 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[46] (address = %x) = 0x%x (%d)\n", UInt<17>("h100b8"), data_46, data_46) : printf_48 @[DataMem.scala 270:13]
      infer mport data_MPORT_47 = memory[UInt<6>("h2f")], clock @[DataMem.scala 269:24]
      node data_47 = asSInt(data_MPORT_47) @[DataMem.scala 269:30]
      node _T_144 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_145 = eq(_T_144, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_145 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[47] (address = %x) = 0x%x (%d)\n", UInt<17>("h100bc"), data_47, data_47) : printf_49 @[DataMem.scala 270:13]
      infer mport data_MPORT_48 = memory[UInt<6>("h30")], clock @[DataMem.scala 269:24]
      node data_48 = asSInt(data_MPORT_48) @[DataMem.scala 269:30]
      node _T_146 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_147 = eq(_T_146, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_147 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[48] (address = %x) = 0x%x (%d)\n", UInt<17>("h100c0"), data_48, data_48) : printf_50 @[DataMem.scala 270:13]
      infer mport data_MPORT_49 = memory[UInt<6>("h31")], clock @[DataMem.scala 269:24]
      node data_49 = asSInt(data_MPORT_49) @[DataMem.scala 269:30]
      node _T_148 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_149 = eq(_T_148, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_149 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[49] (address = %x) = 0x%x (%d)\n", UInt<17>("h100c4"), data_49, data_49) : printf_51 @[DataMem.scala 270:13]
      infer mport data_MPORT_50 = memory[UInt<6>("h32")], clock @[DataMem.scala 269:24]
      node data_50 = asSInt(data_MPORT_50) @[DataMem.scala 269:30]
      node _T_150 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_151 = eq(_T_150, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_151 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[50] (address = %x) = 0x%x (%d)\n", UInt<17>("h100c8"), data_50, data_50) : printf_52 @[DataMem.scala 270:13]
      infer mport data_MPORT_51 = memory[UInt<6>("h33")], clock @[DataMem.scala 269:24]
      node data_51 = asSInt(data_MPORT_51) @[DataMem.scala 269:30]
      node _T_152 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_153 = eq(_T_152, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_153 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[51] (address = %x) = 0x%x (%d)\n", UInt<17>("h100cc"), data_51, data_51) : printf_53 @[DataMem.scala 270:13]
      infer mport data_MPORT_52 = memory[UInt<6>("h34")], clock @[DataMem.scala 269:24]
      node data_52 = asSInt(data_MPORT_52) @[DataMem.scala 269:30]
      node _T_154 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_155 = eq(_T_154, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_155 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[52] (address = %x) = 0x%x (%d)\n", UInt<17>("h100d0"), data_52, data_52) : printf_54 @[DataMem.scala 270:13]
      infer mport data_MPORT_53 = memory[UInt<6>("h35")], clock @[DataMem.scala 269:24]
      node data_53 = asSInt(data_MPORT_53) @[DataMem.scala 269:30]
      node _T_156 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_157 = eq(_T_156, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_157 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[53] (address = %x) = 0x%x (%d)\n", UInt<17>("h100d4"), data_53, data_53) : printf_55 @[DataMem.scala 270:13]
      infer mport data_MPORT_54 = memory[UInt<6>("h36")], clock @[DataMem.scala 269:24]
      node data_54 = asSInt(data_MPORT_54) @[DataMem.scala 269:30]
      node _T_158 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_159 = eq(_T_158, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_159 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[54] (address = %x) = 0x%x (%d)\n", UInt<17>("h100d8"), data_54, data_54) : printf_56 @[DataMem.scala 270:13]
      infer mport data_MPORT_55 = memory[UInt<6>("h37")], clock @[DataMem.scala 269:24]
      node data_55 = asSInt(data_MPORT_55) @[DataMem.scala 269:30]
      node _T_160 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_161 = eq(_T_160, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_161 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[55] (address = %x) = 0x%x (%d)\n", UInt<17>("h100dc"), data_55, data_55) : printf_57 @[DataMem.scala 270:13]
      infer mport data_MPORT_56 = memory[UInt<6>("h38")], clock @[DataMem.scala 269:24]
      node data_56 = asSInt(data_MPORT_56) @[DataMem.scala 269:30]
      node _T_162 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_163 = eq(_T_162, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_163 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[56] (address = %x) = 0x%x (%d)\n", UInt<17>("h100e0"), data_56, data_56) : printf_58 @[DataMem.scala 270:13]
      infer mport data_MPORT_57 = memory[UInt<6>("h39")], clock @[DataMem.scala 269:24]
      node data_57 = asSInt(data_MPORT_57) @[DataMem.scala 269:30]
      node _T_164 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_165 = eq(_T_164, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_165 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[57] (address = %x) = 0x%x (%d)\n", UInt<17>("h100e4"), data_57, data_57) : printf_59 @[DataMem.scala 270:13]
      infer mport data_MPORT_58 = memory[UInt<6>("h3a")], clock @[DataMem.scala 269:24]
      node data_58 = asSInt(data_MPORT_58) @[DataMem.scala 269:30]
      node _T_166 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_167 = eq(_T_166, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_167 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[58] (address = %x) = 0x%x (%d)\n", UInt<17>("h100e8"), data_58, data_58) : printf_60 @[DataMem.scala 270:13]
      infer mport data_MPORT_59 = memory[UInt<6>("h3b")], clock @[DataMem.scala 269:24]
      node data_59 = asSInt(data_MPORT_59) @[DataMem.scala 269:30]
      node _T_168 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_169 = eq(_T_168, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_169 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[59] (address = %x) = 0x%x (%d)\n", UInt<17>("h100ec"), data_59, data_59) : printf_61 @[DataMem.scala 270:13]
      infer mport data_MPORT_60 = memory[UInt<6>("h3c")], clock @[DataMem.scala 269:24]
      node data_60 = asSInt(data_MPORT_60) @[DataMem.scala 269:30]
      node _T_170 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_171 = eq(_T_170, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_171 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[60] (address = %x) = 0x%x (%d)\n", UInt<17>("h100f0"), data_60, data_60) : printf_62 @[DataMem.scala 270:13]
      infer mport data_MPORT_61 = memory[UInt<6>("h3d")], clock @[DataMem.scala 269:24]
      node data_61 = asSInt(data_MPORT_61) @[DataMem.scala 269:30]
      node _T_172 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_173 = eq(_T_172, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_173 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[61] (address = %x) = 0x%x (%d)\n", UInt<17>("h100f4"), data_61, data_61) : printf_63 @[DataMem.scala 270:13]
      infer mport data_MPORT_62 = memory[UInt<6>("h3e")], clock @[DataMem.scala 269:24]
      node data_62 = asSInt(data_MPORT_62) @[DataMem.scala 269:30]
      node _T_174 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_175 = eq(_T_174, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_175 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[62] (address = %x) = 0x%x (%d)\n", UInt<17>("h100f8"), data_62, data_62) : printf_64 @[DataMem.scala 270:13]
      infer mport data_MPORT_63 = memory[UInt<6>("h3f")], clock @[DataMem.scala 269:24]
      node data_63 = asSInt(data_MPORT_63) @[DataMem.scala 269:30]
      node _T_176 = asUInt(reset) @[DataMem.scala 270:13]
      node _T_177 = eq(_T_176, UInt<1>("h0")) @[DataMem.scala 270:13]
      when _T_177 : @[DataMem.scala 270:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[63] (address = %x) = 0x%x (%d)\n", UInt<17>("h100fc"), data_63, data_63) : printf_65 @[DataMem.scala 270:13]
      node _T_178 = asUInt(reset) @[DataMem.scala 274:11]
      node _T_179 = eq(_T_178, UInt<1>("h0")) @[DataMem.scala 274:11]
      when _T_179 : @[DataMem.scala 274:11]
        printf(clock, UInt<1>("h1"), "\n") : printf_66 @[DataMem.scala 274:11]

  module top_SoC :
    input clock : Clock
    input reset : UInt<1>
    output io : { regs : UInt<32>[32], Hcf : UInt<1>, inst : UInt<32>, rdata : UInt<32>, wdata : UInt<32>, flip Dump_Mem : UInt<1>, E_Branch_taken : UInt<1>, Flush : UInt<1>, Stall_MA : UInt<1>, Stall_DH : UInt<1>, IF_PC : UInt<32>, ID_PC : UInt<32>, EXE_PC : UInt<32>, MEM_PC : UInt<32>, WB_PC : UInt<32>, EXE_alu_out : UInt<32>, EXE_src1 : UInt<32>, EXE_src2 : UInt<32>, ALU_src1 : UInt<32>, ALU_src2 : UInt<32>, raddr : UInt<32>, WB_rd : UInt<5>, WB_wdata : UInt<32>, EXE_Jump : UInt<1>, EXE_Branch : UInt<1>, DMA_Hcf : UInt<1>}

    inst dma of DMA @[top_SoC.scala 75:21]
    dma.clock <= clock
    dma.reset <= reset
    inst cpu of PipelinedCPU @[top_SoC.scala 76:21]
    cpu.clock <= clock
    cpu.reset <= reset
    inst im of InstMem @[top_SoC.scala 77:20]
    im.clock <= clock
    im.reset <= reset
    inst bus of AXILiteXBar @[top_SoC.scala 79:21]
    bus.clock <= clock
    bus.reset <= reset
    inst localMem of DataMem @[top_SoC.scala 94:26]
    localMem.clock <= clock
    localMem.reset <= reset
    inst globalMem of DataMem_1 @[top_SoC.scala 106:27]
    globalMem.clock <= clock
    globalMem.reset <= reset
    bus.io.masters[0] <= cpu.io.master @[top_SoC.scala 122:23]
    bus.io.masters[1] <= dma.io.master @[top_SoC.scala 123:23]
    bus.io.slaves[0] <= dma.io.slave @[top_SoC.scala 125:22]
    bus.io.slaves[1] <= localMem.io.slave @[top_SoC.scala 126:22]
    bus.io.slaves[2] <= globalMem.io.slave @[top_SoC.scala 127:22]
    localMem.io.dump <= io.Dump_Mem @[top_SoC.scala 131:22]
    globalMem.io.dump <= UInt<1>("h0") @[top_SoC.scala 132:23]
    cpu.io.DataMem.rdata <= localMem.io.slave.r.bits.data @[top_SoC.scala 133:26]
    im.io.raddr <= cpu.io.InstMem.raddr @[top_SoC.scala 136:17]
    cpu.io.InstMem.rdata <= im.io.inst @[top_SoC.scala 137:26]
    io.DMA_Hcf <= dma.io.Hcf @[top_SoC.scala 140:16]
    io.regs <= cpu.io.regs @[top_SoC.scala 141:13]
    io.Hcf <= cpu.io.Hcf @[top_SoC.scala 142:12]
    io.inst <= im.io.inst @[top_SoC.scala 143:13]
    io.rdata <= cpu.io.master.r.bits.data @[top_SoC.scala 144:14]
    io.wdata <= cpu.io.master.w.bits.data @[top_SoC.scala 145:14]
    cpu.io.DMA_Hcf <= dma.io.Hcf @[top_SoC.scala 146:20]
    cpu.io.InstMem.Valid <= UInt<1>("h1") @[top_SoC.scala 147:26]
    cpu.io.DataMem.Valid <= UInt<1>("h1") @[top_SoC.scala 148:26]
    io.E_Branch_taken <= cpu.io.E_Branch_taken @[top_SoC.scala 155:23]
    io.Flush <= cpu.io.Flush @[top_SoC.scala 156:14]
    io.Stall_MA <= cpu.io.Stall_MA @[top_SoC.scala 157:17]
    io.Stall_DH <= cpu.io.Stall_DH @[top_SoC.scala 158:17]
    io.IF_PC <= cpu.io.IF_PC @[top_SoC.scala 159:14]
    io.ID_PC <= cpu.io.ID_PC @[top_SoC.scala 160:14]
    io.EXE_PC <= cpu.io.EXE_PC @[top_SoC.scala 161:15]
    io.MEM_PC <= cpu.io.MEM_PC @[top_SoC.scala 162:15]
    io.WB_PC <= cpu.io.WB_PC @[top_SoC.scala 163:14]
    io.EXE_alu_out <= cpu.io.EXE_alu_out @[top_SoC.scala 164:20]
    io.EXE_src1 <= cpu.io.EXE_src1 @[top_SoC.scala 165:17]
    io.EXE_src2 <= cpu.io.EXE_src2 @[top_SoC.scala 166:17]
    io.ALU_src1 <= cpu.io.ALU_src1 @[top_SoC.scala 167:17]
    io.ALU_src2 <= cpu.io.ALU_src2 @[top_SoC.scala 168:17]
    io.raddr <= cpu.io.DataMem.raddr @[top_SoC.scala 169:14]
    io.WB_rd <= cpu.io.WB_rd @[top_SoC.scala 170:14]
    io.WB_wdata <= cpu.io.WB_wdata @[top_SoC.scala 171:17]
    io.EXE_Jump <= cpu.io.EXE_Jump @[top_SoC.scala 172:17]
    io.EXE_Branch <= cpu.io.EXE_Branch @[top_SoC.scala 173:19]

